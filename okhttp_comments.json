{
    "403": [],
    "309": [],
    "2224": [],
    "2555": [],
    "4505": [],
    "1621": [],
    "3421": [],
    "17": [
        "@swankjesse, would it make sense to drop OkHttpModule in here, or maybe we should have a full-fledged sample app?\n",
        "We should fill out the README with example usage. For now, OkHttpConnection works exactly the same as HttpURLConnection:\n  URL url = ...\n  OkHttpConnection httpConnection = OkHttpConnection.open(url);\n\nWe'll also need to figure out how to hook up the HTTP response cache and document that. I'm hoping that its API also mirrors Android's built-in response cache. We still need to write the code. I'm hoping the API looks like this:\n  File httpCacheDir = ...\n  long httpCacheSize = ...\n  OkHttpResponseCache.install(httpCacheDir, httpCacheSize);\n\nAlso outstanding on our end is to publish OkHttp to maven so end users can get .jar files.\n",
        "@pforhan great idea! We should publish OkHttpClient in its own maven module for folks interested in upgrading from Apache HTTP client.\n",
        "FWIW, I'm also interested in some docs & more samples.  I'm trying to decide whether to use OkHttp or google-http-client for my android project and I'm really at a loss.\n\nI understand putting together docs & samples isn't really glamorous or exciting, but it would certainly be a great way to\u00a0encourage usage and engagement by the community.\n\nIf (in the meantime) someone has some some pointers for me, I'd very much appreciate that.\n",
        "We are working on these. Check back next week.\n\nFor what it's worth, `OkHttpClient` is all you need to look at. 99% of everything else is covered by normal `HttpUrlConnection` and `HttpsUrlConnection`'s APIs.\n",
        "@JakeWharton I'm really glad to hear that.  Everything seems simple enough for `get` requests, but I'm a bit unclear on `post` requests.  I was hoping for a simple `setContent` API or something like that, but from perusing the tests, it seems a bit more involved, eg (with some branches removed):\n\n``` java\n    HttpURLConnection conn = client.open(server.getUrl(\"/\"));\n    conn.setDoOutput(true);  // this is redundant to setting requestMethod right?\n    conn.setRequestMethod(\"POST\");\n    conn.setFixedLengthStreamingMode(n);\n    OutputStream out = conn.getOutputStream();\n    byte[] buf = new byte[writeKind == WriteKind.SMALL_BUFFERS ? 256 : 64 * 1024];\n    Arrays.fill(buf, (byte) 'x');   // xxxxxxxxxxxxxxxxxxxxxxxxx....\n    for (int i = 0; i < n; i += buf.length) {\n      out.write(buf, 0, Math.min(buf.length, n - i));\n    }\n    out.close();\n```\n",
        "Sending content is a bit more involved, yes. Check back next week :)\n",
        "Copy that. I'll try to make do until then. Unfortunately the [Downloads](https://github.com/square/okhttp/downloads) page has no deployable jars and we decided to avoid the complexity of Maven setup with our project for now.  There's also no simple build option so was wondering what you'd recommend for me to get started.\n",
        "Moreover, from [searching maven](http://search.maven.org/#search%7Cga%7C1%7Cokhttp), it seems there isn't even a jar in Maven that can satisfy the dependency (nothing with groupId of \"com.squareup\" and \"okhttp\").\n\nI guess figuring out maven isn't so bad, but when trying to `maven package` to build a jar I can use, tests fail with 63 errors.  I can skip tests of course but is that wise?  Are the failing tests failing because my environment isn't setup properly or because the project is actually broken?  If it's actually broken right now, do you know of the last green SHA?\n\nSorry about all the questions. I don't want to pull `google-http-client` into my project only to switch it out for okhttp next week.  I guess I was idiotic to start writing code that depends on a library I didn't have in my `libs` dir yet.    :pensive:\n",
        "Tests require Java 7. You can safely `mvn clean install -DskipTests` (or package) for now. We verify them on every pull.\n",
        "Awesome!  Thanks so much @JakeWharton, I'm very grateful  :smile: \n",
        "I have made a couple recent builds for my own work using okhttp which you can use for now:\n\nhttp://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22io.tesla.okhttp%22%20AND%20a%3A%22okhttp%22\n",
        "There are a few samples in `master` and a documentation website that is now live (and will be expanded on).\n"
    ],
    "2642": [],
    "9": [],
    "2860": [],
    "575": [],
    "713": [],
    "604": [],
    "2458": [],
    "4631": [],
    "144": [],
    "694": [],
    "653": [],
    "1250": [],
    "2235": [],
    "3716": [],
    "1710": [],
    "2825": [],
    "4586": [],
    "3272": [],
    "927": [],
    "3851": [],
    "851": [],
    "90": [
        "https://github.com/square/okhttp/pull/92\n"
    ],
    "1654": [],
    "1063": [],
    "3578": [],
    "104": [],
    "106": [],
    "4440": [],
    "4582": [],
    "116": [
        "If you are using Gzip, how to configure the server to do?\n",
        "@minliang1219 that's a question for stack overflow!\n",
        "@swankjesse it solved?\n"
    ],
    "481": [],
    "4653": [],
    "128": [
        "https://code.google.com/p/android/issues/detail?id=56942\n",
        "Jetty's tracking bug: https://bugs.eclipse.org/bugs/show_bug.cgi?id=405729\n",
        "Implemented in AOSP. Next step: use it from OkHttp.\n"
    ],
    "2005": [],
    "131": [
        "We have a use case where we want to clear the HttpResponseCache used by OkHttp without setting a new HttpResponseCache. Is this something that could be added? Right now, there's only a method to delete the cache and no way of recreating it other than creating a new HttpResponseCache.\n",
        "@iamstuffed clearing the entire cache is rarely the right answer. It suggests you aren't using your HTTP caching headers properly. Could you create a separate issue to explain what you want and why you want it?\n",
        "Next up: give it a better public API. Drop the internal API calls (get/put/update) and focus on the user-visible knobs: directory, size, & stats.\n",
        "I think we have all we need for now. We may want to revisit this upon a user request.\n"
    ],
    "103": [],
    "137": [
        "My understanding of this situation is that it is impossible, at the Java layer, to detect that the server has closed its side of the TCP socket, until we try to read data from it. I think that right now, the entire request is being sent, regardless of its length, and the EOFException is not being thrown until we try to read the status code from the response.\n\nAt the TCP layer, the client socket is sending several packets out to the server, which will sent RST packets back as soon as it receives them. Once the client gets the first RST, then I believe that it stops sending data out the network (it may be just black-holing what it receives from the application layer) but by then, quite a bit of data could have gone out, depending on the link latency and the window size.\n\nIt would be great if we could do a non-blocking read() on the socket before attempting to send, but I don't think Java sockets will let us do that; without switching the whole HTTP layer to nio; we may just have to send the whole request.\n",
        "I'm changing the code to silently recover from failed connections. This class should make it possible to recover if the failure occurs while we're streaming data to the server:\n  https://github.com/square/okhttp/pull/138\n",
        "https://github.com/square/okhttp/pull/153\n",
        "@clelland how would doing a non-blocking read help?\n",
        "I'm pretty sure that doing a non-blocking read() call on a socket which has been closed will return 0 (to indicate EOF). At that point, we would know to close our end and reopen the connection.\n\nThe problem is that reading a java.net.socket is always going to wait for data; it has no way to know that the other end is closed until you write to it (and it tells you with an exception)\n"
    ],
    "1698": [],
    "145": [
        "Thanks for the helpful bug report! I made it `synchronized` instead of volatile 'cause all of the code in OkHttp uses `synchronized` and I find it easier to reason about.\n",
        "I thought it would be good to reply to @swankjesse's question here:\n\n> Nice find on the OkHttp bug. I have no idea how you found it, but it's a real problem and I got a fix out. The threading code in OkHttp is pretty subtle, especially for SPDY where there's a lot of threads to coordinate. I'd love to do more static analysis on it to figure out where the other problems are.\n\nI'm glad to see that our bug report ended up improving okhttp. I found the problem using our static analysis tool, Keshmesh http://keshmesh.cs.illinois.edu/. We've just begun to run Keshmesh on okhttp. If we find other problems, we'll report them to you. Keshmesh is open-source and easy to install on Eclipse. We encourage you to try Keshmesh on your code. Of course, we'd love to receive feedback and possible contributions.\n",
        "Just for the sake of completeness, I should mention that [Keshmesh](http://keshmesh.cs.illinois.edu/) found this issue when we marked method `com.squareup.okhttp.internal.mockspdyserver.newStream(requestHeaders,out,in)` as an entry point.\n"
    ],
    "1189": [],
    "419": [],
    "3354": [],
    "4269": [],
    "4144": [],
    "1508": [],
    "2377": [],
    "1154": [],
    "4675": [],
    "318": [],
    "1487": [],
    "1717": [],
    "2809": [],
    "781": [],
    "3196": [],
    "584": [],
    "401": [],
    "706": [],
    "183": [
        "Is your device a Droid RAZR by chance?\n",
        "No, I'm working on a Nexus 7, but the issue was usng pure java methods.\nI have java 1.6\n",
        "@Nick986 which operating system?\n",
        "Windows 7 64bit. Exact java version is 1.6.0.34.\nIf you need more details, feel free to ask :D\n",
        "Windows is all I needed to know. Seems plausible that getMtu() will return -1 there. Fixed in git. A new maven release is being published right now.\n",
        "thanks for the fix. I'll download the updated version asap!\n"
    ],
    "184": [
        "Yup. This is the official workaround:\n\n```\n  URL.setURLStreamHandlerFactory(new OkHttpClient());\n```\n",
        "Is there any plan / way to fix this issue?\n",
        "@kkocel yup. Plan is to switch OkHttp to prefer a private default SSL context rather than the shared singleton context. Unfortunately that's an API incompatible change so it'll need to be on a major release. I'm planning a major 2.0 release within 3 months.\n",
        "If you come across this thread with a PhoneGap/Cordova application check here for the issue: https://issues.apache.org/jira/browse/CB-7925\n",
        "The workaround did resolve the issue I was having with bugsense causing the crash, as long as I did it prior to calling BugSenseHandler.initAndStartSession()\n",
        "In our case, running `URL.setURLStreamHandlerFactory` as early as possible (in `MyApplication.onCreate`) didn't seem to fix the problem.\n\nIt was easy enough to convert all our uses of OkHttpClient to create their own SSL context but converting Picasso was a little trickier, so now we have [PicassoUtils.with](https://gist.github.com/orip/6061163) instead of `Picasso.with`. Works with Picasso 1.1.1 (easy to make it work with Picasso HEAD).\n",
        "I take back what I said, I'm still having problems using BugSense and OkHttp together, though less frequently. In my Application class I overload onCreate:\n\n@Override\npublic void onCreate(){\n    super.onCreate();\n\n```\nURL.setURLStreamHandlerFactory(new OkHttpClient());\nBugSenseHandler.initAndStartSession(this, \"apikey\");\n```\n\n}\n\nSometimes when an unhandled exception is thrown, BugSense will catch it, then try to report it via SSL and fail with the SSL error. It doesn't always happen, which makes it hard to track down. Maybe the original SSL context is released?\n",
        "I am also having issues with Google Analytics when mixed with okhttp. I still get some crashes with `URL.setURLStreamHandlerFactory()` but not with [this hack](https://github.com/square/okhttp/issues/184#issuecomment-18772733)\n",
        "For 2.0 we should change the default to not use the global SSL context.\n",
        "Is there any suggested workaround for those using Picasso as well? Is [https://github.com/square/okhttp/issues/184#issuecomment-19521268](this) the recommended answer for now?\n",
        "I know this was closed a long time ago. But I'm having trouble with okhttp3 and the facebook sdk. I was wondering if this could still be causing an issue, or if there could be some other cause.",
        "Is there a fix scheduled for this? A lot of people are using this library, and since it doesn't play nicely with other libraries, it should be considered a major bug. \n",
        "@swankjesse WDYT about a default for this.  A naive approach would be to plug the following into `OkHttpClient.copyWithDefaults()`.  Another could be to handle it as a Platform hook.\n\n```\n    if (result.sslSocketFactory == null) {\n      try {\n        SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n        sslContext.init(null, null, null);\n        result.sslSocketFactory = sslContext.getSocketFactory();\n      } catch (GeneralSecurityException e) {\n        throw new AssertionError(); // The system has no TLS. Just give up.\n      }\n    }\n```\n",
        "Yes, but with two small changes:\nIf you create an OkHttpClient and don't configure anything, all HTTPS requests created with that client share an SSL Socket factory.\n\nIf you create an OkHttpClient and install your own SSLSocketFactory, then we don't waste time creating an unused SSLSocketFactory. (Ie. the SSLSocketFactory above must be created lazily.)\n",
        "(Not sharing an SSLSocketFactory is bad because requests that don't share an SSLSocketFactory can't share a connection in the connection pool.)\n",
        "But at now, it crashes.\n\nI tested in\nSamsung Galaxy Note 4.3 and LG Optimus G 4.1\n\nI use volley with okhttp stack and google analytics.\n\"GAThread\" crashes with okhttp\n\nWhen will 2.0 released??\n",
        "@ceram1 I was hoping soon, but we've made some API changes that make it tricky. I'll talk to @JakeWharton about doing an RC1 or something.\n",
        "and  reproduction code : https://gist.github.com/skyisle/5553239\n",
        "Which device is this? Please tell me its a Droid RAZR...\n",
        "Sorry. It's stock galaxy nexus 4.2.2. \n",
        "Alright, good to know. I'll try to reproduce this. In the interim you can disable SPDY with setTransports(\"http/1.1\").\n",
        "Crashes with SSL on Stock HTC One X (Android 4.1.1) too :(\n",
        "Same here...this seems to be happening on all my devices > 4.1\n",
        "Nexus 4. OS 4.2.2\n",
        "Workaround is to use only OkHttp connection. Possible problems that 3rd party libraries will still use Android UrlConnection that could cause this crushes.\n",
        "It has nothing to do with URLConnection - the underlaying libSSL is crashing in\nmethod \"SSL_select_next_proto\" ... there is possibly a null pointer, for me it seems libSSL get a empty object\nwhen trying to validate a certificate.\n\nThe workaround is to force http/1.1 and not to use http 2.0:\nArrayList<String> list = new ArrayList<String>();\nlist.add(\"http/1.1\");\nclient.setTransports(list);\n",
        "I started running into this on a Nexus 4 after adding Google Analytics to an app that already was using OkHttp (Note the thread name \"GAThread\": https://gist.github.com/codebutler/5681044). Unfortunately there doesn't seem to be a way to change the HTTPClient used by GA, so \"just use OkHttp everywhere\" isn't an available workaround.\n\nPlease let me know if I can help with debugging.\n",
        "Doesn't seem to help in my case. I am using OkHttp as transport for both my own API (using Volley) and for gapi-client. Still crashes when SSL endpoints are involved.\n",
        "Thanks for reporting. I'm able to reproduce this.\n",
        "Yeah, looks like this occurs consistently if you use OkHttp and HttpURLConnection in the same application.\n",
        "So the problem is that Java and Android programs default to using a single global SSL context, accessible to our HTTP clients as the SSLSocketFactory. When OkHttp enables NPN for its own SPDY-related stuff, it ends up turning on NPN for the singleton shared SSL socket factory. Later when HttpURLConnection attempts to do SSL, it freaks out and crashes because NPN is enabled when it isn't expected to be.\n\nA simple immediate workaround for OkHttp is to configure the client to create its own SSL context rather than using the system default. The code to set that up looks like this:\n\n```\n      OkHttpClient okHttpClient = new OkHttpClient();\n      SSLContext sslContext;\n      try {\n        sslContext = SSLContext.getInstance(\"TLS\");\n        sslContext.init(null, null, null);\n      } catch (GeneralSecurityException e) {\n        throw new AssertionError(); // The system has no TLS. Just give up.\n      }\n      okHttpClient.setSslSocketFactory(sslContext.getSocketFactory());\n```\n\nI'll investigate changing OkHttp to prefer its own SSL context over the system default. The significant drawback of this approach is that apps that customize the global SSL context will lose these customizations. This could break important features like certificate pinning! So I should be extremely careful if I'm changing behavior here.\n",
        "the workaround is working nice, now i can use spdy and my app is very fast with internet connections.\nThe problem was as described, i use the twitter4j jar library which is using a httpurlconnection :)\n",
        "The pull request to allow installing OkHttp as the backer for `URL#openConnection` will also mitigate.\n"
    ],
    "811": [],
    "462": [],
    "190": [
        "The connection pool\u2019s `keepAliveDuration` is configurable. No further action to take on this.\n",
        "Hey @niqo01: sorry for stalling on this issue for so long. Got any ideas on what the keep alive should be? I'm reluctant to give our users knobs that they won't be able to use effectively.\n",
        "@swankjesse, I don't know what it should be and not sure about the best way to determine this.\n",
        "We should probably start with data. Gather data on how many seconds connections where idle when they're picked up, and whether that led to success or failure. Presumably there will be a sweet spot where most of the attempts succeed, and that's where we'll draw the line.\n",
        "Right, I think I asked the Chrome team and they pointed out that they use 5 minutes. I do agree it should probably be lower on mobile.\n"
    ],
    "2403": [],
    "764": [],
    "4731": [],
    "3019": [],
    "277": [],
    "4629": [],
    "198": [
        "Thanks! That was quick!\n"
    ],
    "1100": [],
    "1025": [],
    "2124": [],
    "3328": [],
    "2252": [],
    "599": [],
    "1590": [],
    "2442": [],
    "4018": [],
    "1963": [],
    "838": [],
    "566": [],
    "3078": [],
    "503": [],
    "1687": [],
    "257": [
        "Erasing private data is a good reason to delete the cache.\n",
        "API: `clear`, `evictAll`, or something else?\n"
    ],
    "1821": [],
    "1650": [],
    "3326": [],
    "270": [
        "@tommyd3mdi our new interceptors API can be used to log exactly what went over the wire. See the newly-authored [Interceptors](https://github.com/square/okhttp/wiki/Interceptors) doc for a very specific example.\n\nI think that solves about 60% use case of this request. Making me feel justified in punting it to the icebox.\n",
        "It would be great if okhttp would in general get a simple logging facility to see what is actually sent and received over the wire.\n",
        "Also logging connection reuse should be helpful.\n",
        "@swankjesse We've tried using interceptors but they don't allow us to analyze a connection at the granularity we want to. We are looking for more low level details like DNS lookup time, SSL negotiation time etc. Exposing HttpEngine with hooks for collecting this info would be very valuable to us.\n",
        "With OkHttp 2.6 you'll be able to provide your own instrumented DNS for that, and you can already provide your own instrumented SSL Engine to time that. So what we really need is just a nice API to put it all together.\n",
        "Relevant: https://github.com/raskasa/metrics-okhttp\n",
        "Updated sketch:\n\n```\npackage okhttp3;\n\nimport java.net.InetAddress;\nimport java.util.List;\n\npublic class EventListener {\n  public static final EventListener NULL_EVENT_LISTENER = new EventListener() {\n  };\n\n  void dnsStart(String domainName) {\n  }\n\n  void dnsEnd(String domainName, List<InetAddress> inetAddressList) {\n  }\n\n  void requestHeadersStart(Call call) {\n  }\n\n  void requestHeadersEnd(Call call) {\n  }\n}\n```\n",
        "https://www.w3.org/TR/navigation-timing/#sec-navigation-timing-interface\n",
        "I like that it has a couple important boundaries. Because it is a class not\nan interface, we can always add more later as needed without breaking\npeople.\n",
        "FWIW I am using a Dns decorator and a SSLSocketFactory decorator to trace the DNS time and connect + handshake estimate.  So these are possible without dedicated APIs.  Separating TCP connect and SSL Handshake would probably require an API change, or this metrics API. \n",
        "this might also help get out of a problem I've run into with interceptors https://stackoverflow.com/questions/41040727/propagating-state-even-when-backlogged",
        "actually if dnsStart having a reference to the Call that caused it might be handy.. that or some guarantee that dnsStart is on the same thread as some other callback ex requestAccepted",
        "I think you\u2019re right \u2013 hooking up analytics will be the best way to make Zipkin work.",
        "I would really like to be able to get [URLSessionTaskTransactionMetrics](https://developer.apple.com/reference/foundation/urlsessiontasktransactionmetrics) or [Resource Timing](https://www.w3.org/TR/resource-timing-1/)-like numbers out of OkHTTP.  I am currently investigating if I could start writing an implementation of this feature to accomplish as much.  Before I roll up my sleeves I had a couple questions\r\n* Is the 7/22 sketch still the direction you want to go?\r\n* Is this still the recommended way to get this functionality?\r\n* For clarification (not to be that guy) was the sketch intended to refer to `responseHeadersStart` and `responseHeadersEnd`?\r\n* In addition to what you listed, are you open to having EventListener methods for\r\n  + Request Start\r\n  + HTTP Redirect\r\n  + Connect Start\r\n  + Connect End\r\n  + Secure Connect Start\r\n  + Response End\r\n",
        "This issue is sitting because the design of it is challenging. We\u2019ll need to be careful about the consequences of a bunch of things: this problem has lots of moving parts!\r\n\r\n * What if multiple requests share a DNS request?\r\n * How do HTTP proxies fit?\r\n * HTTP/2 interleaves things. Does that matter?\r\n * Which threads do these events get called on? Can it be multiple?\r\n * Do callback methods get parameters (request, hostname, IP addresses) ?\r\n\r\nI don\u2019t think we benefit by using the W3C event names. For example they model redirects as having a start and an end; I don\u2019t think that fits our model. Their model doesn\u2019t talk about the completion of the TLS handshake, we probably should.\r\n\r\nWhich events do you want?\r\n\r\n",
        "cc @killjason who recently tried to model http/2 via tracing and @bogdandrutu (grpc tracing)\r\n\r\nHere's a brain dump of thoughts so far.\r\n\r\non tracing, there's three major parts of note:\r\n* collecting data (getting it in the first place like via callbacks)\r\n* structuring data (allocating it to a span or multiple spans, or maybe a tag)\r\n* propagating the trace (making sure tracing itself works when leaving the process)\r\n\r\nWhat data we collect is one point, but how we collect it impacts how easy it is to structure. Propagation is mostly separate, suffice to say we need to structure the data into a trace, so we need to know what trace we are in, and where in that trace we are.\r\n\r\nIn structuring data callbacks need at least one parameter of the associated Request object (and a heuristic or otherwise to know if the request was application or network scoped)\r\n\r\nI've attempted a structuring policy which makes a local span for the application request, and a remote child for each network attempt. This ends up some sort of mapping on request object, but also it needs the connection context at times.\r\n\r\nThe more interesting notes are the things more granular or more coarse. \r\n\r\n### What if multiple requests share a DNS request?\r\n\r\nFor example, how to deal with shared connections, or shared requests. In zipkin at least, I have seen folks allocate the same event to multiple requests. That's because dapper-like systems don't usually have multiple parents, or means to hard-link multiple trees together.\r\n\r\nex. I have a two in-flight http requests, so they each have an independent trace context. They are both blocked on the same DNS request, so they each have a child span representing that work, even though the first one caused it. By adding the request that caused the DNS operation as a callback parameter, you could still correlate it (maybe in zipkin that ends up as a tag!)\r\n\r\n### How do HTTP proxies fit?\r\n\r\nAt least in Zipkin, a proxy would at least materialize as a difference between the application's URL and the [remote endpoint](https://github.com/openzipkin/brave/tree/master/brave#rpc-tracing) actually used. It may also imply modeling a child span for an authentication or otherwise attempt. (maybe also things I'm not thinking about)\r\n\r\n### HTTP/2 interleaves things. Does that matter?\r\n\r\nIt would matter if you are modeling the http/2 layer. Very fancy instrumentation at the semantic abstraction could peek at who's HOL blocking you, but I think that could possibly be punted. At the http/2 layer, you could use a stream id as a correlation mechanic for interop. For example, if there's a separate analytics api for http/2 framing, using a stream id could be the bridge between this and http/1.\r\n\r\n### Which threads do these events get called on? Can it be multiple?\r\n\r\nIn-process propagation via traditional thread locals don't seem to work that well, at least due to how scheduling is implemented. I'd design in a way that manual or okhttp-custom propagation is used instead. For example, linking based on request or stream id parameters (or possibly using a \"locker\" design I thought I saw earlier).\r\n\r\n### Do callback methods get parameters (request, hostname, IP addresses) ?\r\n\r\nAt least request. The others depend on how granular callbacks are. For example, you could have a separate \"on-connection\" callback which gives the remote IP address. This might make it easier to associate a precise (microsecond) timestamp to different parts of the lifecycle.\r\n\r\n",
        "My responses (not nearly as insightful as @adriancole's)\r\n- Multiple DNS Requests: My use case would be satisfied by having any one or all of the requests that generated a DNS lookup result as a callback.  Ideally each request does get associated so a callback can be called on each.  Same would apply to connect/secure connect start/end points\r\n- How do HTTP proxies fit:   For my use case I don't care if there is a tunnel, I was thinking of callbacks around `connectSocket` and `establishProtocol`.  It probably makes sense to do the same around `createTunnel`.\r\n- HTTP/2: My use case does not seek to model the HTTP/2 Layer and would like to punt on that because it adds a lot of complication.\r\n- Which threads do these events get called on:  I admit I am out of my depth.\r\n- Do callback methods get parameters: I don't need them, but if there is handy stuff nearby it makes sense to return them.\r\n\r\nAlso I did not intend to advocate for W3C naming, whatever names you guys want I will go with.   Events I am interested in:\r\n- requestInitiated\r\n- dnsStart\r\n- dnsEnd\r\n- connectStart\r\n- secureConnectStart\r\n- secureConnectEnd\r\n- connectEnd\r\n- requestStart\r\n- requestEnd\r\n- responseStart\r\n- responseEnd\r\n\r\nI imagine the last four methods being called multiple times for a given request if the request resulted in redirects.  Here is my take on a more complete list that addresses broader interests:\r\n- requestInitiated\r\n- dnsStart\r\n- dnsEnd\r\n- connectStart\r\n- tunnelStart\r\n- tunnelEnd\r\n- secureConnectStart\r\n- secureConnectEnd\r\n- connectEnd\r\n- requestHeaderStart\r\n- requestHeaderEnd\r\n- requestBodyStart\r\n- requestBodyEnd\r\n- responseHeaderStart\r\n- responseHeaderEnd\r\n- responseBodyStart\r\n- responseBodyEnd\r\n",
        "I'd like to see overall overhead (bytes/ms) per request/response since w/SPDY, HTTP2 compression could dramatically impact things.\n",
        "I think we\u2019re converging. I think each method should probably take a `Call` which zipkin can map to a span. A few more ideas:\r\n\r\n * Event requestEnqueued \u2013 when you use `client.enqueue()`\r\n * Maybe the _end_ methods should take a `Throwable` which is non-null if the operation failed?\r\n * Should we have events for the cache lookup? It should be fast so it might not be interesting\r\n\r\nWanna send a PR with a class?",
        "Here's the list from [Chrome's DevTools protocol][1]:\r\n\r\n * requestTime\r\n * proxyStart\r\n * proxyEnd\r\n * dnsStart\r\n * dnsEnd\r\n * connectStart\r\n * connectEnd\r\n * sslStart\r\n * sslEnd\r\n * sendStart\r\n * sendEnd\r\n * pushStart\r\n * pushEnd\r\n * receiveHeadersEnd\r\n\r\n [1]: https://chromedevtools.github.io/debugger-protocol-viewer/1-2/Network/#type-ResourceTiming",
        "Ideally, we would want to have a span for the whole network call and a span for each portion (dns, connection, etc). With the current format, we'd have to create a span in abcStart and somehow pass it into abcEnd. What do you think about a interceptor style API for each portion? Is that a bit overkill?",
        ">\n> Ideally, we would want to have a span for the whole network call and a\n> span for each portion (dns, connection, etc). With the current format, we'd\n> have to create a span in abcStart and somehow pass it into abcEnd. What do\n> you think about a interceptor style API for each portion? Is that a bit\n> overkill?\n>\nif there were a big interceptor (ex callbacks for every start/end), you\ncould still choose to model as a single span or children for each step. It\nwould just need to be done consistently and as a function of the call\nassociated with it.\n\nex flat span, but annotations for events\n\nvoid connectStart(Call call, Connection connection) {\n  getOrCreateSpan(call).annotate(\"connect start\");\n}\n\nvoid connectEnd(Call call, Connection connection) {\n  maybeSpan(call).annotate(\"connect end\");\n}\n\n// returns a noop span when there's no span already associated with the call\nSpan maybeSpan(Call call);\n\nex nested span\n\nvoid connectStart(Call call, Connection connection) {\n  getOrCreateSpan(call, connection).name(\"connect\").start();\n}\n\nvoid connectEnd(Call call, Connection connection) {\n  maybeSpan(call, connection).finish();\n}\n\n// creates a lookup key based on the inputs which represents a fixed-depth\nspan\n// ex [call, null] is the top-level span representing the request\n// ex [call, connection] is a child span representing a connection attempt\nSpan getOrCreateSpan(Call call, @Nullable Object childKey)\n\n\nIn either of these ways, you can use a weak hash map or something similar\nto do the lookup dance. Doing so would eliminate any concern of which\nthread is doing what.\n\nEx internally in Brave (a tracing library) we do things like this\nhttps://github.com/openzipkin/brave/blob/849534934982b6056bd461a76770203392285c8c/brave/src/main/java/brave/internal/recorder/MutableSpanMap.java\n",
        "> In either of these ways, you can use a weak hash map or something similar to\n> do the lookup dance. Doing so would eliminate any concern of which thread is\n> doing what.\nps if callbacks are guaranteed, or there's some onFailure in worst\ncase, you could use a strong map without concern of memory leaks..\n",
        "@adriancole would it be handy to build a listener for each call?\r\n\r\n```\r\npublic class EventListener {\r\n  public void fetchStart() {\r\n  }\r\n\r\n  public void dnsStart() {\r\n  }\r\n\r\n  ...\r\n\r\n  public interface Factory {\r\n    EventListener create(Call call);\r\n  }\r\n}\r\n```\r\n\r\nMaybe with a `complete()` method when the call is completely done.",
        ">\n> @adriancole <https://github.com/adriancole> would it be handy to build a\n> listener for each call?\n>\nyep I think so.. this would make span management much less complex. cc\n@brianm\n",
        "I was thinking that with the interceptor style API (instead of callback), we can avoid the map lookup. The interceptor will also be able to consolidate the API to swap out DNS, SSL. That's a much bigger discussion though.\r\n",
        "It would be very handy to attach a listener to each call. Right now we build a client per call in order to attach a per-call interceptor to capture/propagate what we can. Getting more fine-grained would be fabulous.\r\n\r\nIf the listener per call doesn't work, then at least passing the Call in so that we can use it as a key for out of band state tracking could be made to work. Per call listener would be easier/cleaner.",
        "@haiminh87 I don\u2019t think an interceptor-style API is a good fit for this. Even if it\u2019s easier for the interceptor\u2019s implementors it can make the calling code weird. (What if the interceptor doesn\u2019t call proceed()?, etc.)",
        "@mjbenedict are you cool to add a `Factory` interface to `EventListener`? It\u2019ll allow listeners to do per-call stuff in a pretty natural way.",
        "@swankjesse Same argument would apply to current call level interceptor. Anyway, I think it's outside of this thread.",
        "I am cool with whatever :).  To be honest I don't totally understand the architecture and pattern being proposed though which is why I was struggling with @adriancole's request to add javadocs.  I will update the PR and respond to those comments.",
        "like @adriancole said, I am currently developing a http2-zipkin-lib on a custom http2 reverse proxy which based on Netty-4,the proxy contains two parts:http2-server-handler and http2-client-handler, the server-handler is used to accept http2 request from grpc-clients and send response to grpc-clients, the client-handler is used to forwarding the request to backend services and receive response from backend services,the http2-zipkin-lib treat every header frame(streamId>=3) as a rpc-call.\r\nThe proxy is based on Netty, so the proxy forwarding the call to backend services in a async way, so the threadlocal-span can not be used directly in the proxy, so I put the spans in a map, which use streamId as a key and set spans(SR and CS) as value, when the proxy received responded header-frame, it then get the span(SR and CS) from the map and generate CR & SS span.",
        "Walk through above comments and it seems that we all agree that adding analytics/metrics api are necessary. \r\n\r\nShare some changes in our fork repo which tested by millions users. The main reason we forked okhttp is to provide metrics of:\r\n- dns lookup duration, be exposed in Route.java\r\n- tls handshake duration, be exposed in HandShake.java\r\n- connection setup duration (includes tls handshake), be exposed in Connection.java\r\n- and if the connection is back by pool, or new created. So, if a connection is got from pool, no need to look at above 3 metrics.\r\n\r\nThese changes only introduces a few new methods in existing classes instead of any new interface/class; It is not with callback pattern which prevents core function from breaking by misbehaved callback implementation; It's kind of a low weight metrics api. \r\n\r\nGlad to hear feedback on this. I do hope we can finalize the apis and relief the pain of forking/rebase...\r\n\r\nFor debug information of cache timeout computation, it could be a separate discussion.\r\n",
        "Strawman:\n\n```\ninterface Observer {\n  void before(Event event);\n  void after(Event event);\n\n  public class Event {\n    public Type type;\n    public Connection connection;\n    public Request request;\n    public Response response;\n    public int bytesTransmitted;\n  }\n\n  public enum Type {\n    CONNECT,\n    DISCONNECT,\n    REQUEST_HEADERS,\n    REQUEST_BODY,\n    RESPONSE_HEADERS,\n    RESPONSE_BODY,\n  }\n}\n```\n\nWe'd call the observer before and after we attempt to do I/O. Fields in `Event` would be populated as much as convenient: `bytesTransmitted` wouldn't be populated in `BEFORE` events, for example.\n\nThe application layer could plug into this to do logging or higher-level things.\n",
        "`Connection` is mutable so should we expose it?\n",
        "Connection is the easiest way to get access to the `Route`, the `Handshake` and eventually the `Protocol`. We have an awkward time with the seam between public and internal APIs in OkHttp.\n",
        "EventListener was be hidden now\uff0cwhich version of okhttp will release the analytics API\uff1f",
        "We don't plan features for release that way. When it's done it will be\nreleased.\n\nOn Sun, May 14, 2017, 11:33 PM Jeffrey Zhao <notifications@github.com>\nwrote:\n\n> EventListener was be hidden now\uff0cwhich version of okhttp will release the\n> analytics API\uff1f\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/square/okhttp/issues/270#issuecomment-301388018>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEVhqMql788pGAiGCm02PLWoFAOExks5r5_HCgaJpZM4A4rcE>\n> .\n>\n",
        "Any strong feelings on handling a cached response? Looks like it would be `FetchStart, FetchEnd` currently.",
        "fetchStart has the call, which contains the request.  But the response isn't present in the fetchEnd.  That would let you check the networkResponse and cacheResponse and understand whether you got a fresh network response, an immediately cached response or a cached response after a 304 ",
        "I\u2019d like listeners to know about cache decisions:\r\n\r\n - cache miss\r\n - conditional miss\r\n - conditional hit\r\n - hit\r\n\r\nProbably these are events, though possibly without a start/end boundary.",
        "It seems like payload size and headers size would break the API. We could add cache events later since EventListener is not an interface.\r\n\r\nWhat is the current release story?\r\n\r\n- Don't release a new version until these are both sorted out?\r\n- Document this feature as experimental, likely to change?\r\n- Add ASAP and assume we have a concrete API to support forever?\r\n- Adopt a different method signature? e.g. parameter objects.\r\n- Other?",
        "Let's add payload size + headers size immediately.",
        "@swankjesse @dave-r12 https://github.com/square/okhttp/pull/3532\r\n\r\nAPI in place, but without adding additional Sink/Sources it isn't trivial to do the correct accounting. I can add those additional accounting Sink/Sources if there are no objections.  \r\n\r\ne.g. UTF-16 to UTF-8 encoding is internal to Sink\r\n\r\n```\r\n    for (int i = 0, size = headers.size(); i < size; i++) {\r\n      sink.writeUtf8(headers.name(i))\r\n          .writeUtf8(\": \")\r\n          .writeUtf8(headers.value(i))\r\n          .writeUtf8(\"\\r\\n\");\r\n    }\r\n```",
        "Getting the count of bytes read/written is interesting.. but it's a bit frustrating we can't get actual counts. I was exploring this a bit and found that:\r\n\r\n* On OpenJDK, you can wrap the underlying `Socket` and decorate the input/output streams. This also works for TLS because they write to the `Socket` streams. So we can get actual counts here AFAICT.\r\n* On Android, the `SSLSocket` implementation provides no way to get actual counts because it performs a JNI call when writing/reading. I can't see a hook here at all. \r\n* `SSLEngine` provides a means to manually read/write TLS data. Since we control it we could potentially get actual counts. Unfortunately the API is difficult and likely broken on earlier versions of Android. (The class itself appears to have a bad reputation??)",
        "I think it's too difficult to do byte-by-byte accounting of the framed messages. Stuff like HPACK and TLS use data that's amortized over multiple messages.\r\n\r\nInstead let's count bytes provided by the application layer: headers size can just be the sum of the lengths of all of the strings. Body bytes can be computed in our codec class. It should match content-length if one is provided.\r\n\r\nThe goal of offering bytes here is to give app developers visibility into how they're using the network. You can imagine an app tracking these sizes in their metrics.",
        "> byte-by-byte accounting of the framed messages.\r\n\r\nGood point!",
        "The goal of offering bytes here is to give app developers visibility into\nhow they're using the network. You can imagine an app tracking these sizes\nin their metrics\n\nThanks for focusing the use case. Especially headers can be easy to forget\nabout, but high impact. The driver of change is the developer, so tracking\nwhat they can measure and affect makes a lot of sense.\n",
        "@dave-r12 I was also thinking about how we could implement something better than the frameLog approach for Http2 logging.  Unfortunately Http2 frames are not tied to a particular call.\r\n\r\n https://github.com/square/okhttp/search?utf8=%E2%9C%93&q=frameLog&type=\r\n\r\nAny thoughts?",
        "I think the frame log is great for protocol-layer debugging. This is intended for application-layer metrics.",
        "Or more succinctly, I can\u2019t see a reason for the application layer to need frame-layer information!",
        "I don't have a compelling case, because you are right it it just enough to see what is going on.  Once they are just logging, it's hard to do much with them.  But if you care enough you can always build from source with debugging or additional temporary hooks.",
        "I've updated https://github.com/square/okhttp/pull/3532 with everything except a (nice) solution for streaming requests.  Not sure what the right solution is there currently.  IMHO it could land as is, after reviews of current functionality, and a second PR to fix that case.",
        "I'm going to wrap the Source in the case of unknown content length and use the content length directly if known.",
        "Sorry for jumping in this late in the conversation. @yschimke the EventListener api looks great and covers most of our requirements and I am pretty excited to see this happening. Following are two extra requests that I would like to add if possible:\r\n\r\n1.  A way to know if the connection that was used in this call is received from existing pooled connections or is this a newly created connection. (We use this to identify the % of requests that got hit with the connection creation delay and to see if a given session sees more connection creations than what it is expected to see).\r\n2. An explicit signal that distinguishes between the N and N+1 'attempt' (for a lack of better word) to complete the call. Assume that a network call first gets a redirect 307 followed by a 200 (these are two 'attempts'). In this case we measure the overarching total latency and the latency for each 'attempt'. We also log the 'attempt' count. This has helped us tremendously to figure out and debug redirect pingpong cases.\r\n\r\nProposal:\r\n1) public void connectionAcquired(Call call, Connection connection, **bool isPooled**)\r\n2) add two more methods to signify start and end of an attempt\r\n       public void startAttempt(Call call)\r\n       public void endAttempt(Call call)\r\n3) add attempt count to call end.\r\n       public void callEnd(Call call, **int attemptCount**, @Nullable Throwable throwable) ",
        "@jatinlodhia n.b. at startup it is likely you will get hit with the creation delay, create a connection but then have get given the connection from a simultaneous request (isPooled = true)\r\n\r\nIt seems safe to assume that there is only one call attempt at a time, even though connection attempts may be concurrent (paths or IPv4/IPv6).  \r\n\r\nMy main concern here is the fact we are changing what will be a public API each time we discover a new edge case.  I would still advocate for a parameter object, maybe offset by listener.isActive(Call) which defaults to false for EventListener.NONE",
        "Actually probably easier than listener.isActive(Call) is to check listener != EventListener.NONE, since the factory already allows for this per call.",
        "You've convinced me that the method-per-event API is not very future-proof. Thoughts on a single Event type that is partially populated depending on context?",
        "That could work and be somewhat forward compatible. If new events were added you could still be notified about them e.g. just to log them for certain filtered calls.  That's a nice secondary benefit.\r\n\r\nNot as nice to use because every listener becomes a switch statement.  But any extending library could offset that by implementing a base class like the current API if desired.",
        "Hang on, I have yet another thought...\r\n\r\nWhat if we keep it as-is, with a single method per event. If ever we want to add additional data to an event, we create two methods and the one with more args calls through to the one with fewer.\r\n\r\nFor example, suppose we add a priority to `connectStart()`:\r\n\r\n```\r\n  public void connectStart(Call call, InetSocketAddress inetSocketAddress, Proxy proxy,\r\n      Priority priority) {\r\n    connectStart(call, inetSocketAddress, proxy, priority);\r\n  }\r\n\r\n  /** @deprecated prefer the overload that accepts a priority. */\r\n  public void connectStart(Call call, InetSocketAddress inetSocketAddress, Proxy proxy) {\r\n  }\r\n```\r\n\r\nIt\u2019s a little bit ugly, but it\u2019s simple and such changes should be rare. I think this is my current favorite approach.",
        "Yep. It will work. I'm not against what we have now. If we land the current PR I think it's working and complete. Just raising some concerns.  Everyone so far is asking for more parameter or events :)",
        "Yep. I\u2019d like to go through the events and try to make sure we\u2019re providing enough information without going overboard. It\u2019s going to be easy to add too much here, and risk scaring our users away!",
        "What about marking it as experimental public API for 1 release?",
        "Fwiw if you are doing zipkin tracing in an event listener, you can add an\nannotation for each frame to the current span. Indirect coordination though\ncan be quite chatty. Another way is to use slf4j or log4j and correlate the\ntrace/span id in the log statements of the frame logger. Even less\ncoordination and no code!\n",
        "Only other option I can think of is a parameters bag which can be added\nlate to the essential event hooks. This cant permit new parts of lifecycle\nbut could permit more metadata in existing hooks. This would be another\nallocation as the bag itself would need to be instantiated.\n\nOn 27 Aug 2017 02:31, \"Jesse Wilson\" <notifications@github.com> wrote:\n\nHang on, I have yet another thought...\n\nWhat if we keep it as-is, with a single method per event. If ever we want\nto add additional data to an event, we create two methods and the one with\nmore args calls through to the one with fewer.\n\nFor example, suppose we add a priority to connectStart():\n\n  public void connectStart(Call call, InetSocketAddress\ninetSocketAddress, Proxy proxy,\n      Priority priority) {\n    connectStart(call, inetSocketAddress, priority);\n  }\n\n  /** @deprecated prefer the overload that accepts a priority. */\n  public void connectStart(Call call, InetSocketAddress\ninetSocketAddress, Proxy proxy) {\n  }\n\nIt\u2019s a little bit ugly, but it\u2019s simple and such changes should be rare. I\nthink this is my current favorite approach.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\n<https://github.com/square/okhttp/issues/270#issuecomment-325154193>, or mute\nthe thread\n<https://github.com/notifications/unsubscribe-auth/AAD613ZELkooNQE4WOxFSpAgOFKdRKSoks5scGRsgaJpZM4A4rcE>\n.\n",
        "Did I get it right?\r\n\r\nOne thing I learned sketching this out is that we probably don\u2019t want a bunch of _end_ methods, each of which takes a `Throwable`. Instead, I think we want a single `callFailed()` method that takes an `IOException`. That way you either get a `callEnd()` or a `callFailed()`, and both are terminal. Otherwise a few things are awkward \u2013 do you get both `connectEnd()` and `secureConnectEnd()` when the secure connection fails? Seems awkward.",
        "<img width=\"460\" alt=\"states 2x\" src=\"https://user-images.githubusercontent.com/133019/29746818-67e18c8e-8ab4-11e7-80ec-cdbfcddfccf3.png\">\r\n",
        "@swankjesse Yep, regarding closing an opening call, I ended up with pretty much that code in a PR testing this https://github.com/yschimke/oksocial/pull/255\r\n\r\n![image](https://user-images.githubusercontent.com/231923/29747452-8fa09b4a-8af3-11e7-8001-bd1e5a43be8c.png)\r\n\r\n```\r\n  private Span finish(Span span) {\r\n    if (span != null) {\r\n      span.finish();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  @Override\r\n  public void responseHeadersEnd(Call call, long headerLength, @Nullable Throwable throwable) {\r\n    if (callSpan.isNoop() || !detailed) {\r\n      return;\r\n    }\r\n\r\n    if (throwable != null) {\r\n      responseSpan.tag(\"error\", throwable.toString());\r\n      responseSpan = finish(responseSpan);\r\n    } else {\r\n      responseSpan.tag(\"responseHeaderLength\", \"\" + headerLength);\r\n    }\r\n  }\r\n```\r\n",
        "@swankjesse I think currently callEnd is before the response body has been consumed by the client.\r\n\r\n```\r\n    List<String> expectedEvents = asList(\"CallStart\", \"DnsStart\", \"DnsEnd\", \"ConnectionAcquired\",\r\n        \"ConnectStart\", \"SecureConnectStart\", \"SecureConnectEnd\", \"ConnectEnd\",\r\n        \"RequestHeadersStart\", \"RequestHeadersEnd\", \"ResponseHeadersStart\", \"ResponseHeadersEnd\",\r\n        \"ResponseBodyStart\", \"CallEnd\", \"ResponseBodyEnd\", \"ConnectionReleased\");\r\n```",
        "@swankjesse also big +1 to handling failures once in outer most scopes, e.g. deferring to callEnd.  But may be tricky currently if exception happens while processing a long streaming body.",
        "I suppose it implies an unwinding of a stack on the failure callback. Ex\nyou track and know to go back and close each span (if tracing). You would\nhave to infer which operation must have failed via knowledge of the state\nmachine or time. Is that right?\n\nOn 27 Aug 2017 2:03 pm, \"Yuri Schimke\" <notifications@github.com> wrote:\n\n> @swankjesse <https://github.com/swankjesse> also big +1 to handling\n> failures once in outer most scopes, e.g. deferring to callEnd. But may be\n> tricky currently if exception happens while processing a long streaming\n> body.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/square/okhttp/issues/270#issuecomment-325179090>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAD61-Y4CXsLHRmIc5WbQcOC7BY6z7__ks5scQajgaJpZM4A4rcE>\n> .\n>\n",
        "Yes, but we don't completely avoid it at the moment either.  Because if you want to create a synthetic response span, you need to know it ends with a failure in ResponseHeadersEnd or via any ResponseBodyEnd",
        "@swankjesse one annoyance - it's unpredictable when to capture the handshake.\r\n\r\n- First connection - secureConnectEnd or connectionEnd\r\n- Second connection - connectionAcquired or connectionEnd\r\n\r\nWorkable, just feels clumsy.  Just a nit.",
        "We\u2019re getting close. Here\u2019s everything left I think we might want to cover:\r\n * [x] rename fetchStart/fetchEnd to callStart/callEnd?\r\n * [x] include payload size in requestBodyEnd, responseBodyEnd\r\n * [x] include headers size in requestHeadersEnd, responseHeadersEnd ?\r\n * [x] document nesting rules. Connection acquire/release doesn\u2019t nest with other events!\r\n * [x] document obligations of the EventListener implementations. Should be fast. Can\u2019t throw! Can\u2019t be re-entrant.",
        "@yschimke how about in connectionAcquired() ? That should work with [this](https://github.com/square/okhttp/pull/3566).",
        "I\u2019m wondering about words.\r\n\r\n * connectStart/connectEnd\r\n * connectStart/connectFinish\r\n * connectBegin/connectEnd\r\n * connectStart/connectSuccess\r\n\r\n@adriancole any standard terms in the tracing world? We\u2019ve got events for begin, end, and failed. Only connect and call have failed events, and connect\u2019s fail event is not necessarily fatal.",
        "start and finish are common, though finish doesn't imply success. Finagle uses before, after, afterFailure https://github.com/twitter/finagle/blob/develop/finagle-core/src/main/scala/com/twitter/finagle/tracing/TraceInitializerFilter.scala#L70\r\n\r\nIf a failure event isn't fatal, noting how to know if it is or isn't is important. Ex in zipkin we can add an annotation for okhttp.connect-failed (which colors yellow). If a connect failure ends up failing the call (as a separate callback), we'd end the span with an \"error\" tag of the failure code.",
        "\ud83d\udc4b  I'm the maintainer for Wingtips (another dapper-like tracing system) and wanted to add some OkHttp support, hit some roadblocks with the async side as described by others in this conversation, and found this issue discussion. I think I've absorbed most of it but apologies if my question is already covered.\r\n\r\nThe `EventListener`-per-request model lets me surround a given request with a child span in a straightforward way which is good, but I'm not sure how I'm supposed to accomplish the other critical part of tracing: propagating the child span's tracing info on the outbound request's headers. I could do this via an `Interceptor` but I'd need to be able to communicate the child span to the interceptor from the `EventListener` somehow. The only thing I have a handle on in the `EventListener` is the `Call`, and I don't see any way to attach the child span to the `Call` such that I can grab it in the interceptor.\r\n\r\nWhat's the recommended way to do this in OkHttp? For example in Servlet I'd set a request attribute, and for Wingtips' Apache HTTP Client integration I used `HttpContext` which follows the request around. I don't see similar mechanisms in OkHttp but it's possible I missed it?\r\n\r\nI suppose I could try and do the global lookup map dance that @adriancole mentioned, but it feels like an awfully heavy-handed workaround and means a lot more difficult-to-maintain code on my end (and potentially dangerous code if I don't do it *exactly* right, e.g. crashing other people's servers due to OOM caused by some odd edgecase). I'd much prefer a first-class-supported solution.\r\n\r\nAnd FWIW it feels a little odd having to use both an `EventListener` and an `Interceptor` in combo to accomplish this task. It *feels* like I should be able to just use an interceptor. If `Interceptor` had an `onAsyncEnqueue(...)` method that was guaranteed to execute on the same thread as `Call.enqueue(...)` then I'd be set. Maybe that's a horrible idea, I'm not sure, I'm mainly trying to convey how it feels from my viewpoint - I'm definitely not trying to dictate solutions.\r\n\r\nThoughts?",
        "Hey, Nic. Nice to see you around.\n\nSo in brave we've not incorporated this in, yet, but Yuri spiked an\napproach here:\n\nhttps://github.com/yschimke/oksocial/blob/master/src/main/kotlin/com/baulsupp/oksocial/tracing/ZipkinTracingListener.kt\n\nWhat you'll notice is stashing \"scopes\" which are intended for use in\ntry/finally, but are stashed knowing secrets about the threading model.\nThis is how in-process propagation (aka visibility from slf4j etc) works,\nstill in the EventListener.\n\nmind isn't quiet working enough to dig more, but hopefully this bone will\nhelp.\n",
        "Interesting! I\u2019ve got some questions!\r\n\r\nWhere does the child span come from? Is it manually added to the request by the caller? Or is it from a thread local on the enqueueing thread? Do tools like Wingtips have magic for ExecutorServices to track the span when work jumps from one thread to another? I\u2019m thinking about OkHttp\u2019s Dispatcher thread that\u2019s used in async requests.\r\n\r\nDoes Wingtips care about individual network events like DNS, TCP handshake, and TLS handshake? If not it\u2019s quite possible that an interceptor will be sufficient.\r\n",
        "@adriancole sorry I'm sure I'm being dense or missing something obvious, but I'm not seeing how that class you linked to causes the `X-B3-*` headers to show up in the request? \r\n\r\n(Or I'm just not familiar enough with the usual Zipkin flow to understand how this solves the problem for telling an interceptor what the logical \"current span\" is for the request so that the interceptor can do the `X-B3-*` header propagation.)",
        "@swankjesse \r\n\r\nGenerally: Wingtips keeps track of the span stack on a thread-local so that we can keep SLF4J MDC up-to-date to allow auto-tagging every log message with trace ID. So for better or worse, we have to use thread-locals as the primary tracker for spans associated with a task. We have some helper methods to make hopping threads easier (i.e. updating the appropriate thread-locals when a task is async across multiple threads).\r\n\r\nGetting specifically to your questions with that in mind:\r\n* The child span comes from asking our `Tracer` class to create a child span based on whatever the \"current span\" is on the thread-local. In this case, I want this to happen automatically as part of an `OkHttpClient` request without the caller having to do anything. For a blocking call this is easy - I can create an `Interceptor` that asks `Tracer` to create a child span of whatever the current span is, and then add the child span's tracing info to the outbound request's headers, and it will work since everything is on the same thread. For async OkHttp calls this falls apart because the `Interceptor` executes on a different thread than when the request was enqueued. The per-request `EventListener`'s `callStart(Call)` method seems to execute on the same thread and that's all I need to be able to create a child span and close it in `callEnd(Call)`, but I don't see how to communicate that child span's info to somewhere in the OkHttp request process that allows me to adjust the headers for the outbound call.\r\n* Wingtips does not (currently) have an `ExecutorService` for causing tracing to automatically hop threads. Instead we use some wrappers around `Runnable`, `Callable`, and other lambdas that attach the correct tracing info to the running thread when the lambda runs and restores the original thread's tracing info when the lambda finishes. Requires some effort by end-users but avoids the need for `ExecutorService` magic. But even if we had such an `ExecutorService` it wouldn't solve my use case here from what I understand, because if the OkHttp thread pool is backed up then the async request is enqueued later by some other thread. IOW the `else` block [here in OkHttp's dispatcher](https://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/Dispatcher.java#L131) where it does `readyAsyncCalls.add(call)` rather than the line above that does `executorService().execute(call)`.\r\n* I'm not currently too worried about getting fine-grained network events like DNS, handshakes, etc. I'm more concerned with just the basic case of wrapping an entire call in a child span and using that child span's info to adjust some headers on the outbound request. Like I mentioned above this is easy for blocking requests, but I need a solution for async requests as well.\r\n\r\nSorry for the wall of text, and thank you for any help you're able to provide!",
        "@adriancole <https://github.com/adriancole> sorry I'm sure I'm being dense\nor missing something obvious, but I'm not seeing how that class you linked\nto causes the X-B3-* headers to show up in the request\n\n\nSorry the class I pasted was mainly focused on propagating in-mem and\nnotably knowing the difference between steps in the process of executing a\nrequest. Placing headers on the request is a bit simpler here\nhttps://github.com/yschimke/oksocial/blob/master/src/main/kotlin/com/baulsupp/oksocial/tracing/ZipkinTracingInterceptor.kt\n\nThe upstream brave code does everything in one interceptor.. however it\ndoes not capture moments like dns (we may at some point). It also uses a\nutility type which normalizes http client tracing so you dont see all code\nby looking at this. The thing that adds headers is called injector\n\nhttps://github.com/openzipkin/brave/blob/master/instrumentation/okhttp3/src/main/java/brave/okhttp3/TracingInterceptor.java\n\nOne note in okhttp is that if you manage span state with an interceptor you\nhave to be careful because on backlog requests get queued (which means the\ninterceptor can run when there is no span in scope). There is a wrapping\ncall factory due to this.\n\nhttps://github.com/openzipkin/brave/blob/master/instrumentation/okhttp3/src/main/java/brave/okhttp3/TracingCallFactory.java\n\nI havent looked deeply to know if the event listener obviates the need to\nwrap a call factory or not.\n",
        "@adriancole thanks for all that extra info - I have a much clearer idea now of how you're accomplishing it.\r\n\r\nThe `TracingCallFactory` type solution is one I want to avoid if possible - I don't want users to have to subvert the normal `OkHttpClient.Builder` pattern. At that point users are essentially using my API that sort-of-kind-of wraps OkHttp's API instead of the OkHttp API directly, and if they don't do everything exactly right then tracing is broken.\r\n\r\nAgain, it feels like something where there should be a first-class solution - something that could be done with a single `Interceptor`, or maybe one other additional hook somewhere. Maybe if `Dispatcher` had a hook that allowed me to wrap the `AsyncCall` in `Dispatcher.enqueue(AsyncCall)` before the current logic runs (i.e. before the `AsyncCall` is added to the backlog queue or executed via the `ExecutorService`)?",
        "@swankjesse I'm starting to feel like I'm derailing the point of this Analytics API issue and I don't want to be a distraction. Let me know if you'd like me to create a separate issue rather than trying to cram a solution into `EventListener`.\r\n\r\nTrying to pare down my issue into the abstract, ultimately the bare-bones requirements for what I'm trying to solve is:\r\n* I need to be able to capture some thread-local context `foo` at the time a call is `Call.execute()`d or `Call.enqueue(...)`d (i.e. a hook on the thread where the call is executed/enqueued).\r\n* That `foo` context needs to be available somehow at a point in the call where I can adjust the outbound request headers. Ideally in an `Interceptor` as that makes conceptual sense, but it doesn't have to be an `Interceptor` as long as it's straightforward and easy to setup from an end-user perspective.\r\n* I need to know when the call finishes and be able to close the `foo` context at that point - which is another reason having an `Interceptor` as part of the solution seems appealing as that satisfies the header-setting and context-closing requirements in the same spot.\r\n\r\nOverall the solution should be easy to setup from an end-user perspective. Ideally it would be a single `Interceptor` that could be added to a `OkHttpClient.Builder`, but if we need a second hook in `OkHttpClient.Builder` as part of the solution that's ok. I just want it to be simple to configure and in line with the straightforward APIs OkHttp already provides. The more convoluted the solution the less likely end users are going to want to do it. ",
        "I've been using the EventListener API to create an [HAR](https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/HAR/Overview.html) archive. For this purpose I've added a network interceptor but not everything is available here, mostly the timings are hard to calculate.\r\n\r\nMost of my problems could easily be added if the event listener API was request based rather than Call based as it is today. You do get the request passed to some of the methods but especially for redirects you'd want to keep track of this in a good way.\r\n\r\nIdeally I'd wish that each response had these timings attached them without having to calculate it yourself.",
        "I was playing around this class to expose some metrics for prometheus, and I noticed that `callEnd` event was not sent for `DELETE` calls. In subsequent tests I found out this problem is occurring only when the response has no body e.g. for 204 statuses. I looked at the code and found out some commented tests, like this one \r\n\r\nhttps://github.com/square/okhttp/blob/d0418379a7c7a0c92781e4f5f75260d28a0b0145/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java#L881-L899\r\n\r\nI'm sure this is gonna be fixed in the next release(s) of okhttp. As a workaround, I think my only option at this is to place the metrics reporting in the `connectionReleased` event at this time. I don't think there's anything else, isn't it ?\r\n\r\n_In my case I know there won't be multiple connections_",
        "@bric3 sorry about that. Will fix.",
        "@swankjesse Thanks. I was wondering if I mis-understood how event were sent. \r\n\r\nI'm sure there's some challenges around that with protocols like websocket or http/2. Thanks again for this work !",
        "@swankjesse I would like to monitor request by their route as defined in Retrofit. However this appear to be difficult to capture this information in Retrofit, see square/retrofit#2732. For bootstrapping the idea I talked about using `Request.tag` to pass along this contextual route data, but I don't think this is wise regarding the tag usage documentation.\r\n\r\nDo you think OkHttp could introduce another concept in that regard ?",
        ">\n> @swankjesse <https://github.com/swankjesse> I would like to monitor\n> request by their route as defined in Retrofit. However this appear to be\n> difficult to capture this information in Retrofit, see\n> square/retrofit#2732 <https://github.com/square/retrofit/issues/2732>.\n> For bootstrapping the idea I talked about using Request.tag to pass along\n> this contextual route data, but I don't think this is wise regarding the\n> tag usage documentation.\n>\nhow are you planning to do the monitoring? For example, is it a timer? One\nthing you could do is add a synthetic request header that your \"start\"\ntimer removes. There are probably other ways, too.\n",
        "@adriancole Actually I implemented an eventlistener that feeds prometheus collectors (gauge, summary, counters). Summary are the closest thing to timers if compared to micrometer. (But for reasons outside of this scope I'm using summary instead of histograms).\r\n\r\nI considered this approach as well in retrofit, but since I cannot modify the request at the right moment / stage in retrofit I cannot capture the path of the retrofit annotation.",
        "@swankjesse EventListener callEnd does not call everytime after callStart",
        "@hamberluo For a workaround look at https://github.com/square/okhttp/issues/270#issuecomment-371464079",
        "@bric3 same workaround with mine. I wonder any other?",
        "Is it time to move out of experimental? https://github.com/square/okhttp/pull/4068",
        "@yschimke There'is still some bugs in the implementation see the above comments.\r\n\r\ne..g this one https://github.com/square/okhttp/issues/270#issuecomment-371464079",
        "Can you file a separate issue? Would be really helpful. Specifically my question was prompted by whether the API is finalised. I\u2019m sure we will keep finding some bugs. ",
        "I\u2019m still happy with the API. I would like to add events for caching + conditional caching, but that isn\u2019t urgent.",
        "Final API released! Yay!",
        "fantastic!\n",
        "Regarding the API, what about the above comments, which in short demands some kind of contextual data in the events themselves.\r\n\r\n* https://github.com/square/okhttp/issues/270#issuecomment-381157742\r\n* https://github.com/square/okhttp/issues/270#issuecomment-381291303\r\n* https://github.com/square/okhttp/issues/270#issuecomment-381597941\r\n\r\n\r\n",
        "@yschimke Here is it : https://github.com/square/okhttp/issues/4085",
        "@bric3 Can you file separate issues for the other comments, I am suggesting that feedback like this possibly got missed because of the one big thread.",
        "@yschimke done in https://github.com/square/okhttp/issues/4087",
        "FYI: we\u2019re adding new events in OkHttp 3.14.\r\nhttps://github.com/square/okhttp/issues/4638"
    ],
    "448": [],
    "1784": [],
    "3212": [],
    "281": [
        "Still an issue? Does this occur on a redirect? Generally OkHttp doesn't close it's input stream; that's the application layer's job. But sometimes it does, as when it encounters a redirect.\n",
        "Yeah it's still an issue. Perhaps this ball belong's in retrofit's court then? I don't know... when my server guys turn off the gzip responses I don't see any violations. I can see in the retrofit `GsonConverter` where it's creating a new `InputStreamReader` from the response body and closing it in a finally block.\n",
        "We need a test case.\n",
        "This was determined to be a Retrofit bug.\n"
    ],
    "1723": [],
    "4618": [],
    "4040": [],
    "296": [],
    "298": [
        "Sounds like a huge regression if that's the case. I was under the impression we had a test case for this. Let me put something together.\n",
        "Yup, we have a test that demonstrates gzip + conditional caching works fine. Can you give me a publicly-reachable URL that demonstrates the problem? \n\nThis is the test case we're using to show that this is working.\n\n```\n  @Test public void nonIdentityEncodingAndConditionalCache() throws Exception {\n    server.enqueue(new MockResponse()\n        .setBody(gzip(\"ABCABCABC\".getBytes(\"UTF-8\")))\n        .addHeader(\"Last-Modified: \" + formatDate(-2, TimeUnit.HOURS))\n        .addHeader(\"Expires: \" + formatDate(-1, TimeUnit.HOURS))\n        .addHeader(\"Content-Encoding: gzip\"));\n    server.enqueue(new MockResponse()\n        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n\n    server.play();\n    assertEquals(\"ABCABCABC\", readAscii(openConnection(server.getUrl(\"/\")), Integer.MAX_VALUE));\n    assertEquals(\"ABCABCABC\", readAscii(openConnection(server.getUrl(\"/\")), Integer.MAX_VALUE));\n  }\n\n  private String readAscii(URLConnection connection, int count) throws IOException {\n    HttpURLConnection httpConnection = (HttpURLConnection) connection;\n    InputStream in = httpConnection.getResponseCode() < HttpURLConnection.HTTP_BAD_REQUEST\n        ? connection.getInputStream() : httpConnection.getErrorStream();\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < count; i++) {\n      int value = in.read();\n      if (value == -1) {\n        in.close();\n        break;\n      }\n      result.append((char) value);\n    }\n    return result.toString();\n  }\n```\n",
        "Thanks for looking into it. I'm a bit lost in the OkHttp source.\n\nThe test looks pretty much like the conversation between OkHttp and the server I'm dealing with. The only difference seems to be that the server is using ETags and not Last-Modified/Expires. \n\nThe URL of the remote resource is (the headers are significant, so I included a complete curl command):\n\n`curl -H \"User-Agent: curl (http://example.com/)\" -H \"Accept: application/json\" https://srv-lab-t-874.zhaw.ch/v1/catering/menuplans/years/2013/weeks/35`\n\nI just tried it again and that's what happens to the cache files:\n- 1st request: Server responds with 200 OK, ETag, `Content-Encoding: gzip` and GZIP compressed body. The GZIP compressed body ends up in the cache file, `Content-Encoding: gzip` in headers with `OkHttp-Response-Source: NETWORK 200` as well.\n- 2nd request (with revalidation): Server responds with 304 Not Modified, same ETag, no Content-Encoding in headers and no body. GZIP compressed body is still in the cache file, the headers contain no Content-Encoding but `OkHttp-Response-Source: CONDITIONAL_CACHE 304`.\n",
        "@swankjesse I found some time to look into the problem again. I tested it just with OkHttp and could verify that the problem is indeed within OkHttp. Contrary to my statement above, the 2nd request is still fine. The 3rd one is the first with the bad response because of the way the cache is updated during the 2nd request. That's also the reason the unit test you cited above does not catch the bug. Just add another request/response pair to the unit test and it fails:\n\n```\ndiff --git a/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java b/okhttp/src/test/java/co\nindex aa3948b..bb19baf 100644\n--- a/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java\n+++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java\n@@ -946,10 +946,12 @@ public final class HttpResponseCacheTest {\n     server.enqueue(\n         response.setBody(gzip(\"ABCABCABC\".getBytes(\"UTF-8\"))).addHeader(\"Content-Encoding: gzip\"));\n     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n+    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n\n     server.play();\n     assertEquals(\"ABCABCABC\", readAscii(openConnection(server.getUrl(\"/\"))));\n     assertEquals(\"ABCABCABC\", readAscii(openConnection(server.getUrl(\"/\"))));\n+    assertEquals(\"ABCABCABC\", readAscii(openConnection(server.getUrl(\"/\"))));\n   }\n\n   @Test public void notModifiedSpecifiesEncoding() throws Exception {\n```\n\nDuring the first request, everything is fine because the original response from the server is written to the cache before the Content-Encoding header is stripped. But during the second request (after the first validation), the cache is updated after the Content-Encoding header is stripped. So during the third request (after the second validation) the Content-Encoding header isn't present anymore but the body is still compressed. \n\n```\ndiff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java b/okhttp/src/main/java/com/squareup/\nindex 142def4..0459190 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java\n@@ -649,10 +649,16 @@ public class HttpEngine {\n       if (cachedResponseHeaders.validate(responseHeaders)) {\n         release(false);\n         ResponseHeaders combinedHeaders = cachedResponseHeaders.combine(responseHeaders);\n-        setResponse(combinedHeaders, cachedResponseBody);\n+        this.responseHeaders = combinedHeaders;\n+\n+        // Update the cache before initializing the content stream, otherwise the Content-Encoding\n+        // header (if present) will be stripped from the combined headers and not end up in the\n+        // cache file if transparent gzip compression is turned on.\n         OkResponseCache responseCache = client.getOkResponseCache();\n         responseCache.trackConditionalCacheHit();\n         responseCache.update(cacheResponse, policy.getHttpConnectionToCache());\n+\n+        initContentStream(cachedResponseBody);\n         return;\n       } else {\n         Util.closeQuietly(cachedResponseBody);\n```\n\nThis patch fixes the problem by updating the cache before the response is initialized (same approach as if the response source isn't CONDITIONAL_CACHE). The tests are all ok but I'm not sure if there aren't any unintended side effects. If you're fine with it, I can prepare a pull request or you can just apply the changes yourself.\n",
        "Oh wow, nice find. Yes, please send a pull request. And this:\nhttps://github.com/square/okhttp/blob/master/CONTRIBUTING.md\n"
    ],
    "2925": [],
    "67": [],
    "4525": [],
    "508": [],
    "443": [],
    "432": [],
    "1088": [],
    "333": [
        "Good find. Will fix.\n",
        "Sorry for the delay. Fix is out for review.\n"
    ],
    "337": [
        "The next sentence says \"For the purposes of HTTP, GMT is exactly equal to UTC (Coordinated Universal Time).\"\n",
        "Reading it more, I guess you're saying the presence of the \"UTC\" string itself as the timezone is what's causing the problem because the allowed formats (snippet below) all explicitly specify \"GMT\".\n\n```\n       HTTP-date    = rfc1123-date | rfc850-date | asctime-date\n       rfc1123-date = wkday \",\" SP date1 SP time SP \"GMT\"\n       rfc850-date  = weekday \",\" SP date2 SP time SP \"GMT\"\n```\n",
        "That's right. The way I am testing it is as follows:\n\nSend a request which should receive a 304 using OkHttp via a Charles proxy - the request is to a CDN so I'm fairly sure it's not a server config issue. This request receives a 200 response.\n\nReplay the same request from Charles but with the if-modified-since header changed to use GMT - this request receives a 304.\n",
        "Thanks @rupertbates \n",
        "My pleasure, thanks for your work on the library.\nOn 3 Nov 2013 19:09, \"Jesse Wilson\" notifications@github.com wrote:\n\n> Thanks @rupertbates https://github.com/rupertbates\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/square/okhttp/issues/337#issuecomment-27651428\n> .\n\n## Please consider the environment before printing this email.\n\nVisit theguardian.com   \n\nOn your mobile, download the Guardian iPhone app theguardian.com/iphone and our iPad edition theguardian.com/iPad  \nSave up to 33% by subscribing to the Guardian and Observer - choose the papers you want and get full digital access.\nVisit subscribe.theguardian.com\n\nThis e-mail and all attachments are confidential and may also\nbe privileged. If you are not the named recipient, please notify\nthe sender and delete the e-mail and all attachments immediately.\nDo not disclose the contents to another person. You may not use\nthe information for any purpose, or store, or copy, it in any way.\n\nGuardian News & Media Limited is not liable for any computer\nviruses or other material transmitted with or as part of this\ne-mail. You should employ virus checking software.\n\nGuardian News & Media Limited\n\nA member of Guardian Media Group plc\nRegistered Office\nPO Box 68164\nKings Place\n90 York Way\nLondon\nN1P 2AP\n\nRegistered in England Number 908396\n\n---\n"
    ],
    "203": [],
    "4501": [],
    "614": [],
    "2112": [],
    "1241": [],
    "2710": [],
    "766": [],
    "358": [
        "This can happen when using okhttp with volley for example.\n\nHere is an example test & fix\nhttps://github.com/pablolb/okhttp/commit/ab61aea1fc1eb6edac179107be26653cecb067d5\n",
        "Thanks! I'll take a look.\n\nIf you fill out our [contributor's agreement](https://github.com/square/okhttp/blob/master/CONTRIBUTING.md) and submit a pull request I can use your code.\n",
        "Sorry, now its duplicated. It did follow the execution with the debugger for a couple of test cases to understand the issue but still... please do take a look, tests ran ok, but as it is re-entrant code somebody with better knowledge of the code-base should definitely have a better understanding.  \n",
        "What does the IOException look like when this fails without the patch?\n",
        "One other option is to change initContentStream to be called differently when `hasResponseBody()` returns null. That should be relatively straightforward and make it possible to use caches external to OkHttp.\n"
    ],
    "364": [
        "ack https://github.com/square/okhttp/pull/365\n\nI think it is usually the case that HttpURLConnection sets content-length on POST.\n\n@swankjesse any thoughts about implicitly setting content-length on POST over spdy?\n",
        "The SPDY docs have guidance on this.\n\n> Although POSTs are inherently chunked, POST requests SHOULD also be accompanied by a Content-Length header. There are two reasons for this: First, it assists with upload progress meters for an improved user experience. But second, we know from early versions of SPDY that failure to send a content length header is incompatible with many existing HTTP server implementations. Existing user-agents do not omit the Content-Length header, and server implementations have come to depend upon this.\n\nWe should set the Content-Length whenever we know it.\n",
        "ptal this now has a fix\n",
        "@wangxiaoyong can you confirm building from latest works for you?\n",
        "@adriancole, Thank you for your response.\n\nIn your code (httpEngine.policy.getFixedContentLength()), I should setContentLength before I write the bytes into the output stream, right? (Such as urlConnection.setFixedLengthStreamingMode(1024))\n",
        "Yeap. That or set the content-length header ;)\n",
        "Alright, set content-length, works for me.\n",
        "Great.\n"
    ],
    "286": [],
    "477": [],
    "373": [
        "I wonder whether client protocol (h2 vs http1) could be specific per domain as well as a default per client.  This could allow high volume apps to configure h2 only for their api and then the blocking could be done predictably.  I don't think any of the major sites are going to turn off h2 now.\n\nI think we saw this in production and were scratching our heads why we had more connections than we predicted.\n",
        "@adriancole any thoughts on this thread?\n",
        "Happy new year, @lingmingyb!\n\nSince you have a change in mind, how about paste pseudocode here that\nproduces the problem, and a suggested change?\n",
        "Awesome. This test is right but it's going to be tricky to implement because the TLS handshake is slow.\n- If we know we're going to get SPDY, we want to hold request 2 until the first connection's TLS handshake is ready.\n- If we know we're not going to get SPDY, we don't want to wait! There's no benefit of holding request 2 until request 1's connection handshakes.\n\nOne fun approach is to start 2 handshakes, but break the 2nd one if the 1st comes back as SPDY.\n\nRegardless, I like where you're going with this!\n",
        "Hi, I am experiencing the same issue with SPDY. Is there a fix already pushed or a patch available that I can use?\n",
        "@andrejvanderzee we've still got a race where we'll create multiple connections if you make multiple requests before the first connection is established.\n",
        "Why not disconnect a SPDY connection after serving the first request, if there already exists another open connection to the same domain? How do browsers cope with this?\n"
    ],
    "3029": [],
    "906": [],
    "4243": [],
    "1714": [],
    "708": [],
    "1991": [],
    "99": [],
    "1201": [],
    "405": [
        "Do we want synchronous invocations to honor maxRequestsPerHost?\n",
        "@adriancole nope!\n",
        "> @adriancole nope!\r\n\r\nwhy not ? It is misleading they behave differently"
    ],
    "1348": [],
    "1315": [],
    "686": [],
    "530": [],
    "659": [],
    "442": [
        "Yup, great investigation. There's a disconnect between `hasNext()` and failed TLS modes. We need to tell the route selector that neither TLS mode will work for this host.\n",
        "Fixed. Thanks for the helpful report!\n"
    ],
    "447": [
        "... and we ultimately crash because we don't get valid HTTP/2 frames back:\n\n```\n\nException in thread Thread-0 java.lang.UnsupportedOperationException: 1010100\n  at com.squareup.okhttp.internal.spdy.Http20Draft09.nextFrame(Http20Draft09.java:153)\n  at com.squareup.okhttp.internal.spdy.SpdyConnection.execute(SpdyConnection.java:450)\n  at com.squareup.okhttp.internal.NamedRunnable.run(NamedRunnable.java:33)\n  at java.lang.Thread.run(Thread.java:744)\n```\n",
        "gotit.\n"
    ],
    "450": [],
    "4414": [],
    "1959": [],
    "4701": [],
    "2211": [],
    "1065": [],
    "3792": [],
    "4096": [],
    "4078": [],
    "2221": [],
    "4634": [],
    "2999": [],
    "275": [],
    "497": [
        "It would be nice if it was possible to add custom auth-scheme values so you weren't limited to only basic and bearer\n",
        "@cketcham yup, good call. Do you think adding a request header will be sufficient in call cases?\n",
        "running in to this as well. started to try and work around it by doing new Credential(\"Token ...\"); but that constructor is private. any reason not to make it public so that anything is possible, not just the methods that have been explicitly added?\n",
        "@ross please send a pull request!\n",
        "@swankjesse can easily do, but it'll get rejected b/c i don't sign contribution agreements (doing so in the past was a pita and left a bad taste.)\n",
        "@ross thanks for the PR. We need the CLA so we can redistribute your work, otherwise please close the PR. (I'd prefer the CLA though!)\nhttps://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1\n",
        "anyone else, feel free to make the exact sames changes or submit it as your own. it's literally 5m work.\n",
        "@ross I have already signed the CLA. I'll submit the changes tomorrow.\n",
        "@austynmahoney cool. thanks.\n"
    ],
    "769": [],
    "2308": [],
    "2107": [],
    "507": [
        "Have you tried the latest code from git? We've started to forcefully discard the rest of the stream in order to overcome problems like this.\n",
        "@swankjesse The library I tried was several months old. Can you please point me the commit with the fixes to forcefully discard the stream? Thanks. \n",
        "@swankjesse I found this commit https://github.com/square/okhttp/commit/f6f3497ef7d01c2e11b68ca96b7f84e566e6c745.  Is this the fix you were referring to? This change does not really resolve our issue though because our application does not set the response cache, therefore the discardStream() method will not get called in our case. \n",
        "Ahh, yep you're right. Without a cache we won't discard the stream. I've got a big, fancy chance to completely redo gzip, which might end up fixing your problem by accident (and some related problems).\n\nhttps://github.com/square/okhttp/pull/510\n\nIf that doesn't work, then it's tricky. It's very difficult to differentiate between a premature stream close (which wants `RST_STREAM`) and a regular one.\n"
    ],
    "506": [
        "@dlubarov , @JakeWharton do you folks happen to be working on bringing Happy Eyeballs support to OkHttp? There are more DHCPv6-based IPv6 networks every day, especially in corporate settings, and the ability to pick the better transport in parallel will greatly benefit user experience. \n",
        "It\u2019s possible to implement this manually by making two HTTP requests yourself and picking the one that returns first. Doing it inside of OkHttp is more difficult. For example, what should the interceptors see? We might be able to do further work later to unblock this, but for now it seems very difficult to do well.\n",
        "So this is causing issues for IPv6 http requests with React Native, linked above.\r\n\r\nIt sounds like the workaround suggested above is to do two requests in the above layer, with one forced to IPv4. Curious, how does one force IPv4 in an okhttp request?\r\n\r\nDo I need to resolve the DNS to the IPv4 and IPv6 address and add in Host headers manually? Or is there some easier way?",
        "Implement the Dns interface and strip the addresses you don't want. Be careful to not return an empty list; that case needs to throw an exception.",
        "Hey guys, by any chance you still planing on doing that? I'm facing the same problem here and the workaround doesn't really look good. It would be great to have a more sophisticated approach built-in the lib.",
        "+1. I recently misconfigured my router to a bad IPv6 setting and half my apps were failing but chrome and others would still work. Took me a couple days to figure out what was going wrong.\n",
        "Linking directly to RFC - https://tools.ietf.org/html/rfc8305",
        "So, what is the plan? Will okhttp support Happy Eyeballs ?",
        "In the [docs](https://square.github.io/okhttp/), I read:\r\n\r\n> OkHttp perseveres when the network is troublesome: it will silently recover from common connection problems. If your service has multiple IP addresses OkHttp will attempt alternate addresses if the first connect fails. This is necessary for IPv4+IPv6 and services hosted in redundant data centers.\r\n\r\nHowever, when I run this code in an API 21 (5.0) emulator...\r\n\r\n```java\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    @SuppressLint(\"StaticFieldLeak\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        new AsyncTask<Void, Void, Void>() {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                OkHttpClient client = new OkHttpClient();\r\n                String url = \"https://directory.spaceapi.io/\";\r\n                Request request = new Request.Builder().url(url).build();\r\n                try (Response response = client.newCall(request).execute()) {\r\n                    Log.i(\"MainActivity\", \"Body: \" + response.body().string());\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                return null;\r\n            }\r\n        }.execute();\r\n    }\r\n}\r\n```\r\n\r\n...it fails with the following exception:\r\n\r\n```\r\n02-29 17:27:37.293 5855-5873/? W/System.err: java.net.ConnectException: Failed to connect to directory.spaceapi.io/2a01:4f8:1c0c:8127::2:443\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.kt:285)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.connection.RealConnection.connect(RealConnection.kt:195)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.connection.ExchangeFinder.findConnection(ExchangeFinder.kt:233)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.connection.ExchangeFinder.findHealthyConnection(ExchangeFinder.kt:107)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.connection.ExchangeFinder.find(ExchangeFinder.kt:75)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.connection.RealCall.initExchange$okhttp(RealCall.kt:245)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.kt:32)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:100)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.kt:82)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:100)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.kt:83)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:100)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.kt:74)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:100)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.connection.RealCall.getResponseWithInterceptorChain$okhttp(RealCall.kt:197)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at okhttp3.internal.connection.RealCall.execute(RealCall.kt:148)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at ch.dbrgn.happyeyeballs.MainActivity$1.doInBackground(MainActivity.java:31)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at ch.dbrgn.happyeyeballs.MainActivity$1.doInBackground(MainActivity.java:23)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at android.os.AsyncTask$2.call(AsyncTask.java:288)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at java.util.concurrent.FutureTask.run(FutureTask.java:237)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at java.lang.Thread.run(Thread.java:818)\r\n02-29 17:27:37.293 5855-5873/? W/System.err: Caused by: java.net.ConnectException: failed to connect to directory.spaceapi.io/2a01:4f8:1c0c:8127::2 (port 443) after 10000ms: isConnected failed: ENETUNREACH (Network is unreachable)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at libcore.io.IoBridge.isConnected(IoBridge.java:238)\r\n02-29 17:27:37.293 5855-5873/? W/System.err:     at libcore.io.IoBridge.connectErrno(IoBridge.java:171)\r\n02-29 17:27:37.294 5855-5873/? W/System.err:     at libcore.io.IoBridge.connect(IoBridge.java:122)\r\n02-29 17:27:37.294 5855-5873/? W/System.err:     at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:183)\r\n02-29 17:27:37.294 5855-5873/? W/System.err:     at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:456)\r\n02-29 17:27:37.294 5855-5873/? W/System.err:     at java.net.Socket.connect(Socket.java:882)\r\n02-29 17:27:37.294 5855-5873/? W/System.err:     at okhttp3.internal.platform.AndroidPlatform.connectSocket(AndroidPlatform.kt:57)\r\n02-29 17:27:37.294 5855-5873/? W/System.err:     at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.kt:283)\r\n02-29 17:27:37.294 5855-5873/? W/System.err: \t... 23 more\r\n02-29 17:27:37.294 5855-5873/? W/System.err: Caused by: android.system.ErrnoException: isConnected failed: ENETUNREACH (Network is unreachable)\r\n02-29 17:27:37.294 5855-5873/? W/System.err:     at libcore.io.IoBridge.isConnected(IoBridge.java:223)\r\n02-29 17:27:37.294 5855-5873/? W/System.err: \t... 30 more\r\n```\r\n\r\nThat host (directory.spaceapi.io) is accessible both via IPv4 and IPv6. However, the emulator only has link-local and site-local IPv6 addresses.\r\n\r\n```\r\nroot@generic_x86_64:/ # ip addr\r\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN\r\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\r\n    inet 127.0.0.1/8 scope host lo\r\n       valid_lft forever preferred_lft forever\r\n    inet6 ::1/128 scope host\r\n       valid_lft forever preferred_lft forever\r\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1440 qdisc pfifo_fast state UP qlen 1000\r\n    link/ether 52:54:00:12:34:56 brd ff:ff:ff:ff:ff:ff\r\n    inet 10.0.2.15/24 brd 10.0.2.255 scope global eth0\r\n       valid_lft forever preferred_lft forever\r\n    inet6 fec0::5054:ff:fe12:3456/64 scope site dynamic\r\n       valid_lft 86236sec preferred_lft 14236sec\r\n    inet6 fe80::5054:ff:fe12:3456/64 scope link\r\n       valid_lft forever preferred_lft forever\r\n3: sit0: <NOARP> mtu 1480 qdisc noop state DOWN\r\n    link/sit 0.0.0.0 brd 0.0.0.0\r\n```\r\n\r\nAm I right when I assume that this connection failure is due to the missing happy eyeballs implementation?",
        "Does that host work from chrome on the same mobile? ",
        "> Does that host work from chrome on the same mobile?\r\n\r\nHmm, good question. From the built-in emulator browser I get a `net::ERR_SSL_VERSION_OR_CIPHER_MISMATCH` error. The target host has disabled TLS < 1.2. Could this be a TLS version mismatch masked as a IPv6 connection problem? The same code *does* work on an Android 9 emulator. However, I thought that starting from 4.4 or 5.0, TLSv2 should work out of the box.\r\n\r\nEdit: According to the Qualys SSL Labs client test, the client *does* support TLS 1.2. Then I assume the ciphersuites on the server are not yet supported by this device.",
        "I would suggest starting with a Stackoverflow question.  That request works for me with a JDK OkHttp request.  But I get an IPv4 address back.\r\n\r\nBut debugging on this github issue is likely to spam 8 people.",
        "One thing to consider is whether we should add suppressed errors when we fail after multiple hosts. \r\n\r\nIf we fail with IPv4 with a useful error but swallow it to deliver the IPv6 error then it's misleading.\r\n\r\nFor discussion https://github.com/square/okhttp/pull/5836 "
    ],
    "435": [],
    "2899": [],
    "1095": [],
    "2214": [],
    "261": [],
    "148": [],
    "525": [
        "I'll look into sporadic build fails on non-os/x sometime in the next week.\n",
        "Here is a gist of running tests on OS X 10.9: https://gist.github.com/tophyr/8961590\n\nSomething I thought was curious: java -version returns 1.7.0_51 from Oracle, but mvn --version reports seeing 1.6.0_65 from Apple.\n",
        "And, one more, apologies for spam: Telling maven explicitly to use Oracle 1.7.0_51, I get further into the tests but they still ultimately fail.\n\nhttps://gist.github.com/tophyr/8961746\n",
        "Still broken.\n\n```\nTests run: 53, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 2.988 sec <<< FAILURE! - in com.squareup.okhttp.internal.spdy.SpdyConnectionTest\nserverClosesClientInputStream(com.squareup.okhttp.internal.spdy.SpdyConnectionTest)  Time elapsed: 0.009 sec  <<< FAILURE!\njava.lang.AssertionError: expected:<0> but was:<1>\n    at org.junit.Assert.fail(Assert.java:88)\n    at org.junit.Assert.failNotEquals(Assert.java:743)\n    at org.junit.Assert.assertEquals(Assert.java:118)\n    at org.junit.Assert.assertEquals(Assert.java:555)\n    at org.junit.Assert.assertEquals(Assert.java:542)\n    at com.squareup.okhttp.internal.spdy.SpdyConnectionTest.serverClosesClientInputStream(SpdyConnectionTest.java:662)\n\nheadersOnlyStreamIsClosedAfterReplyHeaders(com.squareup.okhttp.internal.spdy.SpdyConnectionTest)  Time elapsed: 0.008 sec  <<< FAILURE!\njava.lang.AssertionError: expected:<0> but was:<1>\n    at org.junit.Assert.fail(Assert.java:88)\n    at org.junit.Assert.failNotEquals(Assert.java:743)\n    at org.junit.Assert.assertEquals(Assert.java:118)\n    at org.junit.Assert.assertEquals(Assert.java:555)\n    at org.junit.Assert.assertEquals(Assert.java:542)\n    at com.squareup.okhttp.internal.spdy.SpdyConnectionTest.headersOnlyStreamIsClosedAfterReplyHeaders(SpdyConnectionTest.java:106)\n\npeerHttp2ServerZerosCompressionTable(com.squareup.okhttp.internal.spdy.SpdyConnectionTest)  Time elapsed: 0.011 sec  <<< FAILURE!\njava.lang.AssertionError: expected:<0> but was:<4096>\n    at org.junit.Assert.fail(Assert.java:88)\n    at org.junit.Assert.failNotEquals(Assert.java:743)\n    at org.junit.Assert.assertEquals(Assert.java:118)\n    at org.junit.Assert.assertEquals(Assert.java:555)\n    at org.junit.Assert.assertEquals(Assert.java:542)\n    at com.squareup.okhttp.internal.spdy.SpdyConnectionTest.peerHttp2ServerZerosCompressionTable(SpdyConnectionTest.java:340)\n```\n",
        "Tests just passed for me.\n"
    ],
    "579": [],
    "440": [],
    "4717": [],
    "847": [],
    "56": [],
    "1233": [],
    "4287": [],
    "819": [],
    "1942": [],
    "567": [
        "Can you try with the latest code from git? Things have been shuffled around quite a bit and there's a good chance your problem disappeared in the mix!\n",
        "We're going to do a 1.5 release shortly. If you can reproduce this bug with that code, please let me know.\n",
        "Some notes:\n\nNote that this is an issue as spdy frames can be large, like 16MiB.  If you can get the server to write smaller data frames this is less an issue.  Ex. http/2 frames are only 16Kib.\n\nAt any rate, this sounds testable, maybe by rate-limiting mock web server.\n",
        "I updated to the latest commit - 7b106923e078ac2435e8c8ce9d615f9903106ed8. However, I cannot test whether the bug is fixed since I hit the following exception in a code path that is precursor to where I can reproduce the bug:\n\n```\nCaused by: javax.net.ssl.SSLException: Write error: ssl=0x601c1640: I/O error during system call, Broken pipe\n    at org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_write(Native Method)\n    at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLOutputStream.write(OpenSSLSocketImpl.java:706)\n    at okio.Okio$1.write(Okio.java:70)\n    at okio.RealBufferedSink.flush(RealBufferedSink.java:137)\n    at com.squareup.okhttp.internal.http.HttpConnection$ChunkedSink.flush(HttpConnection.java:309)\n    at okio.RealBufferedSink.flush(RealBufferedSink.java:139)\n    at okio.RealBufferedSink$1.flush(RealBufferedSink.java:113)\n    ... 11 more\n```\n\nThis seems to be a real bug within okio/okhttp, right? Any steps to investigate further into this?\nAnd an important note - to get okio and okhttp to compile within our project which doesn't use Java 7, I modified the following:\n\n```\ndiff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java\nindex 358ec95..28a0830 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java\n@@ -63,15 +65,7 @@ public final class HttpsURLConnectionImpl extends DelegatingHttpsURLConnection {\n     return delegate.client.getSslSocketFactory();\n   }\n\n-  @Override public long getContentLengthLong() {\n-    return delegate.getContentLengthLong();\n-  }\n-\n   @Override public void setFixedLengthStreamingMode(long contentLength) {\n     delegate.setFixedLengthStreamingMode(contentLength);\n   }\n-\n-  @Override public long getHeaderFieldLong(String field, long defaultValue) {\n-    return delegate.getHeaderFieldLong(field, defaultValue);\n-  }\n }\ndiff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/ResponseCacheAdapter.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/ResponseCacheAdapter.java\nindex 9d6eb22..f4e95af 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/ResponseCacheAdapter.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/ResponseCacheAdapter.java\n@@ -526,17 +528,9 @@ public class ResponseCacheAdapter implements OkResponseCache {\n       throw throwRequestSslAccessException();\n     }\n\n-    @Override public long getContentLengthLong() {\n-      return delegate.getContentLengthLong();\n-    }\n-\n     @Override public void setFixedLengthStreamingMode(long contentLength) {\n       delegate.setFixedLengthStreamingMode(contentLength);\n     }\n-\n-    @Override public long getHeaderFieldLong(String field, long defaultValue) {\n-      return delegate.getHeaderFieldLong(field, defaultValue);\n-    }\n   }\n\n   private static RuntimeException throwRequestModificationException() {\ndiff --git a/okio/src/main/java/okio/DeflaterSink.java b/okio/src/main/java/okio/DeflaterSink.java\nindex e3a7cab..e27d4bc 100644\n--- a/okio/src/main/java/okio/DeflaterSink.java\n+++ b/okio/src/main/java/okio/DeflaterSink.java\n@@ -15,11 +15,10 @@\n  */\n package okio;\n\n+import static okio.Util.checkOffsetAndCount;\n+\n import java.io.IOException;\n import java.util.zip.Deflater;\n-import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;\n-\n-import static okio.Util.checkOffsetAndCount;\n\n /**\n  * A sink that uses <a href=\"http://tools.ietf.org/html/rfc1951\">DEFLATE</a> to\n@@ -68,7 +67,6 @@ public final class DeflaterSink implements Sink {\n     }\n   }\n\n-  @IgnoreJRERequirement\n   private void deflate(boolean syncFlush) throws IOException {\n     OkBuffer buffer = sink.buffer();\n     while (true) {\n```\n\n This is why I didn't directly file a new bug. However I don't think these modifications have anything to do with the SSLException exception above since I've only removed unused Java 7 APIs and an annotation. But I might be wrong.\n\nAlso, thank you for being so responsive!\n",
        "Do you happen to be hitting a public spdy service which can reproduce this\nproblem?  What works before this occurs? Ex. Can you read response headers?\n",
        "@mihai-dumitresq which webserver are you using?\n",
        "Sorry about this. There's an issue in our project code where we we're not checking the status code of the connection until too late thus I reported the later less informative error. So the first error's stack trace is:\n\n```\nCaused by: java.io.IOException: Unexpected protocol: spdy/3\n    at com.squareup.okhttp.Protocol.find(Protocol.java:75)\n    at com.squareup.okhttp.Connection.upgradeToTls(Connection.java:163)\n    at com.squareup.okhttp.Connection.connect(Connection.java:101)\n    at com.squareup.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:237)\n    at com.squareup.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:181)\n    at com.squareup.okhttp.internal.http.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:369)\n    at com.squareup.okhttp.internal.http.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:106)\n    at com.squareup.okhttp.internal.http.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:89)\n    at com.squareup.okhttp.internal.http.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:1)\n```\n\nNow I know okhttp dropped support of spdy/3 in favor of spdy/3.1. So there must be a reason why NPN protocol nogotiation fails, either due to the server or due to the client. I'll need to investigate further before I can test whether the newest okhttp fixes the issue :(.\n",
        "While the server is public facing, the address/setup is complex enough that I'd rather not get into details at this point. Sorry. But, as I said, I will investigate whether the server supports only spdy/3 rather than both, or otherwise, what went wrong. I'll make sure to post the results here.\n",
        "It looks like the server I'm connecting to supports spdy/3.1. Is there an easy way to get/print out all the raw info that's was sent/received on the connection. Or at least by this point: https://github.com/square/okhttp/blob/master/okhttp/src/main/java/com/squareup/okhttp/Connection.java#L163 ?\n",
        "If the server is public you can use a tool like\nhttps://jxck.io/labs/http2cat/\n",
        "@mihai-dumitresq your best bet to see the supported protocols is to attach a debugger.\n\nI'm closing this; the original issue around timeouts is solved. If you aren't able to get through the spdy/3 protocol issue, please open another issue and we'll help out as much as we can!\n"
    ],
    "568": [],
    "1235": [],
    "3863": [],
    "881": [],
    "1630": [],
    "578": [
        "I investigated this. The trick is that sometimes there is a legitimate connectivity problem. The solution might be to use pings or something when a connection appears to be dead.\n"
    ],
    "1298": [],
    "3996": [],
    "4523": [],
    "3762": [],
    "3281": [],
    "4333": [],
    "3425": [],
    "596": [
        "I got this\n",
        "nit: `:host` isn't a valid header in http/2 draft 9.  It was renamed to `:authority`\n",
        "also `:version` is not a valid header either\n",
        "interesting because the code doesn't intentionally huffman encode anything at the moment.  The behavior for `:path` should be the same as the behavior for `user-agent`, since they are both well-known.  It must be something about the value.\n\nDigging deeper.\n",
        "OK this is a problem when the header value length > 128.\n",
        "fix on the way\n",
        "Thanks for catching this!\n",
        "(y) Thank you for the quick fix. \n"
    ],
    "41": [],
    "605": [
        "@danielgomezrico I think you want to ask on stackoverflow\n",
        "It works... :)\n",
        "I guess this SO answer sums it up: http://stackoverflow.com/questions/299628/is-an-entity-body-allowed-for-an-http-delete-request\n\nA body is not 'disallowed' but responses should always be treated as stale.\n",
        "Not sure an api designed to require a body on delete will lead to sane behavior :)  In the two apis that I've worked with that had this requirement, they were far from sane.  In both cases, I was able to convince the author to change, and the apis were better off.\n\nopinion aside..\n\nI'm pretty sure that HttpUrlConnection doesn't allow bodies with DELETE messages.  We could break  with that in order to facilitate people who would otherwise have to use apache to permit bodies on delete.\n",
        "@adriancole I tend to agree, I would bash our backend devs round the head if they suggested a DELETE with body. But RFC wise there is nothing \"wrong\" with allowing it. \n\nIt all depends on what you want your impl to follow, I guess to not break current functionality (from someone moving to OkHttp) aligning with what UrlConnection does makes sense. \n",
        "I'm actually ok with okhttp permitting DELETE with body, since it can take several months or longer to get an upstream api to change (if at all).  We don't want to artificially limit users.  We just will need to ack that we are breaking with HttpUrlConnection behavior when doing so.\n\n@swankjesse your call\n",
        "I talked to Jesse about it already. This issue was the result (and a reminder) of our conversation.\n",
        "SGTM wasn't sure if this was an issue to take action or to discuss.  Looks like we move to action!\n",
        "fix pending review\n"
    ],
    "519": [],
    "406": [],
    "4065": [],
    "616": [
        "hmm.. on this one, there's no smoking gun unless you have the rest of the console.  My guess is that this could be one of our swallow IOE blocks.   I'll raise a PR to add assertions there.\n",
        "There's nothing else in the logs that applies from what I can see.\n",
        "I started down a path of cataloging swallowed exceptions.  There are basically too many ways to report connection closed, broken pipe, socket closed, etc.  I abandoned that approach.\n",
        "Recent flake might have clues.\n\n```\nRunning com.squareup.okhttp.internal.spdy.SpdyConnectionTest\nException in thread \"MockSpdyPeer\" java.lang.NullPointerException\n    at com.squareup.okhttp.internal.spdy.MockSpdyPeer.readAndWriteFrames(MockSpdyPeer.java:118)\n    at com.squareup.okhttp.internal.spdy.MockSpdyPeer.access$100(MockSpdyPeer.java:39)\n    at com.squareup.okhttp.internal.spdy.MockSpdyPeer$1.run(MockSpdyPeer.java:107)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:744)\nException in thread \"Thread-154\" java.lang.IllegalStateException: closed\n    at okio.RealBufferedSource.require(RealBufferedSource.java:62)\n    at okio.RealBufferedSource.readInt(RealBufferedSource.java:110)\n    at com.squareup.okhttp.internal.spdy.Spdy3$Reader.nextFrame(Spdy3.java:133)\n    at com.squareup.okhttp.internal.spdy.SpdyConnection$Reader.execute(SpdyConnection.java:553)\n    at com.squareup.okhttp.internal.NamedRunnable.run(NamedRunnable.java:33)\n    at java.lang.Thread.run(Thread.java:744)\nException in thread \"Thread-163\" java.lang.IllegalStateException: closed\n    at okio.RealBufferedSource.require(RealBufferedSource.java:62)\n    at okio.RealBufferedSource.readInt(RealBufferedSource.java:110)\n    at com.squareup.okhttp.internal.spdy.Spdy3$Reader.nextFrame(Spdy3.java:133)\n    at com.squareup.okhttp.internal.spdy.SpdyConnection$Reader.execute(SpdyConnection.java:553)\n    at com.squareup.okhttp.internal.NamedRunnable.run(NamedRunnable.java:33)\n    at java.lang.Thread.run(Thread.java:744)\nException in thread \"MockSpdyPeer\" java.lang.RuntimeException: java.net.SocketException: Socket closed\n    at com.squareup.okhttp.internal.spdy.MockSpdyPeer$1.run(MockSpdyPeer.java:110)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:744)\nCaused by: java.net.SocketException: Socket closed\n    at java.net.SocketInputStream.socketRead0(Native Method)\n    at java.net.SocketInputStream.read(SocketInputStream.java:152)\n    at java.net.SocketInputStream.read(SocketInputStream.java:122)\n    at okio.Okio$2.read(Okio.java:113)\n    at okio.RealBufferedSource.require(RealBufferedSource.java:64)\n    at okio.RealBufferedSource.readByteString(RealBufferedSource.java:74)\n    at com.squareup.okhttp.internal.spdy.MockSpdyPeer$InFrame.data(MockSpdyPeer.java:244)\n    at com.squareup.okhttp.internal.spdy.Spdy3$Reader.nextFrame(Spdy3.java:191)\n    at com.squareup.okhttp.internal.spdy.MockSpdyPeer.readAndWriteFrames(MockSpdyPeer.java:149)\n    at com.squareup.okhttp.internal.spdy.MockSpdyPeer.access$100(MockSpdyPeer.java:39)\n    at com.squareup.okhttp.internal.spdy.MockSpdyPeer$1.run(MockSpdyPeer.java:107)\n    ... 3 more\nTests run: 53, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 3.321 sec <<< FAILURE! - in com.squareup.okhttp.internal.spdy.SpdyConnectionTest\npushPromiseStream(com.squareup.okhttp.internal.spdy.SpdyConnectionTest)  Time elapsed: 0.016 sec  <<< FAILURE!\njava.lang.AssertionError: expected:<2> but was:<1>\n    at org.junit.Assert.fail(Assert.java:88)\n    at org.junit.Assert.failNotEquals(Assert.java:743)\n    at org.junit.Assert.assertEquals(Assert.java:118)\n    at org.junit.Assert.assertEquals(Assert.java:555)\n    at org.junit.Assert.assertEquals(Assert.java:542)\n    at com.squareup.okhttp.internal.spdy.SpdyConnectionTest.pushPromiseStream(SpdyConnectionTest.java:1487)\n```\n"
    ],
    "2643": [],
    "169": [],
    "627": [
        "good catch!  fix + test: https://github.com/square/okhttp/pull/628\n",
        "Actually, since the window size is optional, the server side settings may not include the window size setting.  This will still be an issue if we don't set a default initial window size here. \n",
        "addressed in PR.  thanks for the feedback!\n",
        "Thanks for your quick response and the fixes.\n"
    ],
    "1193": [],
    "1260": [],
    "640": [
        "How to solve this in a production app, I am using retrofit 1.9",
        "I am getting the same issue with OkHttp3. Does anyone have a solution?",
        "I am experiencing the same issue with OkHTTP 3.10.0 and nginx 1.13.12. When we disable http/2, it works. Any solution? Can we help with more information?",
        "@andre-paraense @Ahmedfir have you got a test server or real url we can test against?",
        "I think it's twitter's fault.\nhttps://twitter.com/jessewilson/status/443570142320939009\n",
        "This looks like a bug in our HPACK decoder. Or possibly a bug in Twitter's HPACK encoder. (FYI @jpinner).\n\nFetching `https://twitter.com` 10 times on the same connection reliably yields a missing `:status` header. I'll see if OkHttp suffers this problem talking to other http/2 hosts.\n",
        "Looks like this is an HPACK problem. I'm still trying to isolate the cause. I've got a reproducible test case: https://gist.github.com/swankjesse/9567930\n",
        "@swankjesse I'll try to find some time to debug this today. Are you all using Twitter's HPACK encoder/decoder?\n",
        "We are using twitter's huffman codec for our own hpack.\n",
        "Thanks @jpinner. I'm not yet sure whether it's a bug in our client or your server.\n",
        "So, I just ran `ExternalHttp2Example` changing the url to https://twitter.com, and put a break point at SpdyStream line 275 (receiveHeaders)\n\nSeems `:status` is reporting ok for me at least..\n\n```\n[:status: 200, cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0, content-encoding: gzip, content-length: 10711, content-type: text/html;charset=utf-8, date: Sat, 15 Mar 2014 16:49:42 GMT, expires: Tue, 31 Mar 1981 05:00:00 GMT, last-modified: Sat, 15 Mar 2014 16:49:42 GMT, ms: S, pragma: no-cache, server: tfe, set-cookie: _twitter_sess=REDACTED; Path=/; Domain=.twitter.com; Secure; HTTPOnly\u0000guest_id=v1%3A139490218274927656; Domain=.twitter.com; Path=/; Expires=Mon, 14-Mar-2016 16:49:42 UTC, status: 200 OK, strict-transport-security: max-age=631138519, x-content-type-options: nosniff, x-frame-options: SAMEORIGIN, x-transaction: 0f31d7f58d0841c0, x-ua-compatible: IE=edge,chrome=1, x-xss-protection: 1; mode=block]\n```\n",
        "And here's for spdy 3\n\n```\n[:status: 200 OK, :version: HTTP/1.1, cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0, content-encoding: gzip, content-length: 11087, content-type: text/html;charset=utf-8, date: Sat, 15 Mar 2014 16:52:24 GMT, expires: Tue, 31 Mar 1981 05:00:00 GMT, last-modified: Sat, 15 Mar 2014 16:52:24 GMT, ms: S, pragma: no-cache, server: tfe, set-cookie: _twitter_sess=REDACTED; Path=/; Domain=.twitter.com; Secure; HTTPOnly\u0000guest_id=v1%3A139490234481338438; Domain=.twitter.com; Path=/; Expires=Mon, 14-Mar-2016 16:52:24 UTC, status: 200 OK, strict-transport-security: max-age=631138519, x-content-type-options: nosniff, x-frame-options: SAMEORIGIN, x-transaction: a7923cdb7585ddd1, x-ua-compatible: IE=edge,chrome=1, x-xss-protection: 1; mode=block]\n```\n",
        "in both cases, I'm running with the following JVM arg\n\n```\n-Xbootclasspath/p:/Users/adrian/.m2/repository/org/mortbay/jetty/npn/npn-boot/8.1.2.v20120308/npn-boot-8.1.2.v20120308.jar \n```\n",
        "now, I'll try running 10 times on the same connection..\n",
        "I ran the test case through our HPACK decoder and in all 6 responses decoded the \":status\" header. My initial guess is that your decoder is evicting it from the table early.\n",
        "I am reliably getting a missing `:status` error on the 6th attempt below:\n\n``` java\n  public static void main(String[] args) throws Exception {\n    OkHttpClient client = new OkHttpClient().setProtocols(Protocol.HTTP2_AND_HTTP_11);\n    URL url = new URL(\"https://twitter.com\");\n    for (int i = 0; i < 10; i++) {\n      HttpURLConnection connection = client.open(url);\n      connection.setRequestMethod(\"HEAD\");\n      int responseCode = connection.getResponseCode();\n      System.out.println(responseCode);\n    }\n  }\n```\n",
        "@jpinner I'll check into eviction.. good idea!\n",
        "For comparison, Twitter's HPACK decoder has the following table sizes and removals after processing each header set:\n\nCurrent Header Table Size: 1558\nCurrent Header Table Size: 2298\nCurrent Header Table Size: 2899\nCurrent Header Table Size: 3449\nCurrent Header Table Size: 3999\nREMOVING ENTRY\nRemoved :status: 200\nREMOVING ENTRY\nRemoved cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0\nREMOVING ENTRY\nRemoved content-encoding: gzip\nREMOVING ENTRY\nRemoved content-length: 10715\nREMOVING ENTRY\nRemoved content-type: text/html;charset=utf-8\nREMOVING ENTRY\nRemoved date: Sat, 15 Mar 2014 13:52:14 GMT\nREMOVING ENTRY\nRemoved expires: Tue, 31 Mar 1981 05:00:00 GMT\nREMOVING ENTRY\nRemoved last-modified: Sat, 15 Mar 2014 13:52:14 GMT\nCurrent Header Table Size: 4074\n\nSo while processing the 6th response, \":status\" is evicted from the table. If there is a bug in which entries the OkHttp decoder is evicting, it will not index the \":status\" header correctly to re-emit.\n",
        "@adriancole can you run similar debugging output where you print the header table size after each header set is processed and print out whenever an entry is evicted from the table\n",
        "OK here's the run\n\n```\nHeader table is 1506bytes\n200\n200\nHeader table is 2060bytes\nHeader table is 2614bytes\n200\n200\nHeader table is 3168bytes\n200\nHeader table is 3783bytes\nNeed to recover: 250byes to add set-cookie: _twitter_sess=REDACTED; Path=/; Domain=.twitter.com; Secure; HTTPOnly\ufffdguest_id=v1%3A139490419702518726; Domain=.twitter.com; Path=/; Expires=Mon, 14-Mar-2016 17:23:17 UTC\nEvicting :status: 200 which recovers 42bytes\nEvicting cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0 which recovers 107bytes\nEvicting content-length: 43303 which recovers 51bytes\nEvicting content-type: text/html;charset=utf-8 which recovers 67bytes\nNeed to recover: 44byes to add x-transaction: 02fad4a8c79c2e68\nEvicting date: Sat, 15 Mar 2014 17:23:16 GMT which recovers 65bytes\nHeader table is 4075bytes\n```\n\n``` diff\ndiff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java\nindex f125711..a409720 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java\n@@ -162,6 +162,7 @@ final class HpackDraft05 {\n       if (bytesToRecover > 0) {\n         // determine how many headers need to be evicted.\n         for (int j = headerTable.length - 1; j >= nextHeaderIndex && bytesToRecover > 0; j--) {\n+          System.err.printf(\"Evicting %s which recovers %sbytes%n\", headerTable[j], headerTable[j].hpackSize);\n           bytesToRecover -= headerTable[j].hpackSize;\n           headerTableByteCount -= headerTable[j].hpackSize;\n           headerCount--;\n@@ -204,6 +205,7 @@ final class HpackDraft05 {\n           }\n         }\n       }\n+      System.err.printf(\"Header table is %sbytes%n\", headerTableByteCount);\n     }\n\n     private void clearReferenceSet() {\n@@ -306,6 +308,9 @@ final class HpackDraft05 {\n\n       // Evict headers to the required length.\n       int bytesToRecover = (headerTableByteCount + delta) - maxHeaderTableByteCount;\n+      if (bytesToRecover > 0) {\n+        System.err.printf(\"Need to recover: %sbyes to add %s%n\", bytesToRecover, entry);\n+      }\n       int entriesEvicted = evictToRecoverBytes(bytesToRecover);\n\n       if (index == -1) {\n```\n",
        "@adriancole is that run against https://gist.github.com/swankjesse/9567930 ?\n",
        "I suspect one issue might be that we are not taking into account huffman when doing length calculations..\n",
        "doing header table size calculations I mean\n",
        "no I was running against twitter directly..  lemme try against that data.\n",
        "@jpinner \n\nHere's the output on that.\n\n```\nHeader table is 1558bytes\nHeader table is 2298bytes\nHeader table is 2899bytes\nHeader table is 3449bytes\n[:status: 200, cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0, content-encoding: gzip, content-length: 10715, content-type: text/html;charset=utf-8, date: Sat, 15 Mar 2014 13:52:14 GMT, expires: Tue, 31 Mar 1981 05:00:00 GMT, last-modified: Sat, 15 Mar 2014 13:52:14 GMT, ms: A, pragma: no-cache, server: tfe, set-cookie: _twitter_sess=BAh7CSIKZmxhc2hJQzonQWN0aW9uQ29udHJvbGxlcjo6Rmxhc2g6OkZsYXNo%250ASGFzaHsABjoKQHVzZWR7ADoHaWQiJWQ1YTFkOWM3Nzk0ZDQ1YjBiNjI3YTll%250AN2Y1MDk2ZjBmOgxjc3JmX2lkIiViYjllNDI1MWI3YWRmNjEyZjVkNjg0Yzg1%250ANDBlOThkNjoPY3JlYXRlZF9hdGwrCCmyA8ZEAQ%253D%253D--89231da03e8640f33b0e9757a465fe43e393adaa; Path=/; Domain=.twitter.com; Secure; HTTPOnly\u0000guest_id=v1%3A139489153488638631; Domain=.twitter.com; Path=/; Expires=Mon, 14-Mar-2016 13:52:14 UTC, status: 200 OK, strict-transport-security: max-age=631138519, x-content-type-options: nosniff, x-frame-options: SAMEORIGIN, x-transaction: 6858e08857742d51, x-ua-compatible: IE=edge,chrome=1, x-xss-protection: 1; mode=block]\n[:status: 200, cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0, content-encoding: gzip, content-type: text/html;charset=utf-8, expires: Tue, 31 Mar 1981 05:00:00 GMT, ms: A, pragma: no-cache, server: tfe, status: 200 OK, strict-transport-security: max-age=631138519, x-content-type-options: nosniff, x-frame-options: SAMEORIGIN, x-ua-compatible: IE=edge,chrome=1, x-xss-protection: 1; mode=block, content-length: 10712, date: Sat, 15 Mar 2014 13:52:15 GMT, last-modified: Sat, 15 Mar 2014 13:52:15 GMT, set-cookie: _twitter_sess=BAh7CToHaWQiJTNhNGY3ODkxYjVlYTM3YThhZjkyYTE0N2IwY2MwYTU1Igpm%250AbGFzaElDOidBY3Rpb25Db250cm9sbGVyOjpGbGFzaDo6Rmxhc2hIYXNoewAG%250AOgpAdXNlZHsAOg9jcmVhdGVkX2F0bCsIMLMDxkQBOgxjc3JmX2lkIiU2M2Mw%250AZTM5OTY4MmJjNmRlOGVmZGJlMTMxNDE2YTU5MQ%253D%253D--a9cda668f5cb1673fee586967633d5fab3bcda4e; Path=/; Domain=.twitter.com; Secure; HTTPOnly\u0000guest_id=v1%3A139489153515074887; Domain=.twitter.com; Path=/; Expires=Mon, 14-Mar-2016 13:52:15 UTC, x-transaction: dd6ba36a13733998]\n[:status: 200, cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0, content-encoding: gzip, content-type: text/html;charset=utf-8, expires: Tue, 31 Mar 1981 05:00:00 GMT, ms: A, pragma: no-cache, server: tfe, status: 200 OK, strict-transport-security: max-age=631138519, x-content-type-options: nosniff, x-frame-options: SAMEORIGIN, x-ua-compatible: IE=edge,chrome=1, x-xss-protection: 1; mode=block, date: Sat, 15 Mar 2014 13:52:15 GMT, last-modified: Sat, 15 Mar 2014 13:52:15 GMT, content-length: 10713, set-cookie: _twitter_sess=BAh7CSIKZmxhc2hJQzonQWN0aW9uQ29udHJvbGxlcjo6Rmxhc2g6OkZsYXNo%250ASGFzaHsABjoKQHVzZWR7ADoMY3NyZl9pZCIlYTgwZTk4NTQ4NTI3Y2ExMjU1%250ANjYxZWNjYWMxYWE5MmQ6B2lkIiVlZDJlOWI5ZDdiNDkyY2RhMWMxN2I5OGZi%250AMzAzZTljMjoPY3JlYXRlZF9hdGwrCKOzA8ZEAQ%253D%253D--4ca493dde00db627e9bd56df8385f1f638095263; Path=/; Domain=.twitter.com; Secure; HTTPOnly\u0000guest_id=v1%3A139489153526624262; Domain=.twitter.com; Path=/; Expires=Mon, 14-Mar-2016 13:52:15 UTC, x-transaction: 8b9ea5ea2d32b4d6]\n[:status: 200, cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0, content-encoding: gzip, content-type: text/html;charset=utf-8, expires: Tue, 31 Mar 1981 05:00:00 GMT, ms: A, pragma: no-cache, server: tfe, status: 200 OK, strict-transport-security: max-age=631138519, x-content-type-options: nosniff, x-frame-options: SAMEORIGIN, x-ua-compatible: IE=edge,chrome=1, x-xss-protection: 1; mode=block, content-length: 10712, date: Sat, 15 Mar 2014 13:52:15 GMT, last-modified: Sat, 15 Mar 2014 13:52:15 GMT, set-cookie: _twitter_sess=BAh7CToHaWQiJTA4YzQ1MjQ0NWUxNzJmNzZhMmE0NzczMGNmMmFlYjk2Igpm%250AbGFzaElDOidBY3Rpb25Db250cm9sbGVyOjpGbGFzaDo6Rmxhc2hIYXNoewAG%250AOgpAdXNlZHsAOg9jcmVhdGVkX2F0bCsIE7QDxkQBOgxjc3JmX2lkIiU1YTFh%250AYjVjYjYyZDFjM2MzNDk5MTM3ZDEzZWE1ZWE4OA%253D%253D--96cfd8839cc1d52aebbe8cdee39112c6c55d1046; Path=/; Domain=.twitter.com; Secure; HTTPOnly\u0000guest_id=v1%3A139489153537781783; Domain=.twitter.com; Path=/; Expires=Mon, 14-Mar-2016 13:52:15 UTC, x-transaction: 98d7571cd56f5857]\n[:status: 200, cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0, content-encoding: gzip, content-length: 10715, content-type: text/html;charset=utf-8, expires: Tue, 31 Mar 1981 05:00:00 GMT, ms: A, pragma: no-cache, server: tfe, status: 200 OK, strict-transport-security: max-age=631138519, x-content-type-options: nosniff, x-frame-options: SAMEORIGIN, x-ua-compatible: IE=edge,chrome=1, x-xss-protection: 1; mode=block, date: Sat, 15 Mar 2014 13:52:15 GMT, last-modified: Sat, 15 Mar 2014 13:52:15 GMT, set-cookie: _twitter_sess=BAh7CSIKZmxhc2hJQzonQWN0aW9uQ29udHJvbGxlcjo6Rmxhc2g6OkZsYXNo%250ASGFzaHsABjoKQHVzZWR7ADoMY3NyZl9pZCIlMDhmYzExMjI0MTZlZTI2YzRi%250ANGE5YzVkYzQzNTIyMzQ6B2lkIiUxNjZlMGMzODBhYTZkNmEwZjc0ZGVlMzZh%250AODhmZjNjODoPY3JlYXRlZF9hdGwrCNW0A8ZEAQ%253D%253D--9b417ea19bf43b2b505ddfb18eec866bbd7c6282; Path=/; Domain=.twitter.com; Secure; HTTPOnly\u0000guest_id=v1%3A139489153555868034; Domain=.twitter.com; Path=/; Expires=Mon, 14-Mar-2016 13:52:15 UTC, x-transaction: 7a85bfec974c4b90]\nHeader table is 3999bytes\nNeed to recover: 443byes to add set-cookie: _twitter_sess=BAh7CSIKZmxhc2hJQzonQWN0aW9uQ29udHJvbGxlcjo6Rmxhc2g6OkZsYXNo%250ASGFzaHsABjoKQHVzZWR7ADoHaWQiJWFmMzI3OTBkYzhmMTBmMzU1MTQ1NGJj%250ANmEwMTkwMzJmOg9jcmVhdGVkX2F0bCsIQrUDxkQBOgxjc3JmX2lkIiU1ZjAw%250ANjAxY2I3OTcxN2Q4OTcyN2I1ZWFmNjhkY2U2YQ%253D%253D--c2993aafa80007aee98055fb7a22d56a18f5d989; Path=/; Domain=.twitter.com; Secure; HTTPOnly\u0000guest_id=v1%3A139489153567956965; Domain=.twitter.com; Path=/; Expires=Mon, 14-Mar-2016 13:52:15 UTC\nEvicting :status: 200 which recovers 42bytes\nEvicting cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0 which recovers 107bytes\nEvicting content-encoding: gzip which recovers 52bytes\nEvicting content-length: 10715 which recovers 51bytes\nEvicting content-type: text/html;charset=utf-8 which recovers 67bytes\nEvicting date: Sat, 15 Mar 2014 13:52:14 GMT which recovers 65bytes\nEvicting expires: Tue, 31 Mar 1981 05:00:00 GMT which recovers 68bytes\nNeed to recover: 52byes to add x-transaction: 82612e2a36a5f04d\nEvicting last-modified: Sat, 15 Mar 2014 13:52:14 GMT which recovers 74bytes\nHeader table is 4074bytes\n[ms: A, pragma: no-cache, server: tfe, status: 200 OK, strict-transport-security: max-age=631138519, x-content-type-options: nosniff, x-frame-options: SAMEORIGIN, x-ua-compatible: IE=edge,chrome=1, x-xss-protection: 1; mode=block, date: Sat, 15 Mar 2014 13:52:15 GMT, last-modified: Sat, 15 Mar 2014 13:52:15 GMT, content-length: 10711, set-cookie: _twitter_sess=BAh7CSIKZmxhc2hJQzonQWN0aW9uQ29udHJvbGxlcjo6Rmxhc2g6OkZsYXNo%250ASGFzaHsABjoKQHVzZWR7ADoHaWQiJWFmMzI3OTBkYzhmMTBmMzU1MTQ1NGJj%250ANmEwMTkwMzJmOg9jcmVhdGVkX2F0bCsIQrUDxkQBOgxjc3JmX2lkIiU1ZjAw%250ANjAxY2I3OTcxN2Q4OTcyN2I1ZWFmNjhkY2U2YQ%253D%253D--c2993aafa80007aee98055fb7a22d56a18f5d989; Path=/; Domain=.twitter.com; Secure; HTTPOnly\u0000guest_id=v1%3A139489153567956965; Domain=.twitter.com; Path=/; Expires=Mon, 14-Mar-2016 13:52:15 UTC, x-transaction: 82612e2a36a5f04d]\n```\n",
        "scratch my suspicion about huffman lengths.  looks like we indeed should use the non-encoded lengths.  That's not to say there's no problem around huffman.\n\n```\n The lengths are measured on the non-encoded entry name and entry\n   value (for the case when a Huffman encoding is used to transmit\n   string values).\n```\n",
        "I have a loop running with 1000 streams against https://http2.iijplus.jp/push/test1  It is evicting in a way that isn't dropping status or causing errors.  That's again, not to say there's no bug here, just there's only a couple servers running http/2 :P\n",
        "I'll decode the opcodes for the last response to see what the encoder thinks is going on.\n",
        "The first opcode emits a new huffman-encoded Content-Length (10711) using incremental indexing (0x078321988b).\nThe second pair of opcodes emits \":status\" (at index 32) by toggeling it out of and back into the reference set (0xa0a0). \n",
        "@adriancole  -- btw the above happens before inserting set-cookie so nothing should have been evicted from the table yet.\n",
        "@adriancole @swankjesse \nI think I found the bug:\n\nhttps://github.com/square/okhttp/blob/master/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java#L246\n\nAt that line you toggle headers into and out of the reference set, but I think you are missing a call to emittedHeaders.add() if the header was added to the reference set.\n\nFrom http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-05#section-3.2.1 -- if the indexed entry is in the header table and not in the reference set, it is first emitted, then added to the reference set.\n",
        "actually we do emit the reference set already after toggling.  Needs a deeper look.\n",
        "While true that emitting at the line where toggle occurs works, the `:status` header is a added twice.\n\nlooks like the central area to look at is emitReferenceSet() vs readIndexedHeader where toggle occurs.\n\nGotta run, but hope this helps!\n",
        "I don't see where you emit after toggling -- line 189 calls read indexed header where the toggling occurs on line 246.\n\nThe header isn't added twice, what happens is that the encoder sees that we are about to evict a header that was in the header set but not emitted because it was already in the reference set. In order to make sure it gets emitted before evicting from the table, it indexes the header twice (once to remove it from the reference set which does not emit it, and then a second time to re-add it to the reference set which emits it immediately). Thus once the header is evicted from the table, it has already been emitted so we no longer need to track it.\n",
        "@adriancole to be more specific, it is important that the emission of the header happens immediately in case the header is evicted.\n\nAlso it looks like there is a second bug in emitRefernceSet() -- according to the spec, only headers in the reference set that have not already been emitted in this header block should emitted, not all headers in the reference set.\n",
        "@jpinner so I was talking about if I added emission where you mentioned, `emitReferenceSet()` would emit it a second time, so I think we are saying the same thing.  Thanks for clarifying the behavior as it seems to be the info I need to fix this!\n",
        "Happy to help. Shameless plug: you could always just use https://github.com/twitter/hpack (v0.5.2 for hpack-draft-05) ;)\n",
        "https://github.com/square/okhttp/pull/652\n",
        "Thanks @adriancole and @jpinner!\n"
    ],
    "393": [],
    "2276": [],
    "644": [
        "I need to figure out a clean, safe way to break the reader thread out.\n",
        "https://github.com/square/okhttp/pull/645\n",
        "Still needs to be done: close the socket and let the reader thread close up after itself.\n"
    ],
    "1251": [],
    "1874": [],
    "651": [
        "Still there. After a hundred or so runs:\n\n```\njava.net.SocketException: Connection reset\n    at java.net.SocketInputStream.read(SocketInputStream.java:196)\n    at java.net.SocketInputStream.read(SocketInputStream.java:122)\n    at okio.Okio$3.read(Okio.java:160)\n    at okio.RealBufferedSource.indexOf(RealBufferedSource.java:191)\n    at okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:138)\n    at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:179)\n    at com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:101)\n    at com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:600)\n    at com.squareup.okhttp.internal.http.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:384)\n    at com.squareup.okhttp.internal.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:331)\n    at com.squareup.okhttp.internal.http.HttpURLConnectionImpl.getInputStream(HttpURLConnectionImpl.java:199)\n    at com.squareup.okhttp.internal.http.URLConnectionTest.assertContent(URLConnectionTest.java:2898)\n    at com.squareup.okhttp.internal.http.URLConnectionTest.assertContent(URLConnectionTest.java:2902)\n    at com.squareup.okhttp.internal.http.URLConnectionTest.reusedConnectionFailsWithPost(URLConnectionTest.java:2534)\n    at com.squareup.okhttp.internal.http.URLConnectionTest.postFailsWithChunkedRequestForSmallRequest(URLConnectionTest.java:2499)\n    at com.squareup.okhttp.internal.http.URLConnectionTest.postFailsWithChunkedRequestForSmallRequest100x(URLConnectionTest.java:2493)\n```\n"
    ],
    "4652": [],
    "1057": [],
    "1625": [],
    "839": [],
    "1280": [],
    "666": [
        "Duplicate of https://github.com/square/okhttp/issues/647. Workaround the problem by adding this code to run early in your program:\n\n```\nOkHttpClient okHttpClient = new OkHttpClient();\nURL.setURLStreamHandlerFactory(okHttpClient);\n```\n\nIt's caused by mixing both AOSP's built-in HttpURLConnection and OkHttp in the same process. There's a bug in Android's TLS stack that fixes the problem, but that fix isn't widely available.\n",
        "We already have that workaround in, first line in Application's oncreate.\n",
        "Hey @kruton, @andaag is seeing a crash in `SSL_CTX_set_alpn_protos`. Is it unsafe for us to request ALPN before there's a public API for it?\n",
        "Hmm, maybe this is from using the same context on multiple threads?\n",
        "@kruton that should be supported. Is sharing an SSLContext between threads broken in 4.4?\n",
        "I meant calling `SSL_CTX_set_alpn_protos` from multiple threads simultaneously. These should all probably be using `SSL_set_alpn_protos` instead. Sigh.\n",
        "(OkHttp code calls `OpenSSLSocketImpl.setAlpnProtocols()`.)\n",
        "Yes, but the `startHandshake` code calls `SSL_CTX_set_alpn_protos` which does not look thread-safe at all.\n",
        "@kruton I'll open an AOSP bug?\n",
        "Sounds good.\n",
        "http://code.google.com/p/android/issues/detail?id=67940\n",
        "In the interim I'll disable ALPN...\n",
        "ALPN disabled. Still to do: cherry-pick to 1.5 branch and release that.\n",
        "Any update on merging this to the 1.5 branch?\n",
        "Will do this week.\n",
        "It's been 8 days and I still haven't cherry-picked. I was hoping to find a reproducible fix for another, unrelated issue, but that's not revealing itself.\n",
        "1.5.4 went out last night.\n"
    ],
    "4532": [],
    "2345": [],
    "1996": [],
    "675": [
        "I started looking into this. Seems relatively straightforward. We need to add some special support in HTTP/2, since the `100: Continue` comes back as a 2nd set of headers there.\r\nhttp://httpwg.org/specs/rfc7540.html#rfc.section.8.1.3",
        "Yup, this is very broken.\n"
    ],
    "1813": [],
    "2159": [],
    "948": [],
    "4737": [],
    "3803": [],
    "3527": [],
    "4417": [],
    "737": [],
    "40": [],
    "359": [],
    "560": [],
    "1070": [],
    "1112": [],
    "2571": [],
    "4665": [],
    "3500": [],
    "93": [],
    "1186": [],
    "2065": [],
    "390": [],
    "746": [
        "We're getting closer on this. One full-disk bug fixed in 2.3 is here:\nhttps://github.com/square/okhttp/issues/1211\n\nStill remaining is improving `rebuildJournal()` to work with an unwritable disk.\n",
        "There's really nothing particularly smart we can do when the cache directory is full. But whatever happens, it should be the cache's job, not the application's.\n"
    ],
    "2244": [],
    "751": [
        "This is still an issue in 2.4.0 RC.\n",
        "@1zaman can you provide a 0-length body? I don't want to conflate null with empty.\n",
        "@swankjesse: This update breaks my existing application which uses Volley and OkHttp, so I'm just reverting it for now. If you mean to enforce a body in POST requests, then this should be documented as a breaking change.\n",
        "I would call that pretty trivial actually.\n\nOn Tue, May 26, 2015 at 5:32 PM Derk-Jan Karrenbeld <\nnotifications@github.com> wrote:\n\n> It is not trivial to provide a zero length body with Retrofit;\n> \n> For anyone getting here with retrofit, you can use the @Body annotation.\n> \n> public interface MyService {\n>     @POST( \"yourpath\") R call( @Body String body )\n> }\n> \n> myServiceInstance.call( \"\" );\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/751#issuecomment-105703921.\n",
        "It is trivial to provide a zero length body with Retrofit;\n\nFor anyone getting here with retrofit, you can use the `@Body annotation`.\n\n``` Java\npublic interface MyService {\n    @POST( \"yourpath\") R call( @Body String body )\n}\n\nmyServiceInstance.call( \"\" );\n```\n",
        "Yeah; I wrote not hard and forgot to replace the not.\n",
        "@JakeWharton This is a crutch. If the server does not expect a parameter, it should not be.\n",
        "The RFC for HTTP requires it and you are using an OkHttp that is newer by\nnumerous months than Retrofit. It's unsurprising that it enforces stronger\nsemantics.\n\nOn Wed, May 27, 2015, 1:14 AM Aleksandr Beshkenadze <\nnotifications@github.com> wrote:\n\n> @JakeWharton https://github.com/JakeWharton This is a crutch. If the\n> server does not expect a parameter, it should not be.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/751#issuecomment-105813715.\n",
        "@JakeWharton How about this? http://stackoverflow.com/questions/4191593/is-it-considered-bad-practice-to-perform-http-post-without-entity-body\n",
        "The fact that servers accept non RFC requests is nothing new; I think explicitly sending an empty body isn't bad.\n",
        "I agree but empty is not the same as absent. Empty is allowed and not the\nproblem faced here. You have absent bodies that are no longer being allowed\nbecause they need coerced to empty in Retrofit.\n\nOn Wed, May 27, 2015, 1:44 AM Derk-Jan Karrenbeld notifications@github.com\nwrote:\n\n> The fact that servers accept non RFC requests is nothing new; I think\n> explicitly sending an empty body isn't bad.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/751#issuecomment-105826045.\n",
        "Can the default behaviour not be to empty an absent POST body? Convention over configuration wise?\n",
        "That's not what that phrase means. A POST per the HTTP spec needs the body.\n\nOn Wed, May 27, 2015, 6:58 PM Derk-Jan Karrenbeld notifications@github.com\nwrote:\n\n> Can the default behaviour not be to empty an absent POST body? Convention\n> over configuration wise?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/751#issuecomment-106023291.\n",
        "Yes, I understood that. So give it (in okhttp) an empty one if none was given, instead of raising an exception?\n\nI think it's good to require the body and raise the exception, but since it is a breaking change now, one could make it deprecated yadayadayada --\n",
        "Where from the HTTP standard is it obvious that POST requires a body? As I see it [RFC7320](https://tools.ietf.org/html/rfc7230) says on page 27:\n\n> The presence of a message body in a request is signaled by a\n>   Content-Length or Transfer-Encoding header field.  Request message\n>  framing is independent of method semantics, even if the method does\n>   not define any use for a message body.\n\nAnd later on on page 32 it specifies:\n\n> If this is a request message and none of the above are true, then the message body length is zero (no message body is present).\n\nI couldn't find an restrictions for any request type/verb. \n",
        "@slomo The best argument I can see for POSTs requiring a body comes not from [RFC 7320](https://tools.ietf.org/html/rfc7230) but from [RFC 7231](https://tools.ietf.org/html/rfc7231), where the POST method is defined. From the start of [section 4.3.3](https://tools.ietf.org/html/rfc7231#section-4.3.3):\n\n> The POST method requests that the target resource process **_the\n>    representation enclosed in the request**_ according to the resource's\n>    own specific semantics.\n\n(Emphasis is mine.)\n\nFrom all the prior discussion of \"representations\" and representations being \"enclosed\" in request payloads earlier in the RFC, it is reasonable to infer that \"the representation enclosed in the request\" refers to its body.\n\nSo we have language in the definition of POST that seems to take for granted (but doesn't explicitly state) that a POST request must contain an \"enclosed representation\", and a whole bunch of earlier remarks in the document that seem to take for granted (but don't explicitly state) that \"representations\" are always things that exist in the body of a request or response.\n\nPretty unsatisfying!\n\nMeanwhile, [back in RFC 7230](https://tools.ietf.org/html/rfc7230#section-3.3.2), there's this snippet:\n\n>    A user agent SHOULD send a Content-Length in a request message when\n>    no Transfer-Encoding is sent and the request method defines a meaning\n>    for an enclosed payload body.  For example, a Content-Length header\n>    field is normally sent in a POST request even when the value is 0\n>    (indicating an empty payload body).  A user agent SHOULD NOT send a\n>    Content-Length header field when the request message does not contain\n>    a payload body and the method semantics do not anticipate such a\n>    body.\n\nHere there's an explicit distinction being made between methods _like POST_ that define a meaning for the payload body, and others, like GET, that do not. In the former case, we're invited to think of sending request with no body as sending an \"empty\" body, and in the latter case we're invited to think of it as sending \"no\" body.\n\nOf course, as far as bytes over the wire goes an \"empty\" body and \"no\" body are the same thing anyway (unless I'm mistaken about something?), so I don't think I'd've made the decision that the square chaps have made to enforce explicitly passing an empty body in the cases where a body is semantically required. _(Shrugs.)_\n",
        "It's \"trivially easy\" to add a request body provided you're not using OkHttp under Retrofit, for example. I don't want to pollute my Retrofit API interface with a body parameter that's just going to confuse people using it. I tried to use an `Interceptor` on the `OkHttpClient` but apparently the check is done before the interceptor is invoked. That in itself seems odd. There seems to be a perfectly reasonable solution to what is a breaking change.\n",
        "What about `PUT`? Right now it requires a request body. Should it?\n",
        "You can add an empty body.\n",
        "We might fix this with code or by making it foolishly easy to get an empty post body.\n",
        "Incidentally `CallTest.postZeroLength` would fail, if it didn't send a `Content-Length: 0` header..  Can you verify that this is an issue on latest snapshot?\n\n``` java\n  @Test public void postZeroLength() throws Exception {\n    server.enqueue(new MockResponse().setBody(\"abc\"));\n    server.play();\n\n    Request request = new Request.Builder()\n        .url(server.getUrl(\"/\"))\n        .method(\"POST\", null)\n        .build();\n\n    executeSynchronously(request)\n        .assertCode(200)\n        .assertBody(\"abc\");\n\n    RecordedRequest recordedRequest = server.takeRequest();\n    assertEquals(\"POST\", recordedRequest.getMethod());\n    assertEquals(0, recordedRequest.getBody().length);\n    assertEquals(\"0\", recordedRequest.getHeader(\"Content-Length\"));\n    assertEquals(null, recordedRequest.getHeader(\"Content-Type\"));\n  }\n```\n",
        "closing for now, as I think this is no longer current.\n"
    ],
    "78": [],
    "577": [],
    "768": [
        "We don't guarantee delivery order for calls into the push observer. Two push events received from the network A, then B could be delivered to the application layer as B then A.\n\nOne simple solution is to use a single thread to deliver such events. (Though that may be a bottleneck)\n",
        "starting this now. thx for the tips.\n",
        "I think we do need to enforce order, especially as data frames are chunks.  Let's start with a single-threaded executor, and see how it goes.\n"
    ],
    "650": [],
    "84": [],
    "585": [],
    "2588": [],
    "2767": [],
    "789": [
        "looking at this now\n",
        "Still getting these exceptions after running `mvn clean test` with the latest code.\n\n```\nCallTest.canceledBeforeResponseReadSignalsOnFailure_HTTP_2:945->canceledBeforeResponseReadSignalsOnFailure:940 expected:<[Canceled]> but was:<[stream was reset: CANCEL]>\nCallTest.canceledBeforeResponseReadSignalsOnFailure_SPDY_3:950->canceledBeforeResponseReadSignalsOnFailure:940 expected:<[Canceled]> but was:<[stream was reset: CANCEL]>\nCallTest.canceledBeforeResponseReadSignalsOnFailure:940 expected:<[Cancel]ed> but was:<[Socket clos]ed>\n```\n",
        "I'm also receiving the same exceptions as @mkurutin.\n"
    ],
    "2355": [],
    "3038": [],
    "800": [
        "This is caused by OkHttpClientTest, which runs before it and clears the system proxy selector.\n\n```\nTests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.088 sec - in com.squareup.okhttp.OkHttpClientTest\nRunning com.squareup.okhttp.CacheTest\nTests run: 115, Failures: 0, Errors: 111, Skipped: 0, Time elapsed: 0.33 sec <<< FAILURE! - in com.squareup.okhttp.CacheTest\nconditionalHitUpdatesCache(com.squareup.okhttp.CacheTest)  Time elapsed: 0.018 sec  <<< ERROR!\njava.lang.NullPointerException: null\n```\n\n```\npublic final class OkHttpClientTest {\n  @After public void tearDown() throws Exception {\n    ProxySelector.setDefault(null);\n    CookieManager.setDefault(null);\n    ResponseCache.setDefault(null);\n    Authenticator.setDefault(null);\n  }\n```\n"
    ],
    "1683": [],
    "4101": [],
    "1334": [],
    "810": [
        "Grab the latest source from GitHub? I think this was recently fixed.\n",
        "Thanks for reply, swankjesse \n\nIf you talking about 1.5.4 i think it does not.\n",
        "You can check this url: budist.ru/user/1002/avatar/200\n",
        "Confirmed with a test. Fix coming.\n",
        "https://github.com/square/okhttp/pull/847\n"
    ],
    "815": [
        "Yup, we should do this. I'm not exactly sure how we should expose it in the API.\n",
        "Looking at the current API, configuration details seem to be exposed as OkHttpClient methods, like setFollowProtocolRedirects(), setReadTimeout(), etc., so I thought of a method, like setUseModernSSLOnly() in the client class. It would be very easy for the application to be configured like this.\n",
        "See also https://github.com/square/okhttp/issues/83\n",
        "I think we'll want to do something similar to `Protocol`: introduce a type like TlsVersion with values like `TLS_1_2` and `SSL_3_0` and let the application specify the list of versions they want OkHttp to attempt.\n",
        "Related: https://github.com/square/okhttp/issues/1058\n",
        "I think we want something like this:\n\n```\nenum TransportLayer {\n  TLS_1_2,\n  TLS_1_1,\n  TLS_1_0,\n  SSL_3_0,\n  CLEARTEXT\n}\n```\n\nSimilar to `Protocol`, we let the application layer pick which transport layers they would like to enable. We can potentially make `CLEARTEXT` opt-in in some distant-future release.\n",
        "interesting side notes, noting that in some ways these are tied together.\n\n[h2c](https://tools.ietf.org/html/draft-ietf-httpbis-http2-14#section-3.1) is a protocol value (we haven't yet added) for http/2 over clear-text.\n[TLS 1.2 is required](https://tools.ietf.org/html/draft-ietf-httpbis-http2-14#section-9.2) for encrypted http/2 \n",
        "I've got a plan... with https://github.com/square/okhttp/issues/1087 I added a new type, `TlsConfiguration`. I'm going to change this to be more general, `ConnectionConfiguration` and it's going to be responsible for defining everything about the socket that we layer HTTP on top of. This includes socket factories, hostname verifiers, certificate pinners, NPN prototocols, and possibly also the proxy server.\n\nYou'll be able to specify multiple `ConnectionConfigurations`, and `RoutePlanner` will attempt each in order, as it does today with TLS modes.\n\nWe'll offer 3 default ConnectionConfigurations:\n- MODERN_TLS\n- COMPATIBLE_TLS\n- CLEARTEXT\n\nThe `RoutePlanner` will use a `TLS` configuration for `https:` requests, and `CLEARTEXT` for `http:` requests. If you want to disable TLS fallback, configure your client to use `[MODERN_TLS, CLEARTEXT]`. Going further, to disable TLS fallback and cleartext connections, use `[MODERN_TLS]` only. This leads the way to later defaulting to `[MODERN_TLS]` and making fallback & cleartext opt-in.\n\nIt also gives me a place to drop in opportunistic TLS (crypto for `http:` schemes) if/when we add that.\n",
        "FYI @klyubin.\n"
    ],
    "4408": [],
    "1571": [],
    "4124": [],
    "1116": [],
    "821": [
        "Yup, that's a problem.\n",
        "Proposed fix includes 3 commits: https://github.com/square/okhttp/pull/823\nTravis build hanged for some other reason.\n",
        "I almost always hard set the url given to 127.0.0.1: + MWS.getPort(). Is\nthere a problem with this approach besides TLS stuff?\n",
        "yeah... I don't know. I just like your project, guys. I've checked out the latest code, ran the tests and got this issue. After that I've spent about an hour trying to figure out what's wrong with this test and why it doesn't work for me out of box.\nThen I decided to open this issue, hopefully fixing it might save somebody else's time.\n",
        "fixed in #826.\n"
    ],
    "2765": [],
    "831": [
        "How to add If-None-Match on okhttp ?\n",
        "@crossle sounds like a question for stack overflow.\n",
        "@swankjesse  okhttp auto support If-None-Match and ETag? @swankjesse  http://stackoverflow.com/questions/27751634/okhttp-add-etag-and-if-none-match\n",
        "I'll reference my question here\n#1278\n",
        "The server return a ETag, but retrofit full log not show ETag header, use curl -I print `ETag`, why?\nwait retrofit new release version.\n",
        "@swankjesse  if server return  `cache-control: max-age=0, private, must-revalidate`, okhttp will cache or not?\n",
        "It will cache, but it has to make a request back to the server when you\naccess to determine whether the resource is stale or not. If it is not\nstale the server will return a 304 Not Modified and the cached value will\nbe used.\nOn Jan 5, 2015 1:18 AM, \"Crossle Song\" notifications@github.com wrote:\n\n> @swankjesse https://github.com/swankjesse if server return cache-control:\n> max-age=0, private, must-revalidate, okhttp will cache or not?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/831#issuecomment-68683879.\n",
        "@JakeWharton, could you please give us some more information about tying together OkHttp Inteceptors with Retrofit? @swankjesse have mentioned downloading a pre-release snapshot and said a release that supports that is planned to be released soon. When can we expect it?\n",
        "We don't give ETAs. It could be anywhere from tomorrow up to 4-6 weeks.\nWhen I find the time to completely test that it's working.\nOn Jan 5, 2015 1:34 AM, \"AAverin\" notifications@github.com wrote:\n\n> @JakeWharton https://github.com/JakeWharton, could you please give us\n> some more information about tying together OkHttp Inteceptors with\n> Retrofit? @swankjesse https://github.com/swankjesse have mentioned\n> downloading a pre-release snapshot and said a release that supports that is\n> planned to be released soon. When can we expect it?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/831#issuecomment-68685313.\n",
        "I see, thanks.\nThat pre-release snapshot, where can I get one? Should I just grab the sources and build them myself?\n",
        "Yup, building it yourself works.\n",
        "Because Retrofit only sees the 200. OkHttp sees the 304.\nOn Jan 5, 2015 6:24 PM, \"Crossle Song\" notifications@github.com wrote:\n\n> I test use curl, return add -H 'If-None-Match:\n> \"17b6637079897a93673bc4badd3e6f84\"' return 304, but okhttp:2.1.0\n> retrofit:1.8.0, not return 304, retrofit log still 200.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/831#issuecomment-68817139.\n",
        "I test use `curl`, add `-H 'If-None-Match: \"17b6637079897a93673bc4badd3e6f84\"'` return 304, but okhttp:2.1.0 retrofit:1.8.0, not return 304, retrofit log still 200.\n",
        "@JakeWharton  Thank you!\n",
        "Bad news, I used retrofit 1.9, okhttp 2.2, use intercepter log, no `ETag` log, but curl have `ETag`\n",
        "Did you use `interceptors()` or `networkInterceptors()`?\n",
        "use `interceptors()`\n",
        "That is above the cache, you'll always get 200s.\n",
        "See: https://github.com/square/okhttp/wiki/Interceptors\n",
        "Hey @JakeWharton.\nI've been using networkInteceptors for the same purpose, to check if everything is correct in headers.\nStill no If-None-Match present.\nYou can find log examples in this SO question: http://stackoverflow.com/questions/27561992/retrofit-etag-and-caching/27758584\n",
        "Try networkInteceptors, same problem.\n",
        "@JakeWharton How about this? same problem use networkInteceptors, no ETag.\n",
        "Guys, any update on this matter?\nMy projects are kinda stuck because if Etag not working properly.\nShould I just go and do a manual implementation by manually passing Etag/If-None-Match headers and building a cache?\n",
        "Can you paste the network interceptors log for two calls to the same URL, with a cache installed? I wanna read the headers myself!\n",
        "====== clean install, initial request =======\n\n```\nSending request http://demo.***.com/api/v1/download/map-manifest on Connection{demo.***.com:80, proxy=DIRECT@ hostAddress=*** cipherSuite=none protocol=http/1.1}\nAccept: application/json;\nHost: demo.***.com\nConnection: Keep-Alive\nAccept-Encoding: gzip\nUser-Agent: okhttp/2.2.0\n\nReceived response for http://demo.***.com/api/v1/download/map-manifest in 935.1ms\nDate: Sun, 18 Jan 2015 09:38:29 GMT\nServer: Apache\nX-Powered-By: PHP/5.4.31\nAccess-Control-Allow-Credentials: true\nPragma:\nCache-Control: public, max-age=3600\nX-Frame-Options: SAMEORIGIN\nEtag: \"hLxLRYztkinJAB453nRV7ncBSuU=-gzip\"\nLast-Modified: Wed, 24 Dec 2014 13:09:04 GMT\nVary: Accept-Encoding\nContent-Encoding: gzip\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nTransfer-Encoding: chunked\nContent-Type: application/json; charset=UTF-8\nOkHttp-Selected-Protocol: http/1.1\nOkHttp-Sent-Millis: 1421573831462\nOkHttp-Received-Millis: 1421573832397\n```\n\n====== same app instance, second request =======\n\n```\nSending request http://demo.***.com/api/v1/download/map-manifest on Connection{demo.***.com:80, proxy=DIRECT@ hostAddress=*** cipherSuite=none protocol=http/1.1}\nAccept: application/json;\nHost: demo.***.com\nConnection: Keep-Alive\nAccept-Encoding: gzip\nUser-Agent: okhttp/2.2.0\n\nReceived response for http://demo.***.com/api/v1/download/map-manifest in 438.8ms\nDate: Sun, 18 Jan 2015 09:39:54 GMT\nServer: Apache\nX-Powered-By: PHP/5.4.31\nAccess-Control-Allow-Credentials: true\nPragma:\nCache-Control: public, max-age=3600\nX-Frame-Options: SAMEORIGIN\nEtag: \"hLxLRYztkinJAB453nRV7ncBSuU=-gzip\"\nLast-Modified: Wed, 24 Dec 2014 13:09:04 GMT\nVary: Accept-Encoding\nContent-Encoding: gzip\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nTransfer-Encoding: chunked\nContent-Type: application/json; charset=UTF-8\nOkHttp-Selected-Protocol: http/1.1\nOkHttp-Sent-Millis: 1421573916400\nOkHttp-Received-Millis: 1421573916839\n```\n\n====== application restart, first request =======\n\n```\nSending request http://demo.***.com/api/v1/download/map-manifest on Connection{demo.***.com:80, proxy=DIRECT@ hostAddress=*** cipherSuite=none protocol=http/1.1}\nAccept: application/json;\nHost: demo.***.com\nConnection: Keep-Alive\nAccept-Encoding: gzip\nUser-Agent: okhttp/2.2.0\n\nReceived response for http://demo.***.com/api/v1/download/map-manifest in 439.9ms\nDate: Sun, 18 Jan 2015 09:40:58 GMT\nServer: Apache\nX-Powered-By: PHP/5.4.31\nAccess-Control-Allow-Credentials: true\nPragma:\nCache-Control: public, max-age=3600\nX-Frame-Options: SAMEORIGIN\nEtag: \"hLxLRYztkinJAB453nRV7ncBSuU=-gzip\"\nLast-Modified: Wed, 24 Dec 2014 13:09:04 GMT\nVary: Accept-Encoding\nContent-Encoding: gzip\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nTransfer-Encoding: chunked\nContent-Type: application/json; charset=UTF-8\nOkHttp-Selected-Protocol: http/1.1\nOkHttp-Sent-Millis: 1421573980104\nOkHttp-Received-Millis: 1421573980543\n```\n",
        "I will give example from a different server that doesn't gzip once I make sure it really works manually. Asked a server dev to check everything.\n\nThe example provided works manually and sends 304 with\nEtag: \"hLxLRYztkinJAB453nRV7ncBSuU=\"\n",
        "Same problem.\n",
        "When you read the response, are you calling close() when you're done?\n",
        "Where should I call it? Isn't retrofit responsible on this stuff?\nIn the retrofit Callback I get a Json-based model that is parsed by Jackson.\nJacksonConverter implements Converter and overrides methods fromBody and toBody.\nSo I don't interact and parse response manually.\n",
        "Any other ideas, guys? I need this Etag working finally.\n",
        "Put a breakpoint in the `close()` method inside of `HttpEngine.cacheWritingResponse()`. If that gets called, you're committing the response to the cache. If it doesn't, you need to make sure that it gets called. Possibly by fixing your `JacksonConverter` to call `close()`.\n",
        "You keep mentioning this 'close()' method, but I don't get which class it this method from and where should I call it.\n\nHttpEngine.cacheWritingResponse() - that's probably in okHttp source, I don't yet have it added to the project as a source, so if nothing will work - I'll try this out.\n\nHere's my JacksonConverter implementation:\nhttps://github.com/AAverin/android-skeleton-project/blob/master/app/src/main/java/pro/anton/averin/android/skeleton/data/net/json/JacksonConverter.java\n\nI'll try closing TypedInput.in(), just in case this is the correct thing to do, but basically implementation was grabbed from here: http://kdubblabs.com/java/retrofit-by-square/retrofit-using-jackson-json-conversion/\nAnd there is a very similar implementation here too, that also doesn't call any close() methods:\nhttps://github.com/square/retrofit/blob/master/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java\n",
        "The Jackson converter was contributed. I'll note the Gson converter does\nthe right thing!\n\nOn Wed Jan 28 2015 at 1:41:31 PM AAverin notifications@github.com wrote:\n\n> You keep mentioning this 'close()' method, but I don't get which class it\n> this method from and where should I call it.\n> \n> HttpEngine.cacheWritingResponse() - that's probably in okHttp source, I\n> don't yet have it added to the project as a source, so if nothing will work\n> - I'll try this out.\n> \n> Here's my JacksonConverter implementation:\n> \n> https://github.com/AAverin/android-skeleton-project/blob/master/app/src/main/java/pro/anton/averin/android/skeleton/data/net/json/JacksonConverter.java\n> \n> I'll try closing TypedInput.in(), just in case this is the correct thing\n> to do, but basically implementation was grabbed from here:\n> http://kdubblabs.com/java/retrofit-by-square/retrofit-using-jackson-json-conversion/\n> And there is a very similar implementation here too, that also doesn't\n> call any close() methods:\n> \n> https://github.com/square/retrofit/blob/master/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/831#issuecomment-71922149.\n",
        "Thanks, Jake.\nGsonConverter uses InputStreamReader and it calls isr.close() in finally. That probably results in close() called on the inputstream itself.\nI'll try this in my JacksonConverter to see if it resolves the issue.\n",
        "Yes. Per its documentation it always calls close on the underlying reader.\n\nOn Wed Jan 28 2015 at 1:47:27 PM AAverin notifications@github.com wrote:\n\n> Thanks, Jake.\n> GsonConverter uses InputStreamReader and it calls isr.close() in finally.\n> That probably results in close() called on the inputstream itself.\n> I'll try this in my JacksonConverter to see if it resolves the issue.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/831#issuecomment-71923257.\n",
        "Looks like closing TypedInput.in() doesn't resolve the issue. At least I still don't see 'If-None-Match' header being sent with a request by OkHttp.\nHere's the updated JacksonConverter code:\n\n```\npublic class JacksonConverter implements Converter {\n\n    private final ObjectMapper objectMapper;\n\n    public JacksonConverter(ObjectMapper mapper) {\n        this.objectMapper = mapper;\n    }\n\n    @Override\n    public Object fromBody(TypedInput typedInput, Type type) throws ConversionException {\n        JavaType javaType = objectMapper.getTypeFactory().constructType(type);\n\n        try {\n            InputStream in = typedInput.in();\n            try {\n                return objectMapper.readValue(in, javaType);\n            } finally {\n                if (in != null) {\n                    in.close();\n                }\n            }\n        } catch (IOException e) {\n            throw new ConversionException(e);\n        }\n    }\n\n    @Override\n    public TypedOutput toBody(Object o) {\n        try {\n            return new JsonTypedOutput(objectMapper.writeValueAsString(o).getBytes(\"UTF-8\"));\n        } catch (IOException e) {\n            throw new AssertionError(e);\n        }\n    }\n}\n```\n",
        "@AAverin can you share the URL that's impacted? I'd like to figure out if this is OkHttp misbehaving, your server, or something else. If you don't want to share it here, I'm jesse at swank.ca.\n",
        "When passing If-None-Match manually to my server - everything works correctly.\nYou can use this link for testing:\nhttp://widget-test.myrentacar.me/api/cities/133/places?key=antonaverin&signature=7d07b01b6c09e676cc59a4f2f0ae499e\n",
        "Looks like the bug is we're sending both `If-Modified-Since` and `If-None-Match`, and that's causing a problem. I'm going to fix this in OkHttp to send only `If-None-Match` if both conditions are possible.\n",
        "Great, thanks.\nAlthough I didn't see these headers in logs when set up as networkInterceptor()\nAnyways, if there is any more information I can provide with my setup - feel free to ask.\n",
        "When release include this issue fix?\n",
        "February.\n",
        "@swankjesse  When release include this issue fix?\n",
        "The plan is to do 2.3 in March, but no promises.\n",
        "Maybe publish 2.2.1?\n",
        "You can use 2.3.0-SNAPSHOT for now.\nOn Mar 2, 2015 5:09 AM, \"Crossle Song\" notifications@github.com wrote:\n\n> Maybe publish 2.2.1?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/831#issuecomment-76708688.\n",
        "What happens if you add this header to your server's response:\n\n```\nVary: Session\n```\n\nMy guess is that OkHttp will do the right thing if it knows the response content changes with the `Session` request header.\n",
        "Got a similar issue.\nBasically my take is that I don't see 'If-None-Match' header set for request at all.\n\nIf I do a manual ETag implementation, saving eTag to preferences cache and adding it as a header to every appropriate request - I get 304 from the server (and Retrofit throws a RetrofitError, not thinking it as a successful response, btw). Looks like a somewhat correct behavior.\n\nWith Cache set as in example, I see that Retrofit is hitting CONDITIONAL CACHE 200, but I don't see \"If-None-Match\" set to my request in logs, and with the time it takes for request, I assume that even though Retorift hits the cache, it still did a full request to the server, and server had responded not with 304, but with full set of data - it takes too long.\nWith Cache enabled, I expect request to return right away with no delays, yielding cached results.\n\nHow can I be sure that 'If-None-Match' header is correctly set? Shouldn't it be displayed in logs when setLogLevel(RestAdapter.LogLevel.FULL) is set?\n",
        "Actually `Vary` header helped for me\u2014exactly like Jesse said.\n",
        "I don't use Session header at all and doubt our server uses it too.\nI know for sure that server supports \"If-None-Match\" technique.\nAnd I don't really have much control over the server too...\n"
    ],
    "2299": [],
    "493": [],
    "2071": [],
    "2726": [],
    "1185": [],
    "3315": [],
    "853": [
        "Facing exactly the same issue here. I have to force the URL not to be cached at all with Cache-Control: no-store. Is this work in progress? :)\n",
        "Actually, it looks like Cache-Control: no-store in the request header is not implemented. \n\nQuote from RFC: \"If sent in a request, a cache MUST NOT store any part of either this request or any response to it.\"\n\nSource: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.2\n",
        "@andrejvanderzee we fixed that in 2.1.\n",
        "Yes thanks confirmed, it is working in 2.1 :)\n\nThe milestone for invalidating cached URLs changed to 2.2. Will this be in 2014?\n",
        "@andrejvanderzee invaliding a specific URL is pretty easy, but what I think most developers will want is a mechanism to invalidate a full URL pattern, like `/account/*`. What's your preference?\n",
        "At this moment I need a specific URL path. For example, suppose I open a screen with text messages with my user ID with the following URL:\n\n@GET(/messages/user/{userId}\")\nMessages getMessages(@Path(\"userId\") int userId);\n\nThen I post a message, leave the screen and come back before Cache-Control expires. In that case, I will be served the cache and my own message is not included.\n\nOne awkward point is indeed that I have to reconstruct the URL with the user id myself. It would be nice to have an easy way to re-construct the URL from the annotated getMessages(), providing just the userId. It is awkward to keep the syntax of the URL in two places.\n\nAt this moment I cannot see any use for regular expressions. But I am sure there will be occasions!\n",
        "> It would be nice to have an easy way to re-construct the URL from the annotated getMessages(), providing just the userId\n\nNote that this is not OkHttp's problem. It only knows URLs.\n",
        "Yes indeed, its Retrofit. \n\nNevertheless, invalidating exact URLs would be a good solution. \n",
        "> what I think most developers will want is a mechanism to invalidate a full URL pattern, like /account/*\n\nWe are interested by URL pattern invalidation. I think pagination might be a good example where you want invalidate all page URLs at once. \nFor example if an user is searching and joining individual events (`/events/1`), it would be nice to invalidate its own events list (`/users/1/events?page=1`, `/users/1/events?page=2`). with an invalidation pattern like `/users/1/events*`\n",
        "Hello,\n\nis invalidating a specific cached URL possible now?\n",
        "@alican yep. Use the iterator to iterate the URLs in the cache, then call `remove()` when you see a URL you don\u2019t want anymore.\n",
        "Thank you Jesse for your answer :)\nHave you an example code how to do this with retrofit? \nI looked in the javadocs and didint see how do get the URLs from inside an android activity.\n",
        "@swankjesse or @niqo01 Do either of you have a gist of how to do URL pattern invalidation for cache eviction? Like suggested in the [previous comment](https://github.com/square/okhttp/issues/853#issuecomment-65845182).",
        "Yup, we should offer this. Not sure what the API will look like yet.\n",
        "We probably need a mechanism to enumerate the cache.\n"
    ],
    "4272": [],
    "1999": [],
    "3858": [],
    "2783": [],
    "880": [
        "Thanks, Jesse and Jake!\n"
    ],
    "533": [],
    "594": [],
    "4141": [],
    "891": [
        "Punting to the icebox until somebody complains!\n",
        "Android use the below method in com.android.internal.os.RuntimeInit to set default UA, and okhttp-urlconnection direct use the UA as default http head without encode it. \n\n``` java\n    /**\n     * Returns an HTTP user agent of the form\n     * \"Dalvik/1.1.0 (Linux; U; Android Eclair Build/MASTER)\".\n     */\n    private static String getDefaultUserAgent() {\n        StringBuilder result = new StringBuilder(64);\n        result.append(\"Dalvik/\");\n        result.append(System.getProperty(\"java.vm.version\")); // such as 1.1.0\n        result.append(\" (Linux; U; Android \");\n\n        String version = Build.VERSION.RELEASE; // \"1.0\" or \"3.4b5\"\n        result.append(version.length() > 0 ? version : \"1.0\");\n\n        // add the model for the release build\n        if (\"REL\".equals(Build.VERSION.CODENAME)) {\n            String model = Build.MODEL;\n            if (model.length() > 0) {\n                result.append(\"; \");\n                result.append(model);\n            }\n        }\n        String id = Build.ID; // \"MASTER\" or \"M4-rc20\"\n        if (id.length() > 0) {\n            result.append(\" Build/\");\n            result.append(id);\n        }\n        result.append(\")\");\n        return result.toString();\n    }\n```\n\nAs an result, when I use okhttp-urlconnection in my apk, my server recevied the below request from an device with non-ASCII MODEL, which is invalid.\n\n![Model with non-ASCII char](https://cloud.githubusercontent.com/assets/1819074/8028576/47bf0c38-0de3-11e5-9c7b-ed93933ed693.png)\n",
        "@swankjesse \n",
        "Yep, we should sanitize the User-Agent.\n",
        "Working plan: throw an exception on non-ASCII headers in `Headers.Builder`.\n",
        "[The spec](http://tools.ietf.org/html/rfc7230#section-3.2.4) wants ISO-8859-1 for header values.\n\n```\n   Historically, HTTP has allowed field content with text in the\n   ISO-8859-1 charset [ISO-8859-1], supporting other charsets only\n   through use of [RFC2047] encoding.  In practice, most HTTP header\n   field values use only a subset of the US-ASCII charset [USASCII].\n   Newly defined header fields SHOULD limit their field values to\n   US-ASCII octets.  A recipient SHOULD treat other octets in field\n   content (obs-text) as opaque data.\n```\n"
    ],
    "1246": [],
    "817": [],
    "1322": [],
    "899": [
        "@lexer can you fill out our CLA? It's pretty reasonable!\nhttps://github.com/square/okhttp/blob/master/CONTRIBUTING.md\n"
    ],
    "38": [],
    "4396": [],
    "1641": [],
    "1863": [],
    "2215": [],
    "912": [
        "I'm not holding on to the call instances, so I'd need something that I can check in the callback. I'm cancelling calls based on their tags. Maybe `Request.isCanceled()`, although I guess that's not quite right. What would also work is have a specific subclass of IOException to catch so that I don't have to do this:\n\n```\npublic void onFailure(Request request, Throwable throwable) {\n                if (throwable instanceof IOException && \"Canceled\".equals(throwable.getMessage())) {\n                    return;\n                }\n}\n```\n"
    ],
    "1774": [],
    "287": [],
    "2101": [],
    "930": [
        "Yeah, we should definitely confirm that 307s work exactly as they're specified to.\n",
        "Hope these rfc2616 links (https://github.com/square/okhttp/search?q=rfc2616&type=Code&utf8=%E2%9C%93) will be replaced with RFC723X too. \n",
        "Looks like `CacheInterceptor#isEndToEnd` didn\u2019t make it into RFC 7234. Probably worth changing behavior here.",
        "related https://github.com/square/okhttp/pull/4270"
    ],
    "931": [
        "Passing now.\n"
    ],
    "933": [
        "My guess is it's a flow control bug. Thanks for reporting this. We'll investigate ASAP.\n",
        "@swankjesse thank you!\n"
    ],
    "1555": [],
    "1393": [],
    "938": [
        "(I don't believe there are any negative effects of this, other than it is inconsistent with our concurrency model which states that we don't ever simultaneously lock a connection and a stream.)\n"
    ],
    "314": [],
    "1606": [],
    "943": [
        "OkHttp v2.0.0 doesn't have the setFollowRedirects method on the OkHttpClient class. Will it be available in the next release? I'm using Retrofit and I don't want requests to follow redirects. OkHttpClient should be able to handle it.\n",
        "It will be in the next release. There's not currently a timeline for it though. Reasonable expectation is anywhere from two to six weeks.\n",
        "It is about 6 weeks from last comment, hence taking the liberty to bump this.\n\nIs it possible to make an intermediate release with this fixed? The 2.1 milestone seems far away (from the Github progress bar).\n\nAlternatively, if I use the older 1.x release what would I lose, apart from the shiny APIs?\n",
        "Looks like the master branch already contains the API for `setFollowRedirects`. I was able to build from master and it works great.\n",
        "Sorry for the delay. We're looking at getting this out very soon.\n"
    ],
    "947": [
        "Yikes. Thanks for reporting this.\n",
        "In case you're curious, in OkHttp 2 we added new properties `networkResponse` and `cacheResponse` to the  main Response class. This intends to make it clear where the returned response comes from. Unfortunately we weren't using the network response's headers, which is what Vary wants.\n",
        "@swankjesse I'm glad I was able to help: thanks a lot for the quick fix!\n"
    ],
    "720": [],
    "956": [
        "Yeah, I think this is good. Does making OkHttpClient non-final Just Work ?\n",
        "Yep also :) I did not want to suggest this as I thought it was a design decision to not let third-party classes extend OkHttpClient.\n",
        "Has this not been released yet? I'm looking at 2.0.0 and OkHttpClient is still final.\n\nAre there other means to stub out this class? How do you guys feel about a test specific implementation which can be configured to return response fixtures for a given route? That way contracts can't be violated by the client developer who otherwise has to make assumptions about how OkHttpClient works (I'm thinking about the \"don't mock what you don't own\" principle.)\n",
        "> Has this not been released yet?\n\nYes. (It has not been released)\n\n> Are there other means to stub out this class? \n\nFor now you can use `MockWebServer` to make requests to a local server that plays back response scripts.\n\nI've suggested a `MockOkHttpClient` which is of a similar concept but inside the client rather than as a server. We haven't explored it yet.\n",
        "I've filed https://github.com/square/okhttp/issues/1096 for the exploration.\n",
        "Thanks Jake. I had looked at the OkHttp tests meanwhile and found out about\nMockWebServer. It works well for me, although I agree there is merit in\nhaving a mock (or fake perhaps) that operates on the same level as the\ndependency (in this case, the client.) It just seems more natural when\nwriting unit tests (and not integration tests)\n"
    ],
    "1629": [],
    "960": [
        "I do that:\n\n```\n        @Override\n        public Request authenticate(Proxy arg0, Response response) throws IOException {\n            String auth = ...;\n            if (auth.equals(arg1.request().header(\"Authorization\"))) {\n                return null;\n            }\n            return response.request().newBuilder().header(\"Authorization\", auth).build();\n        }\n```\n\nBecause a/ I don't want to call 20 times the server with the same authentication header if it is wrong and b/ the 20 requests limit results in a `ProtocolException`,  instead of a 401 status.\n",
        "Is there a way to change the 20x limit? We'd like to retry only 3 times.\r\n\r\nAlso, it seems that this is not working (or there's something wrong with my configuration?). When my authorization service returns 401 it goes into the endless loop.",
        "Yup. Are you implementing `com.squareup.okhttp.Authenticator` or `java.net.Authenticator` ?\n",
        "I am implementing `com.squareup.okhttp.Authenticator`.\n",
        "I think we want an API like this on Response:\n\n```\n  public List<Response> priorResponses() { ... }\n```\n\nThen you can just do this in your authenticator:\n\n```\n  if (response.priorResponses().size() > 5) return null;\n```\n",
        "(You could implement this in user code by looking at `priorResponse()` in a loop.)\n",
        "I think we should still enforce the 20 redirect max we impose on 3xx\nrequests for this to ensure we never infinite loop.\nOn Jun 28, 2014 11:44 AM, \"Jesse Wilson\" notifications@github.com wrote:\n\n> (You could implement this in user code by looking at priorResponse() in a\n> loop.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/960#issuecomment-47435195.\n",
        "Yup. Counting auth challenges against the 20 attempt limit is a good idea.\n"
    ],
    "854": [],
    "159": [],
    "3316": [],
    "276": [],
    "3552": [],
    "410": [],
    "1987": [],
    "986": [
        "Hi I am still getting this issue \r\nResponse{protocol=http/1.0, code=200, message=OK, url=http://} any solution",
        "What happens if you attempt to connect to this server without configuring protocols? Does it work? I'm tempted to fix this by just adding some documentation to that API.\n",
        "I have the same problem:\n\n```\nResponse code: Response{protocol=http/1.0, code=500, message=Internal Server Error, url=https://wilhelm-gym.net/idesk/addr/my.php/}\n```\n",
        "It seems like OkHttp detects HTTP 1.0 where Browsers like Chrome detect HTTP 1.1\n",
        "I worked around it by using HTTP_1.1 which then connected to that server successfully.\n",
        "Needs documentation.\n"
    ],
    "990": [],
    "483": [],
    "2957": [],
    "4693": [],
    "2382": [],
    "4492": [],
    "4161": [],
    "1009": [
        "Orbot, the Tor app for Android, creates both an HTTP proxy and a SOCKS one, so that's another way to test it out.\n",
        "Since you are planning this for 2.2, I would like to mention that we have been using the one-line-patched jar in [gngr](https://gngr.info) ( [source](https://github.com/uprootlabs/gngr) ) and it seems to be working fine.\n\nIn future, it would be nice if the DNS resolution was also delegated to the SOCKS proxy. IIRC, the system properties for that behaviour are already defined. I could create a separate issue for that.\n\nPS. Taking this opportunity to thank `square` for this project! You are listed on our [credits page](https://gngr.info/doc/credits.html).\n",
        "@hrj awesome.\n",
        "Is there a code sample using authentication?",
        "We don't support socks proxies. The code above is for HTTP proxies, where the proxy server is the one making the connection to the origin server.\n",
        "Oh, gotcha.\n\nI realize there's probably not much demand, but wouldn't supporting socks just involve\n\n``` diff\n-    if (proxy.type() == Proxy.Type.DIRECT) {\n+    if (proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.SOCKS) {\n       socketHost = uri.getHost();\n       socketPort = getEffectivePort(uri);\n```\n\n(in `resetNextInetSocketAddress()`)\n\nIt makes my test pass at least!\n",
        "Confirming that the one-line patch from @dlubarov works fine with my SOCKS proxy, AFAICT.\n",
        "Any idea how we'd test SOCKS proxies? I don't know anything about it.\n",
        "Well, I don't know much about the protocol, but an easy way to create a SOCKS proxy is using plain old ssh: `ssh -N -D 9000 <user@host>`\n\nThis opens a local port listening on port 9000 and that acts as a SOCKS 5 proxy. The other end of the proxy will be the remote host.\n\nAs you can imagine, this is very handy and useful. It is like a mini VPN. And sometimes even better than a VPN because you can control which applications go through the proxy.\n"
    ],
    "4465": [],
    "1329": [],
    "1019": [
        "There's no spec for plaintext assumed HTTP/2. That's nonstandard and won't work with other tools.\n",
        "I'm working with a backend that supports plaintext assumed http/2.  So I'd like to look into this, ideally both\n- plainttext h2c via upgrade\n- assumed plaintext http/2\n- support for http/2 only via ALPN - e.g. fail if the server doesn't support http/2\n\nSpecifically this could relax OkHttpClient.Builder.protocols\n\n```\n     * @param protocols the protocols to use, in order of preference. The list must contain {@link\n     * Protocol#HTTP_1_1}. \n```\n",
        "Isn't this section 3.4 \"Starting HTTP/2 with Prior Knowledge\"\n\nhttp://http2.github.io/http2-spec/index.html#rfc.section.3.4\n\nIn this case prior knowledge is clients configuring the protocol list to only HTTP_2\n",
        "Ah you're right. I still think it\u2019s unwise to skip the upgrade path.\n",
        "Unfortunately, if the server also assumes h2c over plaintext then the initial HTTP/1.1 request with upgrade header will cause the server to barf. i.e. I'm getting this now.  With Netty all three scenarios are possible.  \n\nSo while I agree that it may be unwise, its documented as standard, and possible in the wild.  \n",
        "Minus the plaintext Upgrade support which I'm still working on this turned out pretty easy to add assumed h2c mode, and http/2 only via ALPN.  Do you see any reason why this couldn't land once completed with proper tests etc?\n\nhttps://github.com/yschimke/okhttp/pull/1/files\n",
        "Hi guys, do you have any plan to support h2c? ",
        "None currently.",
        "I have an h2c prior knowledge solution out for review. Changes to critical code paths was rather minimal and I was able to leverage much of the existing test infrastructure. See gh-3873",
        "We did HTTP/2 prior knowledge in 3.11. I\u2019m not planning anything further here!",
        "Not sure I follow. Are you asking for HTTP/2 over plaintext?\n",
        "I'm guessing Jan's asking for us to support [initializing from text protocol](https://tools.ietf.org/html/draft-ietf-httpbis-http2-14#section-3.2), then switching to binary frames. This could be done regardless of whether the transport is plain-text or not, though the spec seems to only discuss this in context of clear-text.\n\nEx.\n\n```\n     GET / HTTP/1.1\n     Host: server.example.com\n     Connection: Upgrade, HTTP2-Settings\n     Upgrade: h2c\n     HTTP2-Settings: <base64url encoding of HTTP/2 SETTINGS payload>\n...\n\n```\n\nBesides the above approach, clear-text could be supported without negotiation per the [prior knowledge](https://tools.ietf.org/html/draft-ietf-httpbis-http2-14#section-3.4) clause. In other words, if someone's registry knows this server responds on port X to h2c, then just send frames there without any nego.\n",
        "Yes, this is exactly what I'm asking about. \n"
    ],
    "2650": [],
    "461": [],
    "1301": [],
    "878": [],
    "1034": [
        "Giant oversight. Will fix.\n",
        "Thanks @swankjesse, much appreciated!\n"
    ],
    "1035": [
        "Yup, I think we're being a little too strict here. Can fix.\n"
    ],
    "3617": [],
    "1596": [],
    "311": [],
    "1043": [
        "Any change of getting this into 2.1? :) \n\nIn general, it would be nice to have a configurable retry policy. Something like:\n\n``` java\ninterface RetryPolicy {\n     RetryMode retryModeFor( Request request );\n}\n\nenum RetryMode {\n      NO_RETRY, RETRY_ON_CONNECT_FAIL, RETRY_ON_ZERO_BYTES_IN_REPONSE \n}\n\n```\n",
        "You've missed the boat on 2.1. We'll conquer this very soon.\n",
        "+1 this. Would love a global RetryPolicy setting for both GET/POST/ANY...We are in the same boat using Okhttp behind Volley and despite us disabling retries in volley, Okhttp is still retrying requests that we don't want retried. \n",
        "2.2? :) \n",
        "+1\nI really like the `RetryPolicy` idea from volley. But it should be possible to get the maximum request duration for every request.\n",
        "When connection timeout set to 6 seconds OkHttp retries requests (even POST requests) in 6 seconds and throws InterruptedIOException in 12 seconds.\n",
        "Seems in my case it retries because it tries TLSv1 first and then SSLv3...\n",
        "What does the application layer do when it encounters a flaky network? Does it just retry anyway?\n",
        "No, it doesn't. Middle layer is Volley with explicit zero numbers of retries set for each request. Top application layer doesn't do retries as well without user's consent. I'm still investigating issue - for now I can only stable reproduce the retry in a \"controlled environment\" with mocked server, where I see fall backs to SSLv3 for second call invocation. The behavior makes sense from one point of view - it's reasonable to try another transport if first one fails, but not in case when the server is actually busy processing first request and the call changes a state on backend (i.e. it's not a GET request).\n",
        "Right now `HttpEngine.recover()` is quite aggressive about recovering from problems. We assume everyone is using idempotence in their application layer; that's the best way to mitigate connectivity problems.\n\nIt's possible some applications are using queries to see if a broken attempt was completed and not retrying if it was. That's clumsy.\n",
        "The thing is that apache http implementation is much better for serious applications because it's quite hard task to implement the idempotence for case when you, for example, purchase something. In same time ALL applications expect that network request may fail, but there are very few apps which expect that request will be sent more than once. It's probably okay for regular downloads, but is is inacceptable behavior for requests which change state. Think about chat applications - how fun is to send 2 messages instead one only because you switched from apache to okhttp? How fun is to spend money twice? How great is to get response \"sorry, you already did it\" instead expected response? Is is much bigger problem then to break some garbage which doesn't expect that network requests fails eventually.\n",
        "one more time, http://tools.ietf.org/html/rfc7230#section-6.3.1:\n\"A user agent MUST NOT automatically retry a request with a non-\n   idempotent method _unless it has some means to know that the request\n   semantics are actually idempotent_, regardless of the method, or some\n   means to detect that the original request was never applied.\"\nokhttp don't know if a request is actually idempotent. Only app layer knows that, that's why say Volley have ability to retry calls. OkHttp have no idea if request is idempotent in therefore must not retry it silently.\n",
        "related: http://www.ravellosystems.com/blog/beware-http-requests-automatic-retries/\n",
        "my quick fix is https://github.com/ValleZ/okhttp/commit/7b108596e531fc367ebd7840228939b3a862f6ed\nFor better backward comparability there probably should be a switch which turns the retries off for a request, but seems I cannot quickly implement it with grateful switching route for next requests. \n",
        "The fix above is bad because it breaks recovery of closed connections :-(\n",
        "This should work better but it doesn't guarantee that a request will not be sent twice\nhttps://github.com/ValleZ/okhttp/commit/a58b2f27eda3862a75d3f5adeb89f4565e542e32\n",
        "okhttp implements the silent fallback from TLS to SSL v3.0 similar to Chrome as part of supporting TLS intolerance: https://www.imperialviolet.org/2011/02/04/oppractices.html However, it probably is a good thing to let clients talking to known TLS tolerant servers disable this behavior.\n",
        "I think we want to write tests to require that non-GET requests are never retried (possibly breaking compatibility with HttpURLConnection). And `GET` requests will be retried, so that users don't see broken images etc. when connection reuse is in play.\n",
        "(Fixing this may also permit us to nuke `RetryableSink` and all of its related complexity)\n",
        "Hating myself for writing this, but it depends on how we choose to define idempotent. If we use the [RFC](http://tools.ietf.org/html/rfc7231#section-4.2.2), then idempotent methods are read-only methods (GET/HEAD/OPTIONS) + DELETE, PUT.\n\nI agree that POST is something we ought not retry, but PUT would still require RetryableSink.\n\nAlternatively, we could tighten things up by saying that we auto-retry safe (read-only) methods, and make  it the caller's responsibility to retry DELETE, PUT.\n",
        "Client should have ability to specify if a request is actually idempotent because POST requests may be also idempotent and I can easily imagine weird API where GET requests are not idempotent.\n\nps Thanks for taking care about this!\n",
        "I guess that's more logs on the \"who decides what idempotent means?\".\n\nWhat if we expose a hook to enable or disable retry on a OkHttpClient?\nThen, folks could turn on retry for whatever request they decide idempotent\nis at the time? Since OkHttpClient is cheap to create, this might be ok.\n\nPolicy.URLCONNECTION (for portability with old code that retries POSTs)\nPolicy.ALWAYS_RETRY, NEVER_RETRY (for when you know better)\n",
        "Not in love with making the application layer decide. This is an ugly consequence of connection reuse; I think we choose something reasonable & then let the application layer retry as they already do for hard network failures.\n",
        "Sgtm. Then I would say reasonable would exclude worrying about apis who\nabuse GET :)\n",
        "swankjesse: \"Not in love with making the application layer decide.\" \n\nIt could have sensible defaults, that can be overridden, that way most clients don't HAVE to make that decision, but some can if they want to.\n",
        "+1 for not retrying POST requests\n"
    ],
    "4477": [],
    "1532": [],
    "4647": [],
    "486": [],
    "1049": [
        "We are seeing this issue too when we call cancel operation. I was hoping if we could either catch that exception properly, or find a way to neglect that issue ? \n",
        "Yikes. Will fix.\n",
        "I'm wondering what the heck is the right behavior for OkHttp in this case.\n\nIn general, code that's streaming a response is going to occasionally throw IOExceptions because the  response will be canceled, or the network will disappear, or the remote server will crash.\n\nCurrently OkHttp sends the failure to the executor thread's uncaught exception handler. But as reported, this can crash your app. (You'd avoid this with a custom uncaught exception handler, but that's a lot of grief.)\n\nI'm reluctant to call `Callback.onFailure()`, because then I'm calling the same callback twice for a single response, which feels wrong.\n\nOne potential option is to install a default uncaught exception handler for the executor's thread. That guy would log the failure instead of crashing. But this can be surprising, and potentially competes with the global uncaught exception handler.\n",
        "i have not read okhttp's source code deeply, but i think this case is not an 'exception'. the client code call the cancel function, if this call is defined as async, maybe Callback.onCancel is right.\n\nhowever, In practice use, after a cancel call, the client code will not listen to callback any more. so, if a request is cancelled, the expected behavior is that request clean up itselft and disappear.\n"
    ],
    "1480": [],
    "4206": [],
    "1058": [
        "Possible, obnoxious way to implement this:\n\n```\nclient.enableCleartextConnections(true);\n```\n",
        "(ie. opt-into cleartext, vs. opt-out)\n"
    ],
    "4328": [],
    "1062": [],
    "610": [],
    "3555": [],
    "3564": [],
    "1081": [
        "Also, for max-stale:\n_\"If no value is assigned to max-stale, then the client is willing to accept a stale response of any age.\"_\n"
    ],
    "2834": [],
    "70": [],
    "661": [],
    "4623": [],
    "588": [],
    "2272": [],
    "1099": [
        "The core issue is that if the journal is truncated, we shouldn't append to it. We know it's truncated if it doesn't end in `\\n`. \n"
    ],
    "4684": [],
    "2656": [],
    "1105": [],
    "1114": [
        "@swankjesse I am seeing a few of those in production. How can I help debugging?\n",
        "@niqo01 can you reproduce locally or are you getting this through Crashlytics/Bugsnag etc. ? \n",
        "@swankjesse Getting through Crashlytics only. If you think about logs which would help debugging, I would be glad to add them to the next release.\n",
        "@niqo01 any pattern in device maker or Android version?\n\nI'll add something to OkHttp itself to provide more context when this is triggered.\n",
        "@swankjesse you can have a look at the crashlytics report here: http://crashes.to/s/816499ead0b\nI didn't recognized a possible pattern in device maker or Android version or specific HTTP request.\n",
        "OkHttp 2.1.\nDevice: Coolpad 8297.\nVersion: Android 4.2.2.\nSame issues. I can confirm this device would cause this `EOFException` (my two users have this device reported this).\n\nThis is the one user's device's info. I hope this may help you.\n\n```\nModel number                      Coolpad 8297\nAndroid version                   4.2.2 MIUI V5\nMIUI version (An android rom)     MIUI-4.9.26\nProcessor                         8-core 1.7GHZ\nRAM                               2.00 GB\nROM                               8.00 GB\nBaseband version                  MOLY.WR8.W1315.MD.W\n                                  G.MP.V19.P2,2014/03/11\n                                                   00:55\nKernel version                    3.4.39\n```\n\nSimliar comment can be found here:\nhttps://github.com/square/okhttp/issues/803#issuecomment-60895738\n",
        "Hello @swankjesse , what I don't understand is why the error comes so quickly and not seeing a response log. \n\nMy experience is that either my server is down or a problem connecting to the server because of spotty connection that causes an EOFException for me. \n\n12-10 17:21:27.453 30472-30652/? D/Retrofit log\ufe55 ---> HTTP POST https://placeholder.server.com//core/b1c51a7ec5204/\n12-10 17:21:27.463 30472-30652/? D/Retrofit log\ufe55 User-Agent: Android\n12-10 17:21:27.463 30472-30652/? D/Retrofit log\ufe55 Content-Type: application/json; charset=UTF-8\n12-10 17:21:27.463 30472-30652/? D/Retrofit log\ufe55 Content-Length: 121\n12-10 17:21:27.463 30472-30652/? D/Retrofit log\ufe55 ---> END HTTP (121-byte body)\n12-10 17:21:29.275 30472-30652/? D/Retrofit log\ufe55 ---- ERROR https://placeholder.server.com//core/b1c51a7ec5204/\n12-10 17:21:29.295 30472-30652/? D/Retrofit log\ufe55 java.io.EOFException\nat okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:154)\nat com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:189)\nat com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:101)\n",
        "Is there a fix for this? I get the exception quite often\n\n``` java\njava.io.EOFException\n            at okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:192)\n            at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:187)\n            at com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:78)\n            at com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:665)\n            at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:429)\n            at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:374)\n            at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:469)\n            at retrofit.client.UrlConnectionClient.readResponse(UrlConnectionClient.java:73)\n            at retrofit.client.UrlConnectionClient.execute(UrlConnectionClient.java:38)\n            at retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:321)\n            at retrofit.RestAdapter$RestHandler.access$100(RestAdapter.java:220)\n            at retrofit.RestAdapter$RestHandler$2.obtainResponse(RestAdapter.java:278)\n            at retrofit.CallbackRunnable.run(CallbackRunnable.java:42)\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n            at retrofit.Platform$Android$2$1.run(Platform.java:142)\n            at java.lang.Thread.run(Thread.java:818)\n```\n",
        "@swankjesse In the previous issue (#803), you theorized:\n\n> At first glance it looks like bad connection reuse, but that should be recovered from & retried automatically. Is this a POST request?\n\nAre you referring to the fact that if the response gives HTTP 100 (HttpConnection:199), HttpConnection continues the loop to parse the StatusLine again (HttpConnection:187)?\n\nI've attached the debugger to see if that's the case, and it's not; the exception is thrown the first time around, in my case on a HTTP 204.\n\nI've been trying to put together a minimum working example of this problem, but to no avail. I'm only seeing it in a production environment where the API returns HTTP 204 with an empty body on a POST request.\n\nI'm suspicious that perhaps the response coming in contains no newline '\\n' character at all, as looking at RealBufferedSource:192 suggests that's the only cause of this exception. As the HTTP response should always contain at least one such character following the header, I'm properly puzzled.\n\nOn OkHttp 2.1.0, the line numbers appear to be slightly different; my stack trace is:\n\n```\njava.io.EOFException\n    at okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:192)\n    at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:187)\n    at com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:78)\n    at com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:665)\n    at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:429)\n    at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:374)\n    at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:469)\n    at com.squareup.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\n    at com.squareup.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\n    at retrofit.client.UrlConnectionClient.readResponse(UrlConnectionClient.java:73)\n    at retrofit.client.UrlConnectionClient.execute(UrlConnectionClient.java:38)\n    at retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:321)\n    at retrofit.RestAdapter$RestHandler.invoke(RestAdapter.java:240)\n    [...]\n```\n",
        "This might add some context:\nhttps://github.com/square/okio/pull/104\n",
        "Yes, this would indeed be useful. I haven't grabbed the latest for a new test, but it seems that the newline is missing in empty body responses (such as HTTP 204) from some servers. Oddly, it's entirely random.\n\nI'll dump the new exception when I encounter it again.\n",
        "Might be caused by attempting to parse SPDY or HTTP/2.0 as HTTP/1.1. We had a bug on desktop Java where our ALPN implementation wasn't always telling us the negotiated protocol.\n\nWith the new information in-hand from Okio's update, I'm going to punt this to 2.3 since there's no further action to take for the 2.2 release.\n",
        "@swankjesse Please note my extensive [comment on this Retrofit issue](https://github.com/square/retrofit/issues/397#issuecomment-68890904).\n",
        "@swankjesse After many (many!) tries where everything just works hunky dory, I've finally gotten it to fail again with OkHttp 2.2. I don't know what to say than that it appears to be completely at random.\n\nAs with @johnjohndoe's report, the buffer is simply empty. Unlike his report, this is coming from a Apache 2.2.15 on CentOS, running PHP 5.4.36.\n\n```\njava.io.EOFException: \\n not found: size=0 content=...\n    at okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\n    at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:187)\n    at com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\n    at com.squareup.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:791)\n    at com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:678)\n    at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:431)\n    at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:376)\n    at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:471)\n    at com.squareup.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\n    at com.squareup.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\n    at retrofit.client.UrlConnectionClient.readResponse(UrlConnectionClient.java:73)\n    at retrofit.client.UrlConnectionClient.execute(UrlConnectionClient.java:38)\n    at retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:321)\n    at retrofit.RestAdapter$RestHandler.invoke(RestAdapter.java:240)\n    at $Proxy2.locationFinishSession(Native Method)\n    at com.vebego.ally.proxies.LocationSessionProxy$2.doRequest(LocationSessionProxy.java:47)\n    at com.vebego.ally.SyncService$2.doInBackground(SyncService.java:269)\n    at com.vebego.ally.SyncService$2.doInBackground(SyncService.java:259)\n    at android.os.AsyncTask$2.call(AsyncTask.java:288)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:237)\n    at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n    at java.lang.Thread.run(Thread.java:841)\n```\n",
        "Perhaps it would be useful for logging that the headers are output before the rest of the response body is attempted to be read? Presently, it bombs out with the `---- ERROR` message line immediately after the `---> END HTTP` line.\n\nThe issue is so terribly difficult to reproduce that I can't attach the debugger and hope for it to occur on a breakpoint.\n",
        "Jesse and I talked about a Retrofit-like logging system for stupid-easy\nthings like this. We have to be careful, though, because both headers and\nthe response body can come from different places. In this case you want the\nheaders logged before the body is read which is a very, very fine level of\nlogging.\nOn Jan 7, 2015 6:49 PM, \"Paul Lammertsma\" notifications@github.com wrote:\n\n> Perhaps it would be useful for logging that the headers are output before\n> the rest of the response body is attempted to be read? The issue is so\n> terribly difficult to reproduce that I can't attach the debugger and hope\n> for it to occur on a breakpoint.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/1114#issuecomment-69128693.\n",
        "Yes, I can imagine, and [looking at where those headers are read](https://github.com/square/okhttp/blob/parent-2.2.0/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpConnection.java#L181), it wouldn't be an ideal place to add logging.\n\nI took another look at the stack trace, and if I understand correctly, noticed that it doesn't even get to reading the headers. The exception is thrown from [HttpConnection:187](https://github.com/square/okhttp/blob/parent-2.2.0/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpConnection.java#L187), which seems to suggest that the response is a single line. With Jesse's added details in the stack trace, it appears that the response is actually _completely empty_. No status line, no headers, no body, nothing.\n\nI'll throw together a bash script to test the API using cURL and see if it ever gets empty responses, but it sounds very strange to me.\n",
        "Hi, I met this problem every time trying to send an http request. Sure the Android OS of the device I used to test is bizarrely customized, but it's still worth a look.\n\nDevice Info:\ndevice: Coolpad 9976A\nAndroid version: 4.4.2\nkernel: 3.4.39\n\nLibrary Info:\ngson-2.3.1\nokhttp-2.1.0\nokhttp-urlconnection-2.1.0\nokio-1.0.1\nretrofit-1.8.0\n",
        "An additional informartion:\nWhen I was single-step debugging the code in DDMS, everything worked fine, I got the response correctly, but when I ran the APP, I got the exception.\n",
        "Our users also facing this issue:\n\n```\nCaused by java.io.EOFException\nokio.RealBufferedSource.readUtf8LineStrict (RealBufferedSource.java:192)\ncom.squareup.okhttp.internal.http.HttpConnection.readResponse (HttpConnection.java:187)\ncom.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders (HttpTransport.java:78)\ncom.squareup.okhttp.internal.http.HttpEngine.readResponse (HttpEngine.java:665)\ncom.squareup.okhttp.internal.huc.HttpURLConnectionImpl.execute (HttpURLConnectionImpl.java:429)\ncom.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponse (HttpURLConnectionImpl.java:374)\ncom.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode (HttpURLConnectionImpl.java:469)\nretrofit.client.UrlConnectionClient.readResponse (UrlConnectionClient.java:73)\nretrofit.client.UrlConnectionClient.execute (UrlConnectionClient.java:38)\nretrofit.RestAdapter$RestHandler.invokeRequest (RestAdapter.java:321)\nretrofit.RestAdapter$RestHandler.invoke (RestAdapter.java:240)\n```\n\nDevices: \nJiayu GF2 (4.2.2)\nMyAudio Blade Smartphone\nAkai Glory 3\nConcorde Smartphone 5005NFC \nTHL T200\n\nFor some users it not work with WiFi connection, while on 3G all is ok.\n",
        "An update that maybe help others.\n\nI had the same issue for a long time. Since i updated to retrofit v1.9.0, okhttp 2.2.0, urlconnection 2.2.0 i haven't encountered the problem since.\n",
        "I was able to fix this error for me.\n\nHere was my stacktrace before:\n\n```\n01-26 21:50:38.670    2727-2752/com D/Retrofit\ufe55 java.io.EOFException: \\n not found: size=0 content=...\n            at okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\n            at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:187)\n            at com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\n            at com.squareup.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:791)\n            at com.squareup.okhttp.internal.http.HttpEngine.access$200(HttpEngine.java:90)\n            at com.squareup.okhttp.internal.http.HttpEngine$NetworkInterceptorChain.proceed(HttpEngine.java:784)\n            at com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:645)\n            at com.squareup.okhttp.Call.getResponse(Call.java:263)\n            at com.squareup.okhttp.Call$ApplicationInterceptorChain.proceed(Call.java:219)\n            at com.squareup.okhttp.Call.getResponseWithInterceptorChain(Call.java:192)\n            at com.squareup.okhttp.Call.execute(Call.java:79)\n            at retrofit.client.OkClient.execute(OkClient.java:53)\n            at retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:326)\n            at retrofit.RestAdapter$RestHandler.access$100(RestAdapter.java:220)\n            at retrofit.RestAdapter$RestHandler$2.obtainResponse(RestAdapter.java:278)\n            at retrofit.CallbackRunnable.run(CallbackRunnable.java:42)\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n            at retrofit.Platform$Android$2$1.run(Platform.java:142)\n            at java.lang.Thread.run(Thread.java:818)\n```\n\nI noticed one header had a couple of `newlines` -- Which seemed to be the root problem.\n\nFor me specifically, I was encoding `newlines` with the following line of code:\n\n``` JAVA\nBase64.encodeToString(bytes, Base64.DEFAULT);\n```\n\nI changed to:\n\n``` JAVA\nBase64.encodeToString(bytes, Base64.NO_WRAP);\n```\n\nand it worked.\n",
        "I am also seeing this exact issue using retrofit 1.9.0, okhttp-urlconnection 2.2.0. I get the same exception every time I use a certain specific API call. The API call is a simple POST with a text/plain file. Is there a workaround for this?\n",
        ":+1: \n",
        "Hello, we have the same problem. Everything works on cca 3000 devices, but on one we get this error everytime. The device is called JIAYU JY-G2F with Android 4.2.2.\n\nHere is the stacktrace we get:\n\n```\nCaused by: java.io.EOFException: \\n not found: size=45 content=32320d0a7b225374616e6a6541706c696b6163696a65223a7b22536966726122...\n       at okio.RealBufferedSource.readUtf8LineStrict(SourceFile:200)\n       at com.squareup.okhttp.internal.http.HttpConnection$ChunkedSource.readChunkSize(SourceFile:468)\n       at com.squareup.okhttp.internal.http.HttpConnection$ChunkedSource.read(SourceFile:450)\n       at okio.RealBufferedSource$1.read(SourceFile:298)\n       at java.io.InputStream.read(InputStream.java:163)\n       at org.springframework.util.FileCopyUtils.copy(SourceFile:111)\n       at org.springframework.util.FileCopyUtils.copyToByteArray(SourceFile:164)\n       at org.springframework.http.converter.ByteArrayHttpMessageConverter.readInternal(SourceFile:59)\n       at org.springframework.http.converter.ByteArrayHttpMessageConverter.readInternal(SourceFile:38)\n       at org.springframework.http.converter.AbstractHttpMessageConverter.read(SourceFile:147)\n       at org.springframework.web.client.HttpMessageConverterExtractor.extractData(SourceFile:76)\n       at org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor.extractData(SourceFile:655)\n       at org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor.extractData(SourceFile:641)\n       at org.springframework.web.client.RestTemplate.doExecute(SourceFile:484)\n       at org.springframework.web.client.RestTemplate.execute(SourceFile:447)\n       at org.springframework.web.client.RestTemplate.exchange(SourceFile:422)\n       at com.hrc.eb.mobile.android.hibismobile.rest.RestClient.invoke(SourceFile:290)\n       at com.hrc.eb.mobile.android.hibismobile.rest.RestClient.get(SourceFile:349)\n       at com.hrc.eb.mobile.android.hibismobile.client.StanjeAplikacijeClient$1.call(SourceFile:35)\n       at rx.Observable.unsafeSubscribe(SourceFile:7600)\n       at rx.internal.operators.OperatorSubscribeOn$1$1.call(SourceFile:62)\n       at rx.internal.schedulers.ScheduledAction.run(SourceFile:45)\n       at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:390)\n       at java.util.concurrent.FutureTask.run(FutureTask.java:234)\n       at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:153)\n       at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:267)\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1080)\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:573)\n       at java.lang.Thread.run(Thread.java:838)\n```\n\nNot sure if this is the problem, but the content size is actually 34 (hex: 22). If we decode debug content we get:\n\n`22\n{\"StanjeAplikacije\":{\"Sifra\"`\n\nActual body is:\n`{\"StanjeAplikacije\":{\"Sifra\":\"0\"}}`\n\nNot sure, but maybe it's worth to take a look, why debug content size is 45?\n\nOnce more, this works on every other device, on specific device it fails **everytime**. Same thing can be reproduced with Okhttp 2.0.0 and 2.2.0. It works with Apache HTTP client .\n\nAnd now, complete trace of response, maybe it helps:\n\n```\n=> Send header, 248 bytes (0xf8)\n0000: 47 45 54 20 2f 6d 6f 62 69 6c 65 2f 72 65 73 74 GET /mobile/rest\n0010: 73 65 63 2f 70 72 65 76 65 72 6a 61 6e 6a 65 2d sec/preverjanje-\n0020: 73 74 61 6e 6a 61 2d 61 70 6c 69 6b 61 63 69 6a stanja-aplikacij\n0030: 65 3f 6f 73 3d 32 26 74 69 70 5f 6e 61 70 72 61 e?os=2&tip_napra\n0040: 76 65 3d 31 26 76 65 72 7a 69 6a 61 3d 31 2e 31 ve=1&verzija=1.1\n0050: 2e 30 20 48 54 54 50 2f 31 2e 31 0d 0a 55 73 65 .0 HTTP/1.1..Use\n0060: 72 2d 41 67 65 6e 74 3a 20 63 75 72 6c 2f 37 2e r-Agent: curl/7.\n0070: 31 31 2e 30 20 28 69 36 38 36 2d 73 75 73 65 2d 11.0 (i686-suse-\n0080: 6c 69 6e 75 78 29 20 6c 69 62 63 75 72 6c 2f 37 linux) libcurl/7\n0090: 2e 31 31 2e 30 20 4f 70 65 6e 53 53 4c 2f 30 2e .11.0 OpenSSL/0.\n00a0: 39 2e 37 64 20 69 70 76 36 20 7a 6c 69 62 2f 31 9.7d ipv6 zlib/1\n00b0: 2e 32 2e 31 0d 0a 48 6f 73 74 3a 20 xx xx xx xx .2.1..Host: xxxx\n00c0: xx xx xx xx xx xx xx xx xx 0d 0a 50 72 61 67 6d xxxxxxxxx..Pragm\n00d0: 61 3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 61 63 63 a: no-cache..acc\n00e0: 65 70 74 3a 61 70 70 6c 69 63 61 74 69 6f 6e 2f ept:application/\n00f0: 6a 73 6f 6e 0d 0a 0d 0a                         json....\n<= Recv header, 17 bytes (0x11)\n0000: 48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 0d HTTP/1.1 200 OK.\n0010: 0a                                              .\n<= Recv header, 108 bytes (0x6c)\n0000: 58 2d 50 6f 77 65 72 65 64 2d 42 79 3a 20 53 65 X-Powered-By: Se\n0010: 72 76 6c 65 74 2f 33 2e 31 20 4a 53 50 2f 32 2e rvlet/3.1 JSP/2.\n0020: 33 20 28 47 6c 61 73 73 46 69 73 68 20 53 65 72 3 (GlassFish Ser\n0030: 76 65 72 20 4f 70 65 6e 20 53 6f 75 72 63 65 20 ver Open Source\n0040: 45 64 69 74 69 6f 6e 20 20 34 2e 30 20 20 4a 61 Edition  4.0  Ja\n0050: 76 61 2f 4f 72 61 63 6c 65 20 43 6f 72 70 6f 72 va/Oracle Corpor\n0060: 61 74 69 6f 6e 2f 31 2e 37 29 0d 0a             ation/1.7)..\n<= Recv header, 52 bytes (0x34)\n0000: 53 65 72 76 65 72 3a 20 47 6c 61 73 73 46 69 73 Server: GlassFis\n0010: 68 20 53 65 72 76 65 72 20 4f 70 65 6e 20 53 6f h Server Open So\n0020: 75 72 63 65 20 45 64 69 74 69 6f 6e 20 20 34 2e urce Edition  4.\n0030: 30 20 0d 0a                                     0 ..\n<= Recv header, 49 bytes (0x31)\n0000: 43 61 63 68 65 2d 43 6f 6e 74 72 6f 6c 3a 20 6e Cache-Control: n\n0010: 6f 2d 63 61 63 68 65 2c 20 6e 6f 2d 73 74 6f 72 o-cache, no-stor\n0020: 65 2c 20 6e 6f 2d 74 72 61 6e 73 66 6f 72 6d 0d e, no-transform.\n0030: 0a                                              .\n<= Recv header, 32 bytes (0x20)\n0000: 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 61 70 Content-Type: ap\n0010: 70 6c 69 63 61 74 69 6f 6e 2f 6a 73 6f 6e 0d 0a plication/json..\n<= Recv header, 37 bytes (0x25)\n0000: 44 61 74 65 3a 20 54 68 75 2c 20 30 35 20 46 65 Date: Thu, 05 Fe\n0010: 62 20 32 30 31 35 20 30 37 3a 35 34 3a 35 38 20 b 2015 07:54:58\n0020: 47 4d 54 0d 0a                                  GMT..\n<= Recv header, 28 bytes (0x1c)\n0000: 54 72 61 6e 73 66 65 72 2d 45 6e 63 6f 64 69 6e Transfer-Encodin\n0010: 67 3a 20 63 68 75 6e 6b 65 64 0d 0a             g: chunked..\n<= Recv data, 40 bytes (0x28)\n0000: 32 32 0d 0a 7b 22 53 74 61 6e 6a 65 41 70 6c 69 22..{\"StanjeApli\n0010: 6b 61 63 69 6a 65 22 3a 7b 22 53 69 66 72 61 22 kacije\":{\"Sifra\"\n0020: 3a 22 30 22 7d 7d 0d 0a                         :\"0\"}}..\n<= Recv data, 1 bytes (0x1)\n0000: 30                                              0\n<= Recv data, 4 bytes (0x4)\n0000: 0d 0a 0d 0a                                     ....\n== Info: Connection #0 left intact\n```\n",
        "I think we can try the last version 2.2.0.Then test this issunes \n",
        "FYI, calling `setRetryOnConnectionFailure(true)` may fix this for you.\n",
        "I have observed this issue post addition of `setRetryOnConnectionFailure(true)`. Seems to be less often than it was, but still it's manifested.\n",
        "Same here when trying setRetryOnConnectionFailure(true). I still get the problem, not sure if it is less often though.\n",
        "Device : OPO, android Version 4.4.4\n    compile 'com.google.code.gson:gson:2.2.+'\n    compile 'com.squareup.okhttp:okhttp:2.2.0'\n    compile 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'\n    compile 'com.squareup.retrofit:retrofit:1.9.0'\n\nStill having the same issue : \njava.io.EOFException: \\n not found: size=0 content=...\n            at okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\n            at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:187)\n            at com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\n            at com.squareup.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:791)\n\nRequest : \n\nHTTP POST \nDbname: demo\nApikey: 000000000000000\nContent-Type: application/json; charset=UTF-8\nContent-Length: 112\n {\"dbname\":\"demo\",\"sid\":\"2c463dfb5d648797d248618e2b921bfda5f65ee0\",\"udid\":\"63d476fdc0cbc07a\"}\n",
        "I have found a request/response that will 100% yield this issue using Nexus5 Lollipop emulator (running on HAXM on Windows 7 64bit if that makes any difference).\n\nI was just about to try tampering with the response, so intercepted the request using Burpsuite, and BAM the issue manifested (i.e. without any HTTP response at all):\n\nSystem.err\ufe55 retrofit.RetrofitError: \\n not found: size=0 content=...\n\nThis to me suggests the issue stems from the request, rather than the response. The request is a POST containing empty body (i.e. Content-Length: 0), following is a scrubbed version of the HTTP request:\n\nPOST /lala-bleh/rest/yhgmt/woopsie/zomg/AMAGAD HTTP/1.1\nAccept: application/json\nAuthorization: Basic thiswaslegitbeforeiscrubbedit==\nContent-Length: 0\nHost: abcdef.hijklmnopqrs.tuvwxyandz.com\nConnection: Keep-Alive\nAccept-Encoding: gzip\nUser-Agent: okhttp/2.2.0\n",
        "+1 same here, but i got Nexus 4 with lolipop\n",
        "Getting this error when trying to call a JSON service from a Nexus 5 Lollipop emulator using a http proxy.\nIt seems to work on an actual Nexus 5 device without proxy.\n\nOriginally I was using a DefaultHttpClient.execute() with a Proxy set in the params. This worked. Removing the proxy and defining it via emulator parameters gives me this error.\n\nUpdate: Different service (offering xml) works with the exact same call.\n",
        "+1 Same problem.\nHTC One_E8\nDEVICE\nPortrait\nORIENTATION\n52%\n BATTERY\n4.4.2\nPortrait\n26%\n RAM\n5%\n DISKSPACE\nCaused by: java.io.EOFException\n       at okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:192)\n       at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:189)\n       at com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:101)\n       at com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:676)\n       at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:426)\n       at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:371)\n       at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:466)\n       at retrofit.client.UrlConnectionClient.readResponse(UrlConnectionClient.java:73)\n       at retrofit.client.UrlConnectionClient.execute(UrlConnectionClient.java:38)\n       at retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:321)\n       at retrofit.RestAdapter$RestHandler.invoke(RestAdapter.java:240)\n",
        "I suggest to test manually the URL you are calling.\nI had the same problem, but eventually I realized it was caused by a wrong response by the webservices, for some particular calling parameters.\n",
        "@dbaroncelli Can you provide some more details? Under which circumstances can a response yield this exception in OkHttp?\n",
        "@pflammertsma, in my case it was a webservice not serving a valid http response. For anyone familiar with Go, it was a case when the Go app finds a runtime error and goes into panic, and it is not able to respond to a request.\n",
        "@dbaroncelli Do you have any idea what the raw response from the API is? Does it actually contain 0 bytes as OkHttp suggests (i.e. also omitting the header)?\n",
        "OK, I can check, give me some minutes to reproduce it (I had already fixed it server-side ;-) )\n",
        "I can confirm! 0 bytes, no header!\n",
        "@dbaroncelli Thanks, this gives a whole lot of insight. Perhaps the attached backend has become overloaded.\n\nAs I mentioned earlier, this is coming from a Apache 2.2.15 on CentOS, running PHP 5.4.36 (on this staging server, there's no memcache or anything of the sort). My suspicion is that PHP is running out of memory and Apache is dumping the 0-byte response, but I'll only know for sure after looking into this together with the backend team.\n\nI've prepared a test to effectively overload the server with the request, and we'll see if it fails as the server becomes overloaded.\n",
        "With https://github.com/square/okhttp/pull/1487, I'm added more context to the exception. If anyone is currently seeing this problem and wants to further investigate, please grab the latest snapshot and see what it says when it fails!\n",
        "We are experiencing this on ZOPO ZP998 phone, every other phone works. Unfortunately I can't test this with the latest version (with improved exception loggin), because this is a customer's phone. This is a HTTPS request. Here is the stacktrace:\n\n```\n03-11 13:15:00.516    4980-5804/\ufe55 SimpleHTTP.Connection failed: \\n not found: size=17 content=03007fa861b9d60200000d0a300d0a0d0a...\njava.io.EOFException: \\n not found: size=17 content=03007fa861b9d60200000d0a300d0a0d0a...\n        at okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\n        at com.squareup.okhttp.internal.http.HttpConnection.readHeaders(HttpConnection.java:209)\n        at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:195)\n        at com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\n        at com.squareup.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:791)\n        at com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:678)\n        at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:431)\n        at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:376)\n        at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:471)\n        at com.squareup.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\n        at com.squareup.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\n```\n",
        "could you pls tell me how to fix this?i got the same proble everytime in vivo phone, 80 users got this problem and can't load image with picasso. the log like this,i use the version okhttp-2.2.0;okio-1.3.0\n\njava.io.EOFException: \\n not found: size=162111 content=34ef1ac5f19f5ebcd766be9ad1b4b6bcd71f5231851379a01663b33ba3e9d71e...\n03-17 10:07:05.248  12962-13079/com.lingan.seeyou W/System.err\ufe55 at okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\n03-17 10:07:05.248  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpConnection.readHeaders(HttpConnection.java:209)\n03-17 10:07:05.248  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:195)\n03-17 10:07:05.248  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\n03-17 10:07:05.249  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:791)\n03-17 10:07:05.249  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpEngine.access$200(HttpEngine.java:90)\n03-17 10:07:05.249  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpEngine$NetworkInterceptorChain.proceed(HttpEngine.java:784)\n03-17 10:07:05.249  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:645)\n03-17 10:07:05.249  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.Call.getResponse(Call.java:263)\n03-17 10:07:05.249  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.Call$ApplicationInterceptorChain.proceed(Call.java:219)\n03-17 10:07:05.250  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.Call.getResponseWithInterceptorChain(Call.java:192)\n03-17 10:07:05.250  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.Call.execute(Call.java:79)\n03-17 10:07:05.250  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.picasso.OkHttpDownloader.load(OkHttpDownloader.java:116)\n03-17 10:07:05.250  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.picasso.NetworkRequestHandler.load(NetworkRequestHandler.java:47)\n03-17 10:07:05.250  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.picasso.BitmapHunter.hunt(BitmapHunter.java:215)\n03-17 10:07:05.251  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.picasso.BitmapHunter.run(BitmapHunter.java:162)\n03-17 10:07:05.251  12962-13079/com.lingan.seeyou W/System.err\ufe55 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:390)\n03-17 10:07:05.251  12962-13079/com.lingan.seeyou W/System.err\ufe55 at java.util.concurrent.FutureTask.run(FutureTask.java:234)\n03-17 10:07:05.251  12962-13079/com.lingan.seeyou W/System.err\ufe55 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1080)\n03-17 10:07:05.251  12962-13079/com.lingan.seeyou W/System.err\ufe55 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:573)\n03-17 10:07:05.251  12962-13079/com.lingan.seeyou W/System.err\ufe55 at java.lang.Thread.run(Thread.java:838)\n03-17 10:07:05.252  12962-13079/com.lingan.seeyou W/System.err\ufe55 at com.squareup.picasso.Utils$PicassoThread.run(Utils.java:391)\n",
        "@iceAnson something is corrupt on your HTTP server. That response is invalid HTTP. Can you confirm that the request works with `curl`?\n",
        "@swankjesse \nno,it works fine at other phone,like sunsang,htc;only at some device happen this,like vivo,coolpad phone,so it's not the server problem,and the vivo phone get this problem erveytime ,users can't load image with picasso( picasso use the okhttp to download image),do you need something i can provide like log or other sth to debug this problem?\n",
        "@swankjesse \ndo you have any idea to fix this problem?\n",
        "There's more debug info in 2.3.0. Trying that to start can't hurt.\n",
        "@swankjesse \nok, 2.3.0 still doesn't work. the problem's phone is not herr ,i will debug it tomorrow and post log to you .\n",
        "@swankjesse\nthis is the 2.3.0 log,i still doesn't work;\n\nI/SurfaceTextureClient\ufe55 [STC::queueBuffer](this:0x63908878) fps:4.04, dur:1236.68, max:248.55, min:246.33\n03-18 08:49:51.603  29563-29563/com.lingan.seeyou I/SurfaceTextureClient\ufe55 [STC::queueBuffer](this:0x63908878) fps:4.04, dur:1237.61, max:247.91, min:247.24\n03-18 08:49:52.840  29563-29563/com.lingan.seeyou I/SurfaceTextureClient\ufe55 [STC::queueBuffer](this:0x63908878) fps:4.04, dur:1237.12, max:247.65, min:247.17\n03-18 08:49:54.078  29563-29563/com.lingan.seeyou I/SurfaceTextureClient\ufe55 [STC::queueBuffer](this:0x63908878) fps:4.04, dur:1237.33, max:247.94, min:246.63\n03-18 08:49:55.323  29563-29563/com.lingan.seeyou I/SurfaceTextureClient\ufe55 [STC::queueBuffer](this:0x63908878) fps:4.01, dur:1245.60, max:255.82, min:244.99\n03-18 08:49:56.326  29563-29563/com.lingan.seeyou I/SurfaceTextureClient\ufe55 [STC::queueBuffer](this:0x63908878) fps:3.99, dur:1002.80, max:255.62, min:247.03\n03-18 08:49:57.558  29563-29563/com.lingan.seeyou I/SurfaceTextureClient\ufe55 [STC::queueBuffer](this:0x63908878) fps:4.06, dur:1231.98, max:251.12, min:242.90\n03-18 08:49:58.796  29563-29563/com.lingan.seeyou I/SurfaceTextureClient\ufe55 [STC::queueBuffer](this:0x63908878) fps:4.04, dur:1237.61, max:250.06, min:244.39\n03-18 08:50:00.033  29563-29563/com.lingan.seeyou I/SurfaceTextureClient\ufe55 [STC::queueBuffer](this:0x63908878) fps:4.04, dur:1237.47, max:249.23, min:246.06\n03-18 08:50:00.103  29563-29627/com.lingan.seeyou W/System.err\ufe55 java.io.IOException: unexpected end of stream on Connection{img.seeyouyima.com:80, proxy=DIRECT@ hostAddress=117.25.156.199 cipherSuite=none protocol=http/1.1} (recycle count=0)\n03-18 08:50:00.104  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\n03-18 08:50:00.104  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\n03-18 08:50:00.104  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:830)\n03-18 08:50:00.104  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpEngine.access$200(HttpEngine.java:95)\n03-18 08:50:00.105  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpEngine$NetworkInterceptorChain.proceed(HttpEngine.java:823)\n03-18 08:50:00.105  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:684)\n03-18 08:50:00.105  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.Call.getResponse(Call.java:272)\n03-18 08:50:00.105  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.Call$ApplicationInterceptorChain.proceed(Call.java:228)\n03-18 08:50:00.105  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.Call.getResponseWithInterceptorChain(Call.java:199)\n03-18 08:50:00.106  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.Call.execute(Call.java:79)\n03-18 08:50:00.106  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.picasso.OkHttpDownloader.load(OkHttpDownloader.java:118)\n03-18 08:50:00.106  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.picasso.NetworkRequestHandler.load(NetworkRequestHandler.java:47)\n03-18 08:50:00.108  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.picasso.BitmapHunter.hunt(BitmapHunter.java:209)\n03-18 08:50:00.108  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.picasso.BitmapHunter.run(BitmapHunter.java:159)\n03-18 08:50:00.108  29563-29627/com.lingan.seeyou W/System.err\ufe55 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:390)\n03-18 08:50:00.109  29563-29627/com.lingan.seeyou W/System.err\ufe55 at java.util.concurrent.FutureTask.run(FutureTask.java:234)\n03-18 08:50:00.109  29563-29627/com.lingan.seeyou W/System.err\ufe55 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1080)\n03-18 08:50:00.109  29563-29627/com.lingan.seeyou W/System.err\ufe55 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:573)\n03-18 08:50:00.110  29563-29627/com.lingan.seeyou W/System.err\ufe55 at java.lang.Thread.run(Thread.java:838)\n03-18 08:50:00.117  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.picasso.Utils$PicassoThread.run(Utils.java:391)\n03-18 08:50:00.129  29563-29627/com.lingan.seeyou W/System.err\ufe55 Caused by: java.io.EOFException: \\n not found: size=26346 content=73b863b8fa63a579f358f86ffe1338d3fb1ae7ec26c998c1f6197717f3061b66...\n03-18 08:50:00.130  29563-29627/com.lingan.seeyou W/System.err\ufe55 at okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\n03-18 08:50:00.131  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpConnection.readHeaders(HttpConnection.java:219)\n03-18 08:50:00.133  29563-29627/com.lingan.seeyou W/System.err\ufe55 at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:198)\n03-18 08:50:00.133  29563-29627/com.lingan.seeyou W/System.err\ufe55 ... 19 more\n03-18 08:50:00.134  29563-29627/com.lingan.seeyou D/Picasso\ufe55 Hunter      executing    [R4]+12s\n03-18 08:50:00.138  29563-29627/com.lingan.seeyou D/libc-netbsd\ufe55 getaddrinfo: sc.seeyouyima.com get result from proxy >>\n03-18 08:50:00.139  29563-29627/com.lingan.seeyou I/System.out\ufe55 propertyValue:true\n03-18 08:50:00.140  29563-29627/com.lingan.seeyou I/System.out\ufe55 [CDS]rx timeout:40000\n03-18 08:50:00.140  29563-29627/com.lingan.seeyou I/System.out\ufe55 [socket][15] connection sc.seeyouyima.com/218.5.238.215:80;LocalPort=38772(45000)\n03-18 08:50:00.141  29563-29627/com.lingan.seeyou I/System.out\ufe55 [CDS]connect[sc.seeyouyima.com/218.5.238.215:80] tm:45\n03-18 08:50:00.141  29563-29627/com.lingan.seeyou D/Posix\ufe55 [Posix_connect Debug]Process com.lingan.seeyou :80\n03-18 08:50:00.150  29563-29627/com.lingan.seeyou I/System.out\ufe55 [socket][/192.168.1.30:38772] connected\n",
        "@swankjesse \ndoes that help?you can add more debug info and send me to debug by email,and i will feedback as soon as possible,maybe we can fix this problem soon.\n",
        "@iceAnson: I suspect it's a problem with your webserver. It's not returning well-formed HTTP for this request. Got the full URL?\n",
        "@swankjesse \nurl:http://sc.seeyouyima.com/icon/53f3f540c7233.png\n",
        "@swankjesse \nbut why other phone work fine with this url.?\n",
        "Try Charles? http://jaanus.com/blog/2012/02/12/debugging-http-on-an-android-phone-or-tablet-with-charles-proxy-for-fun-and-profit/\n",
        "@swankjesse\nhere is detail log:\n\nhttp://sc.seeyouyima.com/icon/5438e8e45cbe4.png\nGET /icon/5438e8e45cbe4.png HTTP/1.1\n",
        "image content is:\n\n12,372 bytes\n\n86w x 86h\n\nFormat: PNG\nColor: RGB+Alpha 8bit\n\n## COMMENTS (919 bytes)\n\nCOMMENT: 'Software'='Adobe ImageReady'\niCOMMENT [Plain ]: 'XML:com.adobe.xmp/'='<?xpacket begin=\"\ufeff\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?> <x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        \"> <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"> <rdf:Description rdf:about=\"\" xmlns:xmpMM=\"http://ns.adobe.com/xap/1.0/mm/\" xmlns:stRef=\"http://ns.adobe.com/xap/1.0/sType/ResourceRef#\" xmlns:xmp=\"http://ns.adobe.com/xap/1.0/\" xmpMM:OriginalDocumentID=\"xmp.did:D802F3B3C915E311BE92D1CBE4D2040B\" xmpMM:DocumentID=\"xmp.did:E50E572E511D11E492C0AE3F18B7175A\" xmpMM:InstanceID=\"xmp.iid:E50E572D511D11E492C0AE3F18B7175A\" xmp:CreatorTool=\"Adobe Photoshop CS6 (Windows)\"> <xmpMM:DerivedFrom stRef:instanceID=\"xmp.iid:D0F5B2A71D51E41187A0B09B1622816A\" stRef:documentID=\"xmp.did:D802F3B3C915E311BE92D1CBE4D2040B\"/> /rdf:Description /rdf:RDF /x:xmpmeta <?xpacket end=\"r\"?>'\n",
        "Can you try Charles proxy with the device that's causing problems?\n",
        "@swankjesse please look again at my report on this issue from  from month ago. We're having the same issue as @iceAnson, it works on all but one device. I provided logs from response (and pointed to possible size mismatch).\n",
        "@swankjesse \nhere is the detail log:\n\nhttp://sc.seeyouyima.com/icon/5438e8e45cbe4.png\nGET /icon/5438e8e45cbe4.png HTTP/1.1\n\n![1](https://cloud.githubusercontent.com/assets/3048174/6702121/86d5f520-cd61-11e4-8dad-f8a2e49c753f.jpeg)\n![2](https://cloud.githubusercontent.com/assets/3048174/6702122/87036424-cd61-11e4-9ab0-64ad9585b2f3.jpeg)\n",
        "@swankjesse \n\nand the hexView like below:\n\n![3](https://cloud.githubusercontent.com/assets/3048174/6702145/f54bfec8-cd61-11e4-8d2f-f7c76bba6b97.jpeg)\n",
        "@epint is there a missing CRLF (`0e 0a`) between the last header line and the response body?\n",
        "@swankjesse  is it useful?\n",
        "Run this program? I want to see if the bytes we get are the ones we expect. Paste the output when you have something!\n\n```\n    Socket socket = new Socket(\"sc.seeyouyima.com\", 80);\n\n    BufferedSink sink = Okio.buffer(Okio.sink(socket));\n    sink.timeout().timeout(5, TimeUnit.SECONDS);\n    sink.writeUtf8(\"GET /icon/5438e8e45cbe4.png HTTP/1.1\\r\\n\");\n    sink.writeUtf8(\"Accept-Encoding: gzip\\r\\n\");\n    sink.writeUtf8(\"User-Agent: okhttp/2.3.0\\r\\n\");\n    sink.writeUtf8(\"Connection: Keep-Alive\\r\\n\");\n    sink.writeUtf8(\"Host: sc.seeyouyima.com\\r\\n\");\n    sink.writeUtf8(\"\\r\\n\");\n    sink.flush();\n\n\n    Source source = Okio.buffer(Okio.source(socket));\n    Buffer buffer = new Buffer();\n    while (source.read(buffer, 2048) != -1) {\n      System.out.println(buffer.readByteString().hex());\n    }\n```\n",
        "ok,hold on\n",
        "When I run it on my desktop, I get hex that corresponds to:\n\n```\nHTTP/1.1 200 OK\nDate: Wed, 18 Mar 2015 00:32:36 GMT\nServer: nginx/1.4.4\nContent-Type: image/png\nContent-Length: 12372\nAccept-Ranges: bytes\nAccess-Control-Allow-Origin: *\nAccess-Control-Max-Age: 2592000\nCache-Control: public, max-age=31536000\nContent-Disposition: inline; filename=\"5438e8e45cbe4.png\"\nContent-Transfer-Encoding: binary\nETag: \"Fo36srH0XgSuMch_AL-fTQ5hR-eS\"\nX-Log: mc.g;IO\nX-Reqid: -XoAAIGdAKsti8ET\nX-Whom: nb263\nX-Qiniu-Zone: 0\nAge: 1\nX-Via: 1.1 ych59:8104 (Cdn Cache Server V2.0), 1.1 taizhou40:5 (Cdn Cache Server V2.0)\nConnection: keep-alive\n\n```\n\n(followed by a PNG file)\n",
        "Just ran OKHttp 2.3.0 against that POST request I mentioned earlier. As with OkHttp 2.2.0, this is occurring every time this request is made using N5 Lollipop emulator (windows 7 64bit with HAXM) running through burpsuite proxy. The error manifests whether the response comes through or not (i.e. intercept OFF vs intercept ON in burp). The OkHttp 2.3.0 logs:\n\nretrofit.RetrofitError: unexpected end of stream on Connection{scrubbed:80, proxy=DIRECT@ hostAddress=scrubbed cipherSuite=none protocol=http/1.1} (recycle count=0)\nat retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:395)\nat retrofit.RestAdapter$RestHandler.access$100(RestAdapter.java:220)\nat retrofit.RestAdapter$RestHandler$2.obtainResponse(RestAdapter.java:278)\nat retrofit.CallbackRunnable.run(CallbackRunnable.java:42)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\nat retrofit.Platform$Android$2$1.run(Platform.java:142)\nat java.lang.Thread.run(Thread.java:818)\nCaused by: java.io.IOException: unexpected end of stream on Connection{scrubbed:80, proxy=DIRECT@ hostAddress=scrubbed cipherSuite=none protocol=http/1.1} (recycle count=0)\nat com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\nat com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\nat com.squareup.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:830)\nat com.squareup.okhttp.internal.http.HttpEngine.access$200(HttpEngine.java:95)\nat com.squareup.okhttp.internal.http.HttpEngine$NetworkInterceptorChain.proceed(HttpEngine.java:823)\nat com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:684)\nat com.squareup.okhttp.Call.getResponse(Call.java:272)\nat com.squareup.okhttp.Call$ApplicationInterceptorChain.proceed(Call.java:228)\nat com.squareup.okhttp.Call.getResponseWithInterceptorChain(Call.java:199)\nat com.squareup.okhttp.Call.execute(Call.java:79)\nat retrofit.client.OkClient.execute(OkClient.java:53)\nat retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:326)\n... 7 more\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\nat okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\nat com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:190)\n... 18 more\n\nFortunately this is not manifesting on a real N5 Lollipop device without proxy, having trouble blocking responses with Charles as N5/OkHttp seems to be ignoring the proxy setting setup for the WIFI connection.\n\nHave also confirmed that the response hex contains CRLF (0d 0a) between header and body (there's 2x CRLF, one being the end of header).\n",
        "@coreform try this on your OkHttpClient:\n\n```\n    client.setProxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"192.168.x.y\", 8888)));\n```\n",
        "thanks @swankjesse , now with the real N5 device really going through Charles AND with Charles blocking responses, the error manifests:\n\nretrofit.RetrofitError: unexpected end of stream on Connection{scrubbed:80, proxy=HTTP@/192.168.7.93:8888 hostAddress=192.168.7.93 cipherSuite=none protocol=http/1.1} (recycle count=0)\nat retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:395)\nat retrofit.RestAdapter$RestHandler.access$100(RestAdapter.java:220)\nat retrofit.RestAdapter$RestHandler$2.obtainResponse(RestAdapter.java:278)\nat retrofit.CallbackRunnable.run(CallbackRunnable.java:42)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\nat retrofit.Platform$Android$2$1.run(Platform.java:142)\nat java.lang.Thread.run(Thread.java:818)\nCaused by: java.io.IOException: unexpected end of stream on Connection{scrubbed:80, proxy=HTTP@/192.168.7.93:8888 hostAddress=192.168.7.93 cipherSuite=none protocol=http/1.1} (recycle count=0)\nat com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\nat com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\nat com.squareup.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:830)\nat com.squareup.okhttp.internal.http.HttpEngine.access$200(HttpEngine.java:95)\nat com.squareup.okhttp.internal.http.HttpEngine$NetworkInterceptorChain.proceed(HttpEngine.java:823)\nat com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:684)\nat com.squareup.okhttp.Call.getResponse(Call.java:272)\nat com.squareup.okhttp.Call$ApplicationInterceptorChain.proceed(Call.java:228)\nat com.squareup.okhttp.Call.getResponseWithInterceptorChain(Call.java:199)\nat com.squareup.okhttp.Call.execute(Call.java:79)\nat retrofit.client.OkClient.execute(OkClient.java:53)\nat retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:326)\n... 7 more\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\nat okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\nat com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:190)\n... 18 more\n\nNow, with the real N5 really going through Charles AND with Charles allowing responses to come back through, the error does not manifest. That is a different result to the N5 emulator, where the error manifests whether responses blocked or not.\n",
        "Just to be sure, to be sure, to be sure: Jesse you recently said:\n\n> \"is there a missing CRLF (0e 0a) between the last header line and the response body?\"\n\n0e == Shift Out, while\n0d == Carriage Return\n\nOkHttp isn't erroneously looking for '0e 0a' when it should be looking for '0d 0a', is it?\n",
        "@swankjesse \n\nthis is my log:\n\nHTTP/1.1 200 OK\nDate: Tue, 17 Mar 2015 09:41:25 GMT\nServer: nginx/1.4.4\nContent-Type: image/png\nContent-Length: 12372\nAccept-Ranges: bytes\nAccess-Control-Allow-Origin: *\nAccess-Control-Max-Age: 2592000\nCache-Control: public, max-age=31536000\nContent-Disposition: inline; filename=\"5438e8e45cbe4.png\"\nContent-Transfer-Encoding: binary\nETag: \"Fo36srH0XgSuMch_AL-fTQ5hR-eS\"\nX-Log: mc.g;IO\nX-Reqid: -XoAAIGdAKsti8ET\nX-Whom: nb263\nX-Qiniu-Zone: 0\nAge: 1\nX-Via: 1.1 ych59:8104 (Cdn Cache Server V2.0), 1.1 qzh230:0 (Cdn Cache Server V2.0)\nConnection: keep-alive\n",
        "@swankjesse \nit's same with you\n",
        "@swankjesse  \ndo you need other debug info?\n",
        "@epint \nhow do you handle the problem(EOF) ?I happened so long time and make users unconfirtable experience.\n",
        "@epint \ndo you give up the okhttp?or have someother  method instead .?\n",
        "@iceAnson can you run the program above and paste the complete hex response please?\n",
        "@coreform does this occur on every URL you post to on the impacted N5?\n",
        "@iceAnson for now one user is affected and were not handling it with hope that issue will be resolved. Otherwise we have some solutions in mind (i.e. fallback to some other client etc..) but none is implemented.\n",
        "This must somehow be caused by the manufacturer modifications, from reading this thread - most of the affected devices are unlicensed chinese production. We are using OkHttp on a banking application and one client contacted the support line and we even managed to get the client with the phone to visit us and test it for 30 minutes (he did not have much time). Not a single http/https request worked through OkHttp on that application. He was using a ZOPO ZP998. It all failed with \"java.io.EOFException: \\n not found: size=17 content=03007fa861b9d60200000d0a300d0a0d0a...\". I wish I had more time to debug. \n\nHow is it possible that the same application works on tens of thousands other devices but not on this one? Maybe the manufacturers are modifying the network stream or using some proxy? Or I don't know...\n",
        "@DanielNovak even if this your point is correct, it has to be fixable in OkHttp since other clients (i.e. DefaultHttpClient) are not affected and http requests are working with same device, application and server.   \n",
        "@epint I think your bug in the emulator is different from the other bug. Your Nexus5 emulator gets an EOF on a stream of size 0; everyone else is seeing actually corrupted data in here. Wish I could get my hands on one of the impacted devices.\n\nIf any of you could run the code from this comment https://github.com/square/okhttp/issues/1114#issuecomment-82727393 and paste the resulting hex here, that'd be handy.\n",
        "@swankjesse your comment was probably ment for @coreform. We have a problem on real device. \n",
        "Jesse, I'm happy to run the test, but in the meantime I'd like to emphasize\nthat we're seeing the 0-byte issue intermittently on a Moto X 2014, Samsung\nGalaxy S3 and LG G2. These just seem to be random devices from our test.\n\nOn Thu, Mar 19, 2015, 19:30 epint notifications@github.com wrote:\n\n> @swankjesse https://github.com/swankjesse your comment was probably\n> ment for @coreform https://github.com/coreform. We have a problem on\n> real device.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/1114#issuecomment-83704504.\n",
        "Thanks @pflammertsma. I think there are two distinct problems here. I'm going to close this issue and re-open two issues for each of the two problems.\n- **[0-byte responses, issue 1517](https://github.com/square/okhttp/issues/1517).** My hypothesis is that these are just badly-behaving webservers, or proxy servers or something. In OkHttp 2.3 we're now including more information about the connection when this problem occurs. This happens to normal devices, like your Moto X 2014.\n- **[corrupt responses, issue 1518](https://github.com/square/okhttp/issues/1518).** My hypothesis here is that we're doing something to trigger another bug, and ending up with a corrupt buffer of data.\n\nIf you have an otherwise-normal, CTS-passing device that is getting corrupt, non-empty responses, then my hypothesis is invalidated & please let me know!\n",
        "Any specific reason for this kind of EOF Exception error occurrence (using retrofit) ??? we all know this is issue facing with all, but i want to know exact problem behind this kind of issue.\n",
        "for android 4.2.2 (vivo y17t)\n\njava.io.IOException: unexpected end of stream on Connection{59.46.115.124:11800, proxy=DIRECT@ hostAddress=59.46.115.124 cipherSuite=none protocol=http/1.1} (recycle count=0)\n    at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\n    at com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\n    at com.squareup.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:830)\n    at com.squareup.okhttp.internal.http.HttpEngine.access$200(HttpEngine.java:95)\n    at com.squareup.okhttp.internal.http.HttpEngine$NetworkInterceptorChain.proceed(HttpEngine.java:823)\n    at com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:684)\n    at com.squareup.okhttp.Call.getResponse(Call.java:272)\n    at com.squareup.okhttp.Call$ApplicationInterceptorChain.proceed(Call.java:228)\n    at com.squareup.okhttp.Call.getResponseWithInterceptorChain(Call.java:199)\n    at com.squareup.okhttp.Call.execute(Call.java:79)\n    at com.uu.shit.connection.NetToJavaRequest.requestServer(NetToJavaRequest.java:27)\n    at com.uu.shit.connection.ConnectionTest.doOwnTest(ConnectionTest.java:23)\n    at com.uu.shit.MainTest.doTest(MainTest.java:71)\n    at com.uu.shit.ShitActivity$2$1.run(ShitActivity.java:87)\n    at java.lang.Thread.run(Thread.java:838)\nCaused by: java.io.EOFException: \\n not found: size=1460 content=446174653a205468752c203236204d617220323031352030343a30333a303120...\n",
        "apacheclient no problem,but use okhttp have this problem,log detail:\n\n03-31 13:29:27.055: I/RetrofitCallback(3661): error.toString() :retrofit.RetrofitError: unexpected end of stream on Connection{*******_:18083, proxy=DIRECT@ hostAddress=**_******\\* cipherSuite=none protocol=http/1.1} (recycle count=0)\n03-31 13:29:45.255: I/RetrofitCallback(3661): error.getUrl() :http://*****\\* error msg :unexpected end of stream on Connection{*******_:18083, proxy=DIRECT@ hostAddress=**_******\\* cipherSuite=none protocol=http/1.1} (recycle count=0)\n",
        "I had the same issue and solved it.\nI also got Caused by: java.io.EOFException: \\n not found:\n\nAfter closer inspection I notices that after the status code, the server didn't gave a description.\nExample:\nHTTP/1.1 500 Internal server error\nContent-Type: text/xml; charset=utf-8\n\nBut this is broken:\nHTTP/1.1 500\nContent-Type: text/xml; charset=utf-8\n\nSo in my example the (somewhat exotic) http server didn't return a reason after the status code.\nRFC2616 defines a reason after the status, so in my case it's not a fault of the library.\nBut I thought I might mention it, it might help someone.\n",
        "@christophesmet \n\nDisable jit:  \nandroid:vmSafeMode=\"true\"\n\nsee this:\nhttps://github.com/square/okhttp/issues/1518\n",
        "Got the same error in our prod environment. I have validated the health of Load balancer and instnace and both seem to be working fine.\n\nCaused by: java.io.EOFException\n        at okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:154)\n        at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:189)\n        at com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:101)\n        at com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:676)\n        at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:426)\n        at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:371)\n        at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:466)\n        at retrofit.client.UrlConnectionClient.readResponse(UrlConnectionClient.java:73)\n        at retrofit.client.UrlConnectionClient.execute(UrlConnectionClient.java:38)\n        at retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:321)\n        ... 18 more\n",
        "Currently getting the dreaded EOFException.\n\nRunning:\nSamsung Galaxy Nexus\nAndroid version 4.3\n\nProject dependency:\n    compile 'com.squareup.retrofit:retrofit:1.9.0'\n\nAdapter configuration:\n        RestAdapter adapter = new RestAdapter.Builder()\n                .setEndpoint(host)\n                .setRequestInterceptor(interceptor)\n                .setLogLevel(RestAdapter.LogLevel.FULL)\n                .setConverter( new GsonConverter(gson))\n                .build();\n\nThanks, listening for updates.\n",
        "Maybe _malformed/different version gzip_ reply from server(?)\n\n``` java\n    public static void main(String[] args) {\n        final OkHttpClient client = new OkHttpClient();\n        Request request = new Request.Builder()\n                .url(\"http://sosu.qidian.com/ajax/search.ashx?method=Search&keyword=TEST\")\n                .addHeader(\"Referer\", \"http://sosu.qidian.com/\")\n                .build();\n\n        Response response = null;\n        String res = null;\n        try {\n            response = client.newCall(request).execute();\n            res = response.body().string();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        if (response != null && res != null)\n            System.out.println(res);\n    }\n```\n\nBy adding `.addHeader(\"Accept-Encoding\", \"none\")` to above code I'm able to get the data I wanted. But the aim for me is to save the bandwidth, so this is only used as a temporary workaround.\n\nTo check if is header dependent error, I have also test with curl using same headers, and the result has been properly replied.\n\n``` text\ncurl \"http://sosu.qidian.com/ajax/search.ashx?method=Search&keyword=DD\" -H \"Accept: */*\" -H \"Referer: http://sosu.qidian.com/\" -H \"Connection: keep-alive\" -H \"Accept-Encoding: gzip\" -H \"User-Agent: okhttp/2.4.0\" --compressed\n\nGET /ajax/search.ashx?method=Search&keyword=DD HTTP/1.1\n> Host: sosu.qidian.com\n> Accept: */*\n> Referer: http://sosu.qidian.com/\n> Connection: keep-alive\n> Accept-Encoding: gzip\n> User-Agent: okhttp/2.4.0\n>\n< HTTP/1.1 200 OK\n< Date: Fri, 24 Jul 2015 22:09:55 GMT\n< Server: Microsoft-IIS/6.0\n< X-Powered-By: ASP.NET\n< X-AspNet-Version: 2.0.50727\n< Set-Cookie: ASP.NET_SessionId=*hidden*; domain=.qidian.com; path=/; HttpOnly\n< Set-Cookie: sosu_abtest=; expires=Thu, 23-Jul-2015 22:10:04 GMT; path=/\n< Cache-Control: private\n< Content-Type: text/plain; charset=utf-8\n< Content-Encoding: gzip\n< Transfer-Encoding: chunked\n< X-Via: 1.1 czdx84:8107 (Cdn Cache Server V2.0), 1.1 ld15:6 (Cdn Cache Server V2.0)\n< Connection: keep-alive\n<\n{ [5096 bytes data]\n```\n\nI've also created `chunked gzip` response using Apache and php, which okhttp had no problem:\n\n``` php\n=== BEGIN ===\n\n<?php sleep(1);\nfor ($i = 0; $i < 80000; $i++) {\n    echo mt_rand();\n}\nsleep(1);    ?>\n\n=== END ===\n```\n\n`.htaccess`: `SetOutputFilter DEFLATE`\n",
        "An ssl issue caused the no response bug with me.\nFor some reason, the error isn't show in the sslsocketfactory.\nBut doing the same call in python does show an ssl error.\n",
        "Got the same error\n\njava.io.IOException: unexpected end of stream on Connection{p33.qhimg.com:80, proxy=DIRECT@ hostAddress=42.81.9.47 cipherSuite=none protocol=http/1.1} (recycle count=1)\nat com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:211)\nat com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\nat com.squareup.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:917)\nat com.squareup.okhttp.internal.http.HttpEngine.access$300(HttpEngine.java:95)\nat com.squareup.okhttp.internal.http.HttpEngine$NetworkInterceptorChain.proceed(HttpEngine.java:902)\nat com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:760)\nat com.squareup.okhttp.Call.getResponse(Call.java:274)\nat com.squareup.okhttp.Call$ApplicationInterceptorChain.proceed(Call.java:230)\nat com.squareup.okhttp.Call.getResponseWithInterceptorChain(Call.java:201)\nat com.squareup.okhttp.Call.execute(Call.java:81)\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\nat okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\nat com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\n... 17 more\n",
        "OKHttp 2.4 doesn't work on some HUAWEI devices .. \n\neg: for android 4.2.2 (HUAWEI Y518-T00) wifi and 3G\n\n```\ncompile 'com.squareup.okhttp:okhttp:2.4.0'\ncompile 'com.squareup.retrofit:retrofit:1.9.0'\n```\n\nCurrently getting the dreaded EOFException\uff1alike this\n\n```\n2261-3324/com.bqs.wetime.fruits D/Retrofit\ufe55 java.io.IOException: unexpected end of stream on Connection{192.168.1.208:8080, proxy=DIRECT@ hostAddress=192.168.1.208 cipherSuite=none protocol=http/1.1} (recycle count=0)\n            at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:211)\n            at com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\n            at com.squareup.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:917)\n            at com.squareup.okhttp.internal.http.HttpEngine.access$300(HttpEngine.java:95)\n            at com.squareup.okhttp.internal.http.HttpEngine$NetworkInterceptorChain.proceed(HttpEngine.java:902)\n            at com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:760)\n            at com.squareup.okhttp.Call.getResponse(Call.java:274)\n            at com.squareup.okhttp.Call$ApplicationInterceptorChain.proceed(Call.java:230)\n            at com.squareup.okhttp.Call.getResponseWithInterceptorChain(Call.java:201)\n            at com.squareup.okhttp.Call.execute(Call.java:81)\n            at retrofit.client.OkClient.execute(OkClient.java:53)\n            at retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:326)\n            at retrofit.RestAdapter$RestHandler.access$100(RestAdapter.java:220)\n            at retrofit.RestAdapter$RestHandler$1.invoke(RestAdapter.java:265)\n            at retrofit.RxSupport$2.run(RxSupport.java:55)\n            at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:390)\n            at java.util.concurrent.FutureTask.run(FutureTask.java:234)\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1080)\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:573)\n            at retrofit.Platform$Android$2$1.run(Platform.java:142)\n            at java.lang.Thread.run(Thread.java:838)\n     Caused by: java.io.EOFException: \\n not found: size=9539 content=096f72672e737072696e676672616d65776f726b2e6a6462632e64617461736f...\n            at okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\n            at com.squareup.okhttp.internal.http.HttpConnection.readHeaders(HttpConnection.java:220)\n            at com.squareup.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:199)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at com.squareup.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at com.squareup.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:917)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at com.squareup.okhttp.internal.http.HttpEngine.access$300(HttpEngine.java:95)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at com.squareup.okhttp.internal.http.HttpEngine$NetworkInterceptorChain.proceed(HttpEngine.java:902)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at com.squareup.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:760)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at com.squareup.okhttp.Call.getResponse(Call.java:274)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at com.squareup.okhttp.Call$ApplicationInterceptorChain.proceed(Call.java:230)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at com.squareup.okhttp.Call.getResponseWithInterceptorChain(Call.java:201)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at com.squareup.okhttp.Call.execute(Call.java:81)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at retrofit.client.OkClient.execute(OkClient.java:53)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:326)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at retrofit.RestAdapter$RestHandler.access$100(RestAdapter.java:220)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at retrofit.RestAdapter$RestHandler$1.invoke(RestAdapter.java:265)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at retrofit.RxSupport$2.run(RxSupport.java:55)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:390)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.util.concurrent.FutureTask.run(FutureTask.java:234)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1080)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:573)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at retrofit.Platform$Android$2$1.run(Platform.java:142)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.lang.Thread.run(Thread.java:838)\n```\n",
        "Got the same error\nANDROID_VERSION=4.2.2\nPHONE_MODEL=Quest 507\n\nokhttp-2.4.0\nokhttp-urlconnection-2.4.0\nokio-1.4.0\n",
        "added android:vmSafeMode=\"true\" and problem is gone!\n",
        "I'm getting this from a server app where we're using OkHttp 2.2.0 under Retrofit. I'm making an HTTPS POST request to a slow-responding service and it ends up getting retried because this exception is thrown. The retry is causing us problems because the request isn't idempotent. If I set OkHttp's readTimeout lower it stops happening because the read times out before this exception is thrown.\n\nPlease let me know if I can help debugging.\n",
        "Hey dude, I can reproduce this with private code. In that code, I can switch between OkHttp which exhibits the issue, and UniRest which does not. With some effort I could make a standalone proof for y'all. RSVP :) mailto: @swankjesse ",
        "I haven't been able to reproduce this. Punting to 2.2.\n"
    ],
    "2208": [],
    "1119": [
        "Thanks @swankjesse\n"
    ],
    "421": [],
    "21": [],
    "3624": [],
    "1131": [
        "A null request body is definitely not allowed; I need to fix our implementation to reject this. You can fix the problem on your end by replacing null with an empty request body:\n\n```\nRequestBody emptyBody = RequestBody.create(null, new byte[0]);\n```\n\nI'll fix this by rejecting the bogus input.\n",
        "thanks, works for me.. I thought it was supposed to be support because the Call method actually assigns an emptySink if the body is null for a POST/PUT request. But good to know that the contentType can be null.\n"
    ],
    "1132": [
        "Yup. Looks like the cause is that our SPDY layer isn't prepared to buffer POST request bodies that could fail and need to be retried. That's independent of the SPDY/HTTP difference, and should be straightforward to fix.\n",
        "I find this strange: \"buffer POST request bodies that could fail and need to be retried\". POST requests are not idempotent (http://tools.ietf.org/html/rfc7231#section-8.1.3) and thus can't be safely retried. Is there any way to turn off retrying completely for POSTs/per request? This should also be a valid workaround to this issue, if I'm understanding you correctly.\n",
        "Yes, definitely. We only want to retry for certain weird redirects. But right now there are potential cases where we're doing it wrong.\n"
    ],
    "1503": [],
    "2149": [],
    "1141": [],
    "1901": [],
    "1146": [],
    "2750": [],
    "2973": [],
    "1149": [],
    "888": [],
    "1158": [
        "It's possible we have this wrong. I'd like to study the specs further before making changes.\n",
        "And also, study what Chrome & Firefox do!\n",
        "Yeah, I think we're doing this wrong. The response codes should be used to inform default caching behavior, but the Cache-Control headers should take precedence if they're present.\n"
    ],
    "73": [],
    "1163": [
        "Is somebody MITMing your connections?\n",
        "We could probably help you to trace that down by putting more data in the IOException. Possibly some identifiers from the certificate? Let's do that.\n",
        "@swankjesse I am not aware if someone is MITMing our connections. Thanks for adding more trace.\n",
        "I've added more context. When you've deployed the update & see the new message, please circle back here & let me know what was going on!\n",
        "@swankjesse. We deployed yesterday to a few users and we got the new messages coming in. Here are the new stacktraces:\n\n```\nCaused by: java.io.IOException: Hostname hapi.couchsurfing.com not verified:\n    certificate: sha1/r4XdjuTmlen7QsCnkgBepuW/7tI=\n    DN: CN=*.boingohotspot.net,O=Boingo Wireless,L=Los Angeles,ST=California,C=US\n    subjectAltNames: [*.boingohotspot.net]\n       at com.squareup.okhttp.Connection.upgradeToTls(Connection.java:260)\n```\n\n```\nretrofit.RetrofitError: Hostname hapi.couchsurfing.com not verified:\n    certificate: sha1/dt+P+XTl0hy1Odbc9iQl/Yuoh20=\n    DN: CN=controller.mobile.lan,O=UCOPIA Communications,OU=UCOPIA Communications,L=Montrouge,ST=IDF,C=FR\n    subjectAltNames: [controller.mobile.lan, mobileapp.ucopia.com]\n       at retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:395)\n       at retrofit.RestAdapter$RestHandler.invoke(RestAdapter.java:240)\n       at $Proxy0.a()\n```\n\n```\njava.io.IOException: Hostname hapi.couchsurfing.com not verified:\n    certificate: sha1/cJcRXkq5f+V0iFm1eXeOgui6KmU=\n    DN: CN=wifisignon.shaw.ca,OU=Engineering,O=Shaw Cablesystems G.P.,L=Calgary,ST=Alberta,C=CA\n    subjectAltNames: [wifisignon.shaw.ca]\n       at com.squareup.okhttp.Connection.upgradeToTls(Connection.java:260)\n       at com.squareup.okhttp.Connection.connect(Connection.java:158)\n```\n\nI don't know much, but is MITM the only possible explanation? \n",
        "last one is WiFi HotSpot sign in. I guess OkHttp wasn't aware of it.\n",
        "Looks like all of these are legitimate man-in-the-middle attacks by rogue internet service providers. I assume that couchsurfing.com isn't owned by Shaw Cablesystems or Boingo Wireless.\n",
        "@swankjesse yeap. Also why are you saying \"rogue\" internet service providers, aren't they just Network Sign-On redirect?\n",
        "No. I'm saying bad companies like Boingo that forge TLS certificates in order to man-in-the-middle attack your network session.\n",
        "Thanks for the investigation @swankjesse . I am still unsure how sarcastic I want be in the error message but I ll figure that one on my own.\n"
    ],
    "1870": [],
    "1167": [],
    "756": [],
    "1165": [],
    "4097": [],
    "590": [],
    "744": [],
    "1330": [],
    "1191": [
        "Looks like a bug in our code. We're disconnecting before sending the request headers. Can fix.\n",
        "Liverail SDK seems to be affected by the same bug : \n\n```\njava.lang.NullPointerException: Attempt to invoke virtual method 'void com.squareup.okhttp.internal.spdy.SpdyStream.close(com.squareup.okhttp.internal.spdy.ErrorCode)' on a null object reference\n            at com.squareup.okhttp.internal.http.SpdyTransport.disconnect(SpdyTransport.java:221)\n            at com.squareup.okhttp.internal.http.HttpEngine.disconnect(HttpEngine.java:465)\n            at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.disconnect(HttpURLConnectionImpl.java:113)\n            at com.squareup.okhttp.internal.huc.DelegatingHttpsURLConnection.disconnect(DelegatingHttpsURLConnection.java:93)\n            at com.squareup.okhttp.internal.huc.HttpsURLConnectionImpl.disconnect(HttpsURLConnectionImpl.java:25)\n            at libraries.marauder.analytics.request.protocol.c.a(Unknown Source)\n            at libraries.marauder.analytics.request.protocol.a.a(Unknown Source)\n            at libraries.marauder.analytics.j.a(Unknown Source)\n            at libraries.marauder.analytics.j.b(Unknown Source)\n            at libraries.marauder.analytics.j.a(Unknown Source)\n            at libraries.marauder.analytics.r.run(Unknown Source)\n            at libraries.marauder.analytics.n.run(Unknown Source)\n            at libraries.marauder.analytics.utils.concurrent.g.run(Unknown Source)\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n            at java.lang.Thread.run(Thread.java:818)\n            at libraries.marauder.analytics.utils.concurrent.c.run(Unknown Source)\n```\n"
    ],
    "1888": [],
    "1339": [],
    "2137": [],
    "965": [],
    "498": [],
    "1211": [
        "My triage from https://code.google.com/p/android/issues/detail?id=82889:\n\nSummary:\n\nIf my analysis / informed guesses below are sound, this is probably not a common occurrence - it probably requires a file system failure like running out of space.\n\nI'd need to investigate further to work out the best way of dealing with this scenario. Perhaps the OkHttp maintainers will have suggestions after they have looked at it.\n\nAnalysis:\n\nI concur with Jessie's analysis. The internal check being failed in DiskLruCache is:\n\n```\nif (entry.currentEditor != editor) {\n  throw new IllegalStateException();\n}\n```\n\nThe only way I can see that happening is when entry.currentEditor is set to null and then an IOException is thrown. This will occur toward the end of completeEdit() with either the writeUtf8() or the flush() on the journalWriter:\n\n```\nentry.currentEditor = null;\nif (entry.readable | success) {\n  entry.readable = true;\n  journalWriter.writeUtf8(CLEAN + ' ' + entry.key + entry.getLengths() + '\\n');\n  if (success) {\n    entry.sequenceNumber = nextSequenceNumber++;\n  }\n} else {\n  lruEntries.remove(entry.key);\n  journalWriter.writeUtf8(REMOVE + ' ' + entry.key + '\\n');\n}\njournalWriter.flush();\n```\n\nGiven the journalWriter is buffered and flushed regularly, I think the failure would most likely be on the flush and suggests the CLEAN or the REMOVE would not be written. It's possible that the DiskLruCache is already trying to write a record of a failure (as the result of an abort() or a commit() with errors), and so it's likely to be attempting to write a \"REMOVE\" line.\n\nIn order to repeat, there would need to an issue with the file system: perhaps running out of free space or a sudden permissions issue. The journal file will be left in a bad state, but whether this is a problem\n\nWe could swallow the error in abortQuietly(), avoid throwing the IllegalStateException, but there may be a better, overarching solution that would require more thought.\n",
        "I also met the same crash, code as following:\n\n``` java\ntry {\n    if (mDiskLruCache != null && mDiskLruCache.get(key) == null) {\n        editor = mDiskLruCache.edit(key);\n        if (editor != null) {\n            if (addBitmapToDiskCache(editor, bitmap)) {\n                mDiskLruCache.flush();\n                editor.commit();\n                Log.d(TAG, \"image put on disk cache \" + key);\n            } else {\n                editor.abort();\n                Log.e(TAG, \"ERROR on: image put on disk cache \" + key);\n            }\n        }\n    }\n} catch (IOException ioe) {\n    Log.e(TAG, \"ERROR on: image put on disk cache \" + key + \", \" + ioe);\n} finally {\n    try {\n        // TODO IllegalStateException\n        // at com.jakewharton.disklrucache.DiskLruCache.completeEdit\n        if (editor != null) {\n            editor.abort();\n        }\n    } catch (IOException ignore) {\n    }\n}\n```\n\nthen I move the `try-catch` code snippet from `finally` into `catch(IOException ioe)`, and then it works well and didn't crash any more.\n\n``` java\ntry {\n    ...\n} catch (IOException ioe) {\n    Log.e(TAG, \"ERROR on: image put on disk cache \" + key + \", \" + ioe);\n    try {\n        if (editor != null) {\n            editor.abort();\n        }\n    } catch (IOException ignore) {\n    }\n}\n```\n\nBut I had thought the edit lock should be released every time, so I release it by calling `editor.abort()` in `finally`.\nHad I understood something wrong?  : (\n\nRefer: [Using DiskLruCache in android 4.0 does not provide for openCache method](http://stackoverflow.com/a/10235381/2722270)\n"
    ],
    "910": [],
    "4352": [],
    "239": [],
    "4721": [],
    "4616": [],
    "1243": [],
    "3572": [],
    "34": [],
    "1239": [
        "Thanks for fixing this!\n"
    ],
    "4240": [],
    "518": [],
    "4513": [],
    "45": [],
    "4741": [],
    "3983": [],
    "3450": [],
    "4361": [],
    "868": [],
    "2471": [],
    "2446": [],
    "4341": [],
    "2648": [],
    "4494": [],
    "3": [],
    "2558": [],
    "120": [],
    "3257": [],
    "4555": [],
    "4430": [],
    "637": [],
    "28": [],
    "2406": [],
    "1294": [],
    "773": [],
    "3501": [],
    "457": [],
    "552": [],
    "1306": [
        "This will happen if the connection pool contains connections which are not yet eligible for eviction. The thread is waiting for either another connection to be added (back) to the pool, or for the wait to timeout so it can check again.\n\nJesse, I think evictAll() should issue a notify after the connection.clear().\n\nJohan, are you calling something like ConnectionPool.getDefault().evictAll() in any kind of shutdown hook? If not, I'm wondering why you didn't see this before. If Jesse does add the notify() it wouldn't be fool-proof unless you can be sure that no connections are still in use and might be added after evictAll() is called. How effective the call is would depend on what guarantees you have regarding any other threads when the evictAll() is called.\n",
        "I tried calling evictAll() in a shutdown hook but that did not make a difference. Most likely because no notify was issued for the thread to check again after eviction. Not sure before what I should have seen it but I just added OkHttp to the project since I am already using Retrofit and needed to configure connection timeouts. That is true that there is no guarantee if the application is in use.\n"
    ],
    "185": [],
    "1718": [],
    "3125": [],
    "1328": [
        "Yup, here's an interleaving that will cause the test to flake:\n1. MAIN: schedules a timeout on WATCHDOG\n2. MAIN: begins read\n3. WATCHDOG: timeout reached! calls closeLater(). \n4. WATCHDOG: closeLater() calls notifyAll(). Context switch _before_ `connection.removeStream(id);`\n5. MAIN: Object.wait() interrupted by watchdog. Throws timeout exception.\n6. MAIN: asserts connection count, expected to be 0, but it's still 1.\n7. WATCHDOG: removes the connection. Too late!\n"
    ],
    "1011": [],
    "280": [],
    "2184": [],
    "13": [],
    "1336": [
        "Register your socket factory with your OkHttpClient.\nOn Jan 17, 2015 5:33 PM, \"Lobooo\" notifications@github.com wrote:\n\n> Hi, how can I load a self signed certificate using okhttp?\n> Using apache standard library I just register my SocketFactory and it\n> works like this:\n> \n> public class HttpClientUtil {\n> public static DefaultHttpClient getNewHttpClient() {\n> try {\n> KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n> trustStore.load(null, null);\n> \n> ```\n>     SSLSocketFactory sf = new MySSLSocketFactory(trustStore);\n>     sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n> \n>     HttpParams params = new BasicHttpParams();\n>     HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n>     HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n> \n>     SchemeRegistry registry = new SchemeRegistry();\n>     registry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n>     registry.register(new Scheme(\"https\", sf, 443));\n> \n>     ClientConnectionManager ccm = new ThreadSafeClientConnManager(params, registry);\n> \n>     return new DefaultHttpClient(ccm, params);\n> } catch (Exception e) {\n>     return new DefaultHttpClient();\n> }\n> ```\n> \n> }\n> \n> }\n> \n> public class MySSLSocketFactory extends SSLSocketFactory {\n> SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n> \n> public MySSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n>     super(truststore);\n> \n> ```\n> TrustManager tm = new X509TrustManager() {\n>     public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n>     }\n> \n>     public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n>     }\n> \n>     public X509Certificate[] getAcceptedIssuers() {\n>         return null;\n>     }\n> };\n> \n> sslContext.init(null, new TrustManager[] { tm }, null);\n> ```\n> \n> }\n> \n> @Override\n> public Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n>     return sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n> }\n> \n> @Override\n> public Socket createSocket() throws IOException {\n>     return sslContext.getSocketFactory().createSocket();\n> }\n> \n> }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/1336.\n",
        "@JakeWharton Sorry I cannot find how to Register in OkHttp,can you give me some details\uff1f\n",
        "I did something as below\uff0cbut not work\uff0chow to Register\uff1f\n\npublic class OkHttpClientUtil {\n    public static OkHttpClient getUnsafeOkHttpClient() {\n\n```\n    try {\n        // Create a trust manager that does not validate certificate chains\n        TrustManager[] trustAllCerts = new TrustManager[] {\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {\n                    }\n\n                    @Override\n                    public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {\n                    }\n\n                    @Override\n                    public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n                        return null;\n                    }\n                }\n        };\n\n        // Install the all-trusting trust manager\n        SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n        sslContext.init(null, trustAllCerts, new java.security.SecureRandom());\n        // Create an ssl socket factory with our all-trusting manager\n        SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();\n        OkHttpClient okHttpClient = new OkHttpClient();\n        okHttpClient.setFollowSslRedirects(true);\n        okHttpClient.setSslSocketFactory(sslSocketFactory);\n        okHttpClient.setHostnameVerifier(new HostnameVerifier() {\n            @Override\n            public boolean verify(String hostname, SSLSession session) {\n                return true;\n            }\n        });\n\n        return okHttpClient;\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}\n```\n\n}\n",
        "That's precisely what I would have suggested. What errors are you seeing?\n",
        "I get two ssession through OkHttp\uff0cone is for login\uff0canother for captcha getting\uff0cbut sometimes captcha return null\uff0cIt works well when I use HttpClient\n\n\u53d1\u81ea\u6211\u7684 iPhone\n\n> \u5728 2015\u5e741\u670819\u65e5\uff0c05:20\uff0cJake Wharton notifications@github.com \u5199\u9053\uff1a\n> \n> That's precisely what I would have suggested. What errors are you seeing?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n",
        "I need to do this too. Can someone have an example working ?\n",
        "Needs a recipe for our recipes page.\n",
        "There's a lot to cover on how to to customize trust with OkHttp:\n- Which certificate authorities to trust, including self-signed certificates\n- How to get the PEM files for their root certificates\n- How to import them into a JKS (Java Key Store) or BKS (Bouncy Castle Key Store for Android)\n- How to load that keystore at runtime, and use it to get a SslSocketFactory.\n\nPlus the keystores need passwords, but those passwords don't add security. At least on Android, the keystore and its password hold no secrets, and are expected to be installed on untrusted user's devices.\n\nTo do this properly we'd want a sample program that can accept `.pem` files and emits the corresponding `.jks` / `.bks` file. Even better, teach OkHttp to accept PEM files natively. (Is this actually hard?)\n"
    ],
    "87": [],
    "1342": [
        ":+1:\n\nI don't think I can emoji in email...\nOn Jan 21, 2015 6:30 PM, \"Jesse Wilson\" notifications@github.com wrote:\n\n> Per https://twitter.com/b4taylor/status/558017198107537408\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/1342.\n",
        "What do you guys think? Implementing `start(String hostname, int port)` where hostname is default `\"localhost\"` in the other versions of `start(...)`?\n",
        "Maybe `start(InetAddress host, int port)`?\n",
        "And oh, hey. My email emoji worked!\n",
        "Would `start(InetSocketAddress)` work? \n\nI like that and `start(InetAddress, port)`.\n",
        "This happened. On `master`.\n"
    ],
    "2950": [],
    "3193": [],
    "1349": [
        "Write the multipart body to a `Buffer`. Then use that `Buffer` as the body for the actual request.\n",
        "Can be?\n\n```\nBuffer buffer = new Buffer();\nrequestBody.writeTo(buffer);\ncom.squareup.okhttp.Request request = new com.squareup.okhttp.Request.Builder()\n            .url(mockWebServer.getUrl(\"/images/\"))\n            .post(RequestBody.create(MultipartBuilder.FORM,buffer.readByteArray()))\n            .build();\n```\n",
        "Hmm, it's unfortunate that you to call `.readByteArray()`. Maybe we should allow passing a `Buffer`. I'll have to see if that has any adverse effects.\n",
        "Use `buffer.size()`\n",
        "I Agree. \n\n```\npublic static RequestBody create(final MediaType contentType, final Buffer buffer) {\n    return new RequestBody() {\n      @Override public MediaType contentType() {\n        return contentType;\n      }\n\n      @Override public long contentLength() {\n        return buffer.size();\n      }\n\n      @Override public void writeTo(BufferedSink sink) throws IOException {\n        Source source = buffer;\n        try {\n          sink.writeAll(source);\n        } finally {\n          Util.closeQuietly(source);\n        }\n      }\n    };\n  }\n```\n",
        "works fine , but it would be a viable option `Request` accepted `Buffer`  as a parameter?\n",
        "Unfortunately since `Buffer` is mutable, we'd need to defensively copy in that case, which would be inefficient. Does tempt me to offer an optimized `Buffer.byteString()` that shares pages with the backing-buffer.\n",
        "Definitely not a good choice\nin this case is possible create a method that takes a `RequestBody` and new `RequestBody` that knows its content length. It is not always necessary to know the content-length\n",
        "I'm currently having similar situation where server didn't want to work with <code>Transfer-Encoding=chunked</code> instead of <code>Content-Length</code> header so I had to use @felipeska 's approach with one change which made it complete.\n\nPassing <code>MediaType.FORM</code> to <code>create</code> method removed boundary which rendered multipart request useless. Instead of it, I've passed <code>requestBody.contentType()</code> and maintained same <code>Content-Type</code> which was built by <code>MultipartRequestBuilder</code>.\n\nTBH, not very happy and proud with solving it this way (allocating buffer for request just to be rewritten) since I feel there should be some way to choose this due to different server support.\n",
        "@vbokan yup. We can make `MultipartRequestBuilder` compute the content-length in its content-length method, but doing so is somewhat ugly. Made less so by an Okio change that's currently stalled:\nhttps://github.com/square/okio/pull/98\n",
        "@swankjesse may change a Request with an interceptor (Network Interceptors)?\n",
        "@vbokan You can also use an Application Interceptor. still not the best option.\n\n```\npublic class ContentLengthInterceptor implements Interceptor {\n  @Override\n  public Response intercept(Chain chain) throws IOException {\n    Request originalRequest = chain.request();\n    if (originalRequest.body().contentLength() != -1) {\n      return chain.proceed(originalRequest);\n    }\n\n    Request customRequest = originalRequest.newBuilder()\n            .method(originalRequest.method(), requestBodyWithContentLength(originalRequest.body()))\n            .build();\n    return chain.proceed(customRequest);\n  }\n\n  private RequestBody requestBodyWithContentLength(RequestBody requestBody) throws IOException {\n    Buffer buffer = new Buffer();\n    try {\n      requestBody.writeTo(buffer);\n    } catch (IOException e) {\n      throw new IOException(\"Unable to copy RequestBody\");\n    }\n    return new RequestBody() {\n      @Override\n      public MediaType contentType() {\n        return requestBody.contentType();\n      }\n\n      @Override\n      public long contentLength() {\n        return buffer.size();\n      }\n\n      @Override\n      public void writeTo(BufferedSink sink) throws IOException {\n        sink.write(ByteString.read(buffer.inputStream(), (int) buffer.size()));\n      }\n    };\n  }\n}\n```\n",
        "I hope it is put in 2.3, would be great.\nTill then, trying to use the `Buffer` method and get the work done..\n",
        "I was just bitten by the same issue when trying to upload to S3.\n\nThe proposed workaround is problematic:\n- It requires you to buffer the entire thing in-memory (can't easily side-step this one, as explicitly setting the Content-Length header [is ignored](https://github.com/square/okhttp/blob/afbcd979827f93d3c503cb4455c4804e5a5d8a8d/okhttp/src/main/java/com/squareup/okhttp/Call.java#L254)). Imagine uploading a file that weights a few mb to S3.\n- It is very non-obvious.\n",
        "@Sheikh-Aman is sad to have to do this, if you can avoid using multipartBuilder .. or take the multipartBuilder legacy as he solves.\n",
        "As a temporary workaround for me, I ended up going with using [ion](https://github.com/koush/ion#post-multipartform-data-and-read-json-with-an-upload-progress-bar) just for multipart image uploads.  Worked like a charm if anyone wants an alternative.  I'm using it for [uploading to S3](https://aws.amazon.com/articles/1434) with a multipart form submission.\n"
    ],
    "4369": [],
    "2499": [],
    "1354": [
        "Was merged to `master`.\n"
    ],
    "2684": [],
    "4649": [],
    "485": [],
    "1358": [],
    "1289": [],
    "1359": [
        "Any advice on how we should handle this in OkHttp?\n- We could implement SOCKS in the application layer, which is annoying, but not _that_ annoying. We already do it for our test server.\n- We could document that this is a problem. (Where would we do that?)\n",
        "I'm not sure there is any way around this other than to implement SOCKS in OkHttp.  The protocol is pretty simple, and I have a testing SOCKS proxy implementation here https://github.com/airlift/airlift/blob/master/http-client/src/test/java/io/airlift/http/client/jetty/TestingSocksProxy.java. \n\nAs for where to document this, I'd add it to the FAQ.  It would be good to test this on Android also, as it might correctly implement SOCKS.\n",
        "Yup. Our testing proxy is here: https://github.com/square/okhttp/blob/master/okhttp-tests/src/test/java/com/squareup/okhttp/SocksProxy.java\n\nWho is using SOCKS4?\n",
        "I only noticed it because my testing socks proxy only implemented SOCKS4.  \n",
        "I'm putting this in the icebox for now. If/when somebody really wants SOCKS4, they can bring it up here and probably submit a pull request.\n",
        "SOCKS 4 support in Java 8 is totally broken, pretty much as described here.\r\nDue to erroneous implementation in `java.net.SocksSocketImpl`, it always did SOCKS 5 logic and never went the SOCKS 4 path.\r\nIn Java 9 this is fixed and the SOCKS 4 format is properly sent if configured.",
        "Yet OkHttp hinders proper SOCKS 4 handshake, because of \r\n```java\r\nif (proxy.type() == Proxy.Type.SOCKS) {\r\n  inetSocketAddresses.add(InetSocketAddress.createUnresolved(socketHost, socketPort));\r\n} else {\r\n```\r\nin OkHttp code and\r\n```java\r\nif (useV4) {\r\n    // SOCKS Protocol version 4 doesn't know how to deal with\r\n    // DOMAIN type of addresses (unresolved addresses here)\r\n    if (epoint.isUnresolved())\r\n        throw new UnknownHostException(epoint.toString());\r\n    connectV4(in, out, epoint, deadlineMillis);\r\n    return;\r\n}\r\n```\r\nin `java.net.SocksSocketImpl`, as it only does SOCKS4 which does not work with hostnames and not SOCKS4a which could work with unresolved hostnames if the server supports it.\r\n\r\nHence this results in an `UnknownHostException`.",
        "#4265 fixes what I mentioned in my last comment",
        "Hi.\r\n\r\nAs i understand its still not possible to use socks v4 proxies with okhttp client, right?\r\nNot with java8, not with java9, not with java10?\r\n\r\nThanks.\r\n",
        "As long as @swankjesse dosn't change his mind and accepts my PR, you are right.\r\nNo SOCKS4, no SOCKS5 if the proxy cannot resolve the hostname but only the client, no custom resolution of hostnames to IPs by supplying a Dns instance.\r\n\r\nUnless of course you supply a custom socket factory that can do it despite OkHttp actively trying to prevent it by creating explicitly unresolved `InetSocketAddress`es.",
        "> As long as @swankjesse dosn't change his mind and accepts my PR, you are right.\r\n> No SOCKS4, no SOCKS5 if the proxy cannot resolve the hostname but only the client, no custom resolution of hostnames to IPs by supplying a Dns instance.\r\n> \r\n> Unless of course you supply a custom socket factory that can do it despite OkHttp actively trying to prevent it by creating explicitly unresolved `InetSocketAddress`es.\r\n\r\nThanks.\r\n\r\nCould you please point me to right direction, so i could try to implement it myself?\r\nMay be some template code or something else.\r\nReally need socks4 support in okhttp.",
        "All you have to do is to convince Jesse. :-D\nIf he would accept my PR, SOCKS4 amongst other things would work with Java 9 and up.\n\nOr you can build OkHttp yourself with my PR applied.\n\nOr you can search for a lib that provides a socket factory that is able to handle SOCKS4 and supply it to OkHttpClient.\n\nOr you can implement your own, but I didn't do this yet, so I cannot advise much on that way right now.",
        "This will work for both of you: https://gist.github.com/swankjesse/132ecc49bee853c3c335d33b9a95bef7\r\n",
        "Ah, nice idea for a workaround to have an intermediate socket factory that simply resolves the hostname, thanks, this works around all three issues with both SOCKS4 and SOCKS5 I've seen and that my PR solves. I'll definitely give it a try when I'm back from vacation.\n\n@ogolovanov you still need to use Java 9 or newer, SOCKS4 is completely and SOCKS5 partly broken in Java 8. ",
        "This sort of thing might be a good contribution to https://github.com/MarkusBernhardt/proxy-vole, but the gist is probably good for specific corporate apps that have known proxies.",
        "Isn't proxy-vole about finding proxy settings from other programs or the OS? Not about providing an actual socket factory.\n\nWhy do you think the Gist is only good for specific known proxies? As far as I had understood from a quick skim over, it just resolves the hostname and then hands over to the standard socket factory, so basically what my patch does.",
        "Because this shouldn't be on by default.  \r\n\r\nIf it's not on by default, then why confuse things about when a developer of a popular public Android app should enable this, roughly the answer is never.\r\n\r\nDo you suggest we provide this as an optional class provided in okhttp that people could use?  When should they enable this?  I'm still stuck on the questions @swankjesse has e.g. https://github.com/square/okhttp/pull/4265#issuecomment-423153637\r\n\r\nBut developers writing apps using environment configured proxies e.g. writing corporate apps using a PAC config, using a library like proxy-vole probably want stuff to just work when the PAC file points at a SOCKS 4 proxy.  So that was why I referenced that project.\r\n\r\nAnyway just a suggestion.\r\n",
        "No, I'm not suggesting to add this to OkHttp.\r\nI suggest to add my patch, hence the PR.\r\nThe effect is basically the same that Gist does, while my PR is a proper fix of the bug while the Gist is just a workaround.",
        "@swankjesse are you sure your Gist should work?\r\nI adapted the idea but cannot get it to work, because of\r\n```java\r\nrawSocket = proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.HTTP\r\n    ? address.socketFactory().createSocket()\r\n    : new Socket(proxy);\r\n```\r\nSo the socket factory is not even used for a socks proxy.",
        "It works if you trick OkHttp into thinking there's no proxy.",
        "Besides that this is a pretty horrible work-around - except maybe if you know a SOCKS proxy is used - as you then also have to do the proxy-selection logic yourself, are you sure it would work then?\r\nThe same snippet I quoted will then not do `new Socket(proxy);`, but `address.socketFactory().createSocket()` and later call `connect` on that socket with the unresolved inetaddress, so if I'm not wrong to make it work you would also have to provice a custom Socket class and there do the address resolution.",
        "I think it'll be a resolved address in that case.\r\n\r\n",
        "Ah right, because OkHttp only uses unresolved address if proxy type is SOCKS.\r\nBut I still think that with also having to have custom duplicated proxy selection logic and so on the workaround is pretty ugly compared to being able to just switch an option in OkHttp. :-(\r\n\r\nCan't we just fix the bug in OkHttp?\r\nIf the option with all the boolean-giving-around is too intrusive, maybe then simply controlled by a system property that is for experts-only use that know when they want it, or that you can tell to people when they say \"Hey, I need SOCKS4 support\"?",
        "Sorry, any update on this?\r\nOr any recommendations, please, how can i use socks4 in \"ugly\" way?",
        "@ogolovanov as I wrote, you can use the Gist from https://github.com/square/okhttp/issues/1359#issuecomment-423748310 when you also add some custom proxy selection logic, or you can apply my PR to a fork you use, or you can convince the guys here to fix the bug with my PR or something similar. :-)",
        "@ogolovanov @Vampire please just use JDK 9 or newer, which has the bug fixed there. I\u2019m not enthusiastic to add APIs to OkHttp to workaround bugs in old versions of Java.",
        "@swankjesse you are totally wrong.\r\nIn JDK <8 SOCKS4 is never used due to buggy implementation.\r\nIn JDK >=9 SOCKS4 implementation and also a bug in SOCKS5 implementation is fixed and works properly, but only if you have a resolved inet address.\r\nThe problem is, that OkHttp just provides an unresolved inet address, so SOCKS4 does **not** work with Java 9 unless you accept my PR or a similar solution, maybe just controlled by a system property instead of the boolean-giving-around.",
        "Gotcha. Is there a tracking bug in JDK >= 9 ?",
        "In Java 9+, with an implicit (no flag) resolve only when proxy == SOCKS, would this work for SOCKS4 + SOCKS5?\r\n\r\n@Vampire What's the main driver for this?  Corporate usage? Or gamers getting around region blocks?\r\n\r\nIf we lost security only when Socks is enabled, but we could get it back by using a DNS over HTTPS implementation, then maybe that is a workable solution?  In a corporate usage you legitimately may not be able to resolve the DNS from the client.  But if its for region blocks, then it will probably work.",
        "@swankjesse\r\nThere is no bug entry for JDK as there is no bug in the JDK imho.\r\nYou explicitly give it an unresolved address, who is the JDK to ignore your explicit choice and \"leak\" the domain name to the DNS server?\r\nBesides that, it would use the system configured DNS server instead of the OkHttp configured `Dns` instance.\r\n\r\n@yschimke \r\n\r\n> In Java 9+, with an implicit (no flag) resolve only when proxy == SOCKS, would this work for SOCKS4 + SOCKS5?\r\n\r\nYes, it would.\r\nActually this was the first version of my PR, as not only SOCKS4 is broken by this, but also SOCKS5 in case the configured `Dns` instance could resolve the address while the proxy could not.\r\nYou can see it at https://github.com/Vampire/okhttp/commit/924c117530fba2f3370d414ecada59cbae59a64b.\r\n\r\nThere the concern of Jesse was, that for example for Tor the addresses would be \"leaked\" to the system DNS server. That was when I changed the PR to have a configuration option. If this makes the feature too obvious and confuses the users, my suggestion was to have an experts-only system property instead, that could be used to toggle that behavior.\r\n\r\nAnother option would be to do as you suggest and was my frist version, always resolve for SOCKS proxies. If you then implement something that should not leak to DNS, I'd expect it to set a custom `Dns` instance that always returns an empty list unconditionally, so the hostnames would not leak to the dns server."
    ],
    "3691": [],
    "2014": [],
    "1372": [],
    "465": [],
    "236": [],
    "253": [],
    "4512": [],
    "824": [],
    "157": [],
    "3058": [],
    "3207": [],
    "1392": [
        "`UnknownServiceException` ?\n",
        "```\npublic class UnknownServiceException\nextends IOException\n```\n\n> Thrown to indicate that an unknown service exception has occurred. Either the MIME type returned by a URL connection does not make sense, or the application is attempting to write to a read-only URL connection.\n",
        "UnknownServiceException's name implies it's about the the user/client of the API requesting something that's not known by the implementor. However, the Javadoc of this exception says it can also be thrown if you attempt to write over a read-only connection. It's weird and doesn't sound like a great fit. Then again, we might not have too much choice.\n\nWhy not SecurityException which is about violating access/security policy? Once argument against that I've heard so far is that it's not a checked type and thus it might crash the process because it's not being caught (usually). However, code that cares about the security implications can catch these exceptions. Also, SecurityException is what happens if you have a Security Manager installed that denies TCP connections to some destination. Thus, if cleartext HTTP is denied, it's somewhat natural that SecurityException is thrown.\n\nWe could also let the user of okhttp customize what exception is thrown. For example, they could provide the class of the exception. This way, they can choose themselves whether they want a SecurityException or some subclass of an IOException.\n",
        "P.S. As I see it, the main difference from the API user's perspective between SecurityException vs IOException is that the former crashes the process by default whereas the latter does not. So, if you're only interested in blocking cleartext HTTP traffic but not interested in knowing that it was blocked and your code can continue working if cleartext HTTP requests fail, you might prefer an IOException or similar.\n",
        "Let's try to do this with minimal new API, 'cause I don't think most users are going to benefit from this. How about `UnknownServiceException` ? It's not a perfect fit, but it's in the spirit of what we're trying to do. And it means we don't need to introduce a new exception type in our API.\n",
        "UnknownServiceException it is then. What about the API for enabling this behavior? In the discussion of 1058 we talked about adding a method that states whether cleartext should be permitted. But later this was changed into specifying the set of acceptable routes. Shall I just modify the code such that when cleartext HTTP is requested by there's no CLEARTEXT route in the set, then the UnknownServiceException is thrown? This would remove the need to expose any additional API.\n",
        "Works for me.\n"
    ],
    "1395": [
        "You can test your credentials against the credentials of the unauthenticated request:\n\n```\n      @Override public Request authenticate(Proxy proxy, Response response) {\n        System.out.println(\"Authenticating for response: \" + response);\n        System.out.println(\"Challenges: \" + response.challenges());\n        String credential = Credentials.basic(\"jesse\", \"password1\");\n\n        if (credential.equals(response.request().header(\"Authorization\"))) {\n          return null; // If we already failed with these credentials, don't retry.\n        }\n\n        return response.request().newBuilder()\n            .header(\"Authorization\", credential)\n            .build();\n      }\n```\n",
        "I've added this example and another to our recipes doc.\n"
    ],
    "553": [],
    "4120": [],
    "4320": [],
    "3148": [],
    "4291": [],
    "460": [],
    "2185": [],
    "1885": [],
    "1898": [],
    "3674": [],
    "2974": [],
    "3581": [],
    "2716": [],
    "505": [],
    "2731": [],
    "3599": [],
    "1277": [],
    "3855": [],
    "1459": [
        "We're about to redo the current cache to support cache-push on HTTP/2. The cache is going to be very tricky code: we want to use it as the center of our request joining and canceling system.\n\nIt'll make this change impossible if the cache is pluggable.\n\nThat said, I'm sympathetic to your request. What features do you want, and are you willing to submit pull requests? Writing code like this for reuse is a lot of work, but if the feature is compelling enough, we could include it t in the core.\n",
        "@JaredBanyard we could probably get by with a small indirection to the file system.\n\n```\ninterface Filesystem {\n  Source source(String path);\n  Sink sink(String path);\n  Sink appendingSink(String path);\n  void delete(String path);\n  void atomicRename(String from, String to);\n}\n```\n\nBehind-the-scenes you could do whatever. Encrypt per-file, keep things in-memory, in-memory cache. We'd start with this as a non-public API in `internal` (subject to API changes between OkHttp releases), but it'd give you the indirection you need without real cost on OkHttp itself.\n\n@JakeWharton am I a crazy person for pondering the idea of putting `FileSystem` into Okio?\n",
        "Probably! You either have too many methods (`delete` and `rename`) or too few (`exists`, `length`, etc.).\n",
        "Well primarily, I am looking to pass all read/writes to the DiskLruCache through encryption/decryption streams.  Facebook has made a surprisingly efficient library called Conceal that must have had an enormous amount of manpower to develop. It is extremely fast and I have successfully implemented and integrated a file encryption class that utilizes Conceal to wrap DiskLruCache.  It is fast and works on every device I've seen.  So if there is an opportunity to expose the raw input/output streams to DiskLruCache in your new implementation, it should be possible to hook in libraries like these.  I would gladly contribute if you all think this is possible.\n",
        "@swankjesse Okay interesting! At what level would this indirection take place? `OkHttp`? `Cache`? `DiskLruCache`?  Would I be providing a replacement for the entire `Cache` class or just reading/writing to the internal `DiskLruCache`?  Whatever the implementation, I would need the cache key for reference, and some way to wrap incoming data in my own `OutputStream` before it hits the internal `DiskLruCache` or get the raw data and write it to my own `DiskLruCache` with whatever mechanism I want.\n\nI'm sure you all have a lot more to take into consideration besides this, but hopefully this can get worked in somehow.  \n",
        "You'd get the cache key, but only because it's included as a suffix of the path. We'd offer a default implementation, `FileSystem.LOCAL` that calls through to the underlying OS. But we'd change `DiskLruCache` to accept a `FileSystem` in its constructor so you could pass in your own implementation that does crypto.\n",
        "Okay this is sounding great.  I would prefer to get the key on it's own, but I'm not going to complain.  I look forward to seeing an initial implementation!\n",
        "This is very interesting to me as well. My specific use case is in interacting with s3 signed URLs. I'd prefer to cache without the signing query parameters. Let me know if this will fit in with your ideas. I'm more than happy to contribute code.\n",
        "First step: https://github.com/square/okhttp/pull/1495\n",
        "I would also love to be able to extend the Cache, although my particular case is different - I want to be able to cache responses to POST requests (in according with RFC 2616). At the very least, I would like an option to allow it instead of the current \"everything that isn't GET is uncachable\" approach.\n",
        "@wsv-accidis that's a lot harder to do, cause it would require making the caching _policy_ configurable, whereas currently only the caching _store_ is configurable.\n\nMuch better than caching POST responses is to do [POST/redirect/GET](http://en.wikipedia.org/wiki/Post/Redirect/Get).\n",
        "@swankjesse Thank you for your quick response. I suppose that ideally, caching policy and caching storage should be individually configurable and/or overridable, but I can see how this is a larger change. For the time being I will probably just refactor the back-end to not use POST for cachable content.\n",
        "Now that we have an internal API, you're unblocked to do what you like, though we don't promise API compatibility between releases for internal APIs.\n\nTell me how it goes!\n",
        "Thank you!\n"
    ],
    "718": [],
    "499": [],
    "1461": [],
    "2865": [],
    "176": [],
    "2664": [],
    "1054": [],
    "1476": [],
    "3874": [],
    "1159": [],
    "430": [],
    "1482": [
        "I haven't really considered how interceptors interact with unchecked exceptions.\n\nFor async, we shouldn't call onFailure with the unchecked exception; that method is for I/O failures only. Instead we're better off crashing to the worker thread's uncaught exception handler.\n\nFor sync, we have to throw to the caller; there's no other alternative.\n\nI need to write a test for this.\n",
        "And if you want to throw in an interceptor, throw a subclass of IOException. Those are handled more consistently.\n",
        "In this case it's not an user-generated unchecked exception but it's thrown by the API while validating the user attempt to change the server address within an interceptor (and there are other similar validation cases like attempting to invoke `call` multiple times or trying to short-circuit the response).\n\nThe reason I need the async and sync behaviour to be made similar is that I'm using the async API to implement a fiber-blocking version of the sync one.\nIs there any way for me to make the async API's unchecked exception handling similar to the sync one?\n",
        "Can you throw an IOException?\n",
        "Or perhaps return an HTTP response indicating a bad response?\n\n```\nnew Response.Builder()\n            .request(request)\n            .protocol(Protocol.HTTP_1_1)\n            .code(400)\n            .message(\"Malformed request!\")\n            .body(ResponseBody.create(null, 0L, new Buffer()))\n            .build()\n```\n\nThis is probably your best bet, especially if you report unexpected 4xx errors to a service like Bugsnag.\n",
        "Thanks, I'll have a look and see if I can add some additional behaviour when interceptors are added, I think it's better since I'm not working on a client application but on an integration.\n"
    ],
    "1484": [
        "Does max concurrent streams is configurable at OkHttpClient level?\r\nI don't find any way to configure this at client side with OkHttp",
        "I made a feature request for that here:\r\nhttps://github.com/square/okhttp/issues/5950"
    ],
    "1486": [
        "Great coverage of features. You hit almost everything I'd want (read: Retrofit would want). The missing things could probably be supported on top of it (e.g., templating path parts).\n",
        "Reposting https://github.com/square/okhttp/issues/1044#issuecomment-68342233, because I think it's good too:\n\n> This API should be mindful of both URL constructors and URL deconstructors. Retrofit wants this badly (it has its own purpose-built solution right now) but also interceptors, MockWebServer, and a potential future OkHttpServer callback/route would benefit greatly from having a clean API to decompose.\n",
        "+1 for `OkUrl`\n",
        "You may find the url-encoding parts of https://github.com/palominolabs/url-builder helpful.\n",
        ":+1: `OkUrl`\n",
        "I vote for calling it YogurtUrl\n",
        "That would certainly stir things up!\n",
        "`ws://` and `wss://` are explicitly called out by the spec I'm using, which has me slightly tempted to support them out-of-the-box: https://url.spec.whatwg.org/#query-state \n",
        "Automatic punycode conversion?\n",
        "@frownlee thats the plan!\n",
        "Don't have a clear use case yet, but would always nice to have other options\n",
        "@swankjesse \nDo you think that it's possible to have the HttpUrl canonicalize made public and official ?\n\nYour code is so much more configurable, efficient and memory friendly than Uri.encode and the equivalents.\n",
        "@Tolriq Unlikely there's much I can do without breaking compatibility.\n",
        "@swankjesse  Thanks :( \n\nI'm not an licensing expert, is it ok to copy paste this part of the code in closed source application ? There's already disclaimers and everything for using okhttp library.\n",
        "Yes, please do!\n",
        "My users then thank you :)\n",
        "@swankjesse I suppose this is just a typo but in https://github.com/square/okhttp/blob/master/okhttp/src/main/java/com/squareup/okhttp/HttpUrl.java \n\n```\n  static final String USERNAME_ENCODE_SET = \" \\\"':;<=>@[]^`{}|/\\\\?#\";\n  static final String PASSWORD_ENCODE_SET = \" \\\"':;<=>@[]\\\\^`{}|/\\\\?#\";\n```\n\nUnless I'm missing something obvious, the password set is the same as the username but with the \\ character 2 times ?\n"
    ],
    "4125": [],
    "4312": [],
    "377": [],
    "742": [],
    "1502": [],
    "127": [],
    "306": [],
    "4117": [],
    "1512": [
        "Strange, I didn't anticipate that `chain.proceed()` would ever return null. Are you using any other interceptors?\n",
        "Nope, it's my own fault. Canceling a request can cause it to return null. Hmm.\n",
        "We should fix Call#getResponse to throw rather than returning null when a call is canceled. That should fix the problem!\n"
    ],
    "4139": [],
    "1123": [],
    "4257": [],
    "555": [],
    "3506": [],
    "1521": [
        "See `addFormDataPart()` overload which includes a filename.\n",
        "http://square.github.io/okhttp/javadoc/com/squareup/okhttp/MultipartBuilder.html#addFormDataPart-java.lang.String-java.lang.String-com.squareup.okhttp.RequestBody-\n"
    ],
    "3126": [],
    "4265": [],
    "571": [],
    "2690": [],
    "4674": [],
    "1539": [
        "We're using Chromium's format.\nhttp://src.chromium.org/viewvc/chrome/trunk/src/net/http/transport_security_state_static.certs\n\nIf you can convince them to change, we'll change too. But for now the tangible benefits of consistency with chrome outweigh the attack vector. Remember, pinning is a 2nd layer of security; the attacker still needs to compromise a CA.\n",
        "FYI, HPKP uses sha256: https://tools.ietf.org/html/rfc7469\nGiven the authors, I suspect Chrome will update soon ;-)\n",
        "@swankjesse I would also like to place a vote for sha256 support since Google have already begun phasing out sha1\n\nhttp://googleonlinesecurity.blogspot.dk/2014/09/gradually-sunsetting-sha-1.html\nhttps://www.digicert.com/sha-2-ssl-certificates.htm\n",
        "Will the conversion to SHA256 hashing be reconsidered in the near future?\n",
        "Let's do it.\n"
    ],
    "2933": [],
    "216": [],
    "1617": [],
    "1552": [
        "Think these failures might be related to commit f78f74f5a2cf1f73f974487816f998a6e37a9cf1 \nFrom issue: https://github.com/square/okhttp/issues/1294\n\nAt first glance, it's not obvious why the tests were hanging in that issue. Is it because of non-daemon threads? SpdyConnection creates a non-daemon thread to handle the readerRunnable. Perhaps it should add an uncaught exception handler to avoid the Android default, or use an executor that will handle the exception?\n",
        "Pull #1554 should get things passing on Android again.\n#1555 hopefully locks the Android \"uncaught exceptions are bad\" behavior in place to avoid any accidental regressions.\n",
        "I've fixed some of the underlying problems:\nhttps://github.com/square/okhttp/pull/1658\nhttps://github.com/square/okhttp/pull/1659\n\nNo further action here.\n"
    ],
    "482": [],
    "4055": [],
    "1560": [
        "Thanks for the complete bug report. Made it easy to build a testcase & write a fix.\n",
        "Awesome, I completely missed that. Thanks :)\n",
        "Ran into a similar and perplexing issue on a build that should have the above fix in it. Truncated thread dump:\n\n```\n\"downloader-pool-thread-1\" prio=5 tid=62 NATIVE\n| group=\"main\" sCount=1 dsCount=0 obj=0x44578580 self=0x622cc470\n| sysTid=13979 nice=10 sched=0/0 cgrp=apps/bg_non_interactive handle=1646803144\n| schedstat=( 2842312441 7088782150 32938 ) utm=180 stm=104 core=0\n#00  pc 0000ccb8  /system/lib/libc.so (select+20)\n#01  pc 0001f383  /system/lib/libjavacore.so\n#02  pc 0002077f  /system/lib/libjavacore.so\n#03  pc 0001de70  /system/lib/libdvm.so (dvmPlatformInvoke+112)\n#04  pc 0004d0c3  /system/lib/libdvm.so (dvmCallJNIMethod(unsigned int const*, JValue*, Method   const*, Thread*)+394)\n#05  pc 00000214  /dev/ashmem/dalvik-jit-code-cache (deleted)\nat org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_read(Native Method)\nat org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLInputStream.read(OpenSSLSocketImpl  .java:651)\nat okio.Okio$2.read(Okio.java:137)\nat okio.AsyncTimeout$2.read(AsyncTimeout.java:211)\nat okio.RealBufferedSource.read(RealBufferedSource.java:50)\nat com.squareup.okhttp.internal.http.HttpConnection$FixedLengthSource.read(HttpConnection.  java:418)\nat okio.RealBufferedSource.read(RealBufferedSource.java:50)\nat okio.RealBufferedSink.writeAll(RealBufferedSink.java:102)\n```\n\nThe symptoms of this behavior are downloads that simply hang indefinitely. We aren't explicitly configuring OkHttp to have timeouts, but from reading the code it seems like it has default values, so I would expect a timeout to trigger eventually.\n\nSo far we've seen this behavior on a Samsung Note 2 and a Samsung Galaxy S3. It doesn't reproduce very consistently, and we're not sure yet if it's possibly an issue in our app code or something deeper in the stack.\n"
    ],
    "1279": [],
    "2601": [],
    "3025": [],
    "1589": [
        "@nfuller  Any further action required here?\n",
        "AFAIK, done.\n"
    ],
    "3307": [],
    "1592": [
        "Do you have a stack trace? Is it one of these cases where it calls a potentially blocking POSIX call that, in practice, will never block with the way the sockets are configured?\n",
        "It's related to this issue, which has come up again: https://github.com/square/okhttp/issues/869 \n",
        "I'm not up on conscrypt. From a quick skim of the code: when it closes it looks like it sets the socket into blocking mode, then calls SSL_shutdown, which is documented to potentially block. If that's correct it looks like the call to block guard is at least correct with the current implementation.\n\nWhat makes you think it's a false positive?\n",
        "Hmmm . . .  . What I want is to quickly & violently break a socket that isn't needed anymore. This isn't intended to be a clean shutdown that flushes queued bytes; instead it just severs the network. Perhaps for SSL we need to break the underlying socket only, which shouldn't require any blocking.\n",
        "The block guard code for close() on PlainSocket appears to be smart enough to check for linger and only complain if they have it set. AFAIK, the HTTP sockets shouldn't have it set, so it will be classed as non-blocking.\n",
        "I've got a stack if it helps:\n\nandroid.os.NetworkOnMainThreadException\n            at android.os.StrictMode$AndroidBlockGuardPolicy.onNetwork(StrictMode.java:1145)\n            at com.android.org.conscrypt.OpenSSLSocketImpl.close(OpenSSLSocketImpl.java:1009)\n            at com.squareup.okhttp.Connection.closeIfOwnedBy(Connection.java:142)\n            at com.squareup.okhttp.OkHttpClient$1.closeIfOwnedBy(OkHttpClient.java:71)\n            at com.squareup.okhttp.internal.http.HttpConnection.closeIfOwnedBy(HttpConnection.java:136)\n            at com.squareup.okhttp.internal.http.HttpTransport.disconnect(HttpTransport.java:135)\n            at com.squareup.okhttp.internal.http.HttpEngine.disconnect(HttpEngine.java:507)\n            at com.squareup.okhttp.Call.cancel(Call.java:122)\n            ...\n",
        "@Wavesonics you supposed to run any network call on background thread.\n",
        "@iNoles that is not the issue\n",
        "@iNoles the issue is that calling cancel() on a connection from the main thread triggers the OS's block guard. This is a quick call and shouldn't trigger that protection.\n",
        "Also we should be precise around concurrency on access to the transport & connection. Right now it's not safe.\n",
        "I'm going to punt this to 3.0, only because not involving `HttpURLConnection` will make this much easier.\n",
        "Should be pretty straightforward after this PR lands:\nhttps://github.com/square/okhttp/pull/1782\n\nWe'll need to keep both the raw socket and the SSL socket. When closing asynchronously we close the raw socket; when cleaning up or closing synchronously we close both.\n",
        "Are there any updates on this?  I'm also getting a `android.os.NetworkOnMainThreadException` from `Call.cancel()`\n\n```\n09-15 15:52:20.205 6069-6069/com.etiennelawlor.loop E/AndroidRuntime: FATAL EXCEPTION: main\n09-15 15:52:20.205 6069-6069/com.etiennelawlor.loop E/AndroidRuntime: Process: com.etiennelawlor.loop, PID: 6069\n09-15 15:52:20.205 6069-6069/com.etiennelawlor.loop E/AndroidRuntime: android.os.NetworkOnMainThreadException\n09-15 15:52:20.205 6069-6069/com.etiennelawlor.loop E/AndroidRuntime:     at android.os.StrictMode$AndroidBlockGuardPolicy.onNetwork(StrictMode.java:1273)\n09-15 15:52:20.205 6069-6069/com.etiennelawlor.loop E/AndroidRuntime:     at com.android.org.conscrypt.OpenSSLSocketImpl.shutdownAndFreeSslNative(OpenSSLSocketImpl.java:1126)\n09-15 15:52:20.205 6069-6069/com.etiennelawlor.loop E/AndroidRuntime:     at com.android.org.conscrypt.OpenSSLSocketImpl.close(OpenSSLSocketImpl.java:1121)\n09-15 15:52:20.205 6069-6069/com.etiennelawlor.loop E/AndroidRuntime:     at com.squareup.okhttp.Connection.closeIfOwnedBy(Connection.java:148)\n09-15 15:52:20.205 6069-6069/com.etiennelawlor.loop E/AndroidRuntime:     at com.squareup.okhttp.OkHttpClient$1.closeIfOwnedBy(OkHttpClient.java:75)\n09-15 15:52:20.205 6069-6069/com.etiennelawlor.loop E/AndroidRuntime:     at com.squareup.okhttp.internal.http.HttpConnection.closeIfOwnedBy(HttpConnection.java:137)\n09-15 15:52:20.205 6069-6069/com.etiennelawlor.loop E/AndroidRuntime:     at com.squareup.okhttp.internal.http.HttpTransport.disconnect(HttpTransport.java:135)\n09-15 15:52:20.205 6069-6069/com.etiennelawlor.loop E/AndroidRuntime:     at com.squareup.okhttp.internal.http.HttpEngine.disconnect(HttpEngine.java:573)\n09-15 15:52:20.205 6069-6069/com.etiennelawlor.loop E/AndroidRuntime:     at com.squareup.okhttp.Call.cancel(Call.java:122)\n09-15 15:52:20.205 6069-6069/com.etiennelawlor.loop E/AndroidRuntime:     at retrofit.OkHttpCall.cancel(OkHttpCall.java:158)\n09-15 15:52:20.205 6069-6069/com.etiennelawlor.loop E/AndroidRuntime:     at retrofit.ExecutorCallAdapterFactory$ExecutorCallbackCall.cancel(ExecutorCallAdapterFactory.java:63)\n```\n",
        "I guess I have to wrap the `Call.cancel()` method in an `AsyncTask` until this gets resolved.\n\n``` java\nnew CancelTask().execute(call);\n\nprivate class CancelTask extends AsyncTask < Call, Void, Void > {@\n    Override\n    protected Void doInBackground(Call...params) {\n        Call call = params[0];\n        call.cancel();\n        return null;\n    }\n}\n```\n",
        "@lawloretienne you can use the OkHttp dispatcher executor service for it:\n\n``` java\nclient.getDispatcher().getExecutorService().execute(new Runnable() {\n    @Override\n    public void run() {\n        call.cancel();\n    }\n});\n```\n",
        "Calling `unsubscribeOn(Schedulers.io())` works around the issue when using rxjava with retrofit for the time being. Found the solution [here](https://github.com/prt2121/RxJava-Android-Samples/commit/1f235bd16821b7ea8139676dae711fae4b38eca4#diff-0eeeebe7aad15345f8833bae4c70056fR103).\n",
        "@ubuntudroid Thanks, it works for me\n",
        "Unfortunately all of these solutions involve doing it async. I have a use case that requires it to be deterministic so they won't work for me.\n\nI see @swankjesse suggested punting this to 3.0, is that a wait and see about it in 3.0? Or do we expect 3.0 will inherently fix this because it's ditching HURL?\n",
        "I'm working on it for OkHttp 2.7.\n",
        "@swankjesse Outstanding news! Do you have any super rough idea how much longer 2.7 will be in the oven?\n",
        "4\u201312 weeks!\n"
    ],
    "793": [],
    "156": [],
    "1000": [],
    "1613": [],
    "379": [],
    "3253": [],
    "1961": [],
    "2437": [],
    "2095": [],
    "4467": [],
    "1635": [],
    "4606": [],
    "1636": [],
    "35": [],
    "29": [],
    "2008": [],
    "119": [],
    "1660": [
        "Thanks for the fix!\n"
    ],
    "752": [],
    "1673": [
        "And I do not know how it works internally in Android Studio but adding automated try catch on the url command does not work, maybe it should have throws IllegalArgumentException so that users are easily aware of this possibility.\n",
        "IllegalArgumentException? Could you provide a short test case?\n",
        "```\nRequest.Builder request = new Request.Builder()\n.url(\"http://\" + ip + \":\" + port + \"/jsonrpc\")\n.header(\"connection\", \"close\");\n\n```\n\nUse \"aaa aaaa\" with a space for ip and you get the IllegalArgumentException.\n\nTo be honest I never thought of this use case in my app but seeing all the crashes with today release users have lot's of imagination when talking about an ip / hostname field.\n\nPreviously those error where catched at execute level\n\n```\nhttpClient.newCall(request.build()).execute()\n```\n\nWith MalformedURLException but now the crash is earlier, and I'm sure lot's of people rely on MalformedURLException to check for user input failure and not on requestbuilder errors as there was not before :(\n\nNot a big deal when you know it but this passed my 1800 beta testers tests and triggered lot's of crash, and usually on first start wizard so loosed users :(\nAnyway this look like a normal error to catch just needs proper documentation to avoid problem as major API change.\n",
        "Ahh, yeah, you're right. I'll update our changelog to note this explicitly.\n",
        "Thanks.\n\nAnd I don't know the best way but either url javadoc should say  throws IllegalArgumentException or explicitely add the throws in function so that advanced editors warns users as it's easy to miss this during tests.\n"
    ],
    "1676": [
        "@swankjesse : Here's a commit. It's not nice but I can see why you don't want to use SocketTimeoutException. Would it be possible to have an identifiable subclass of InterruptedIOException out of Okio rather than matching the message string? e.g. TimeoutIOException?\n\nhttps://github.com/nfuller/okhttp/commit/789c1f95dc924965cb9bd7fe33a528d181010674\n",
        "Yep, we should throw SocketTimeoutException. Probably wants an update to Okio to trigger the throw.\n",
        "@swankjesse Does that mean you're ok with a new exception in Okio, or were you thinking of something else?\n",
        "Okio's `AsyncTimeout` has two methods that throw:\n\n```\n  /**\n   * Throws an InterruptedIOException if {@code throwOnTimeout} is true and a\n   * timeout occurred.\n   */\n  final void exit(boolean throwOnTimeout) throws IOException {\n    boolean timedOut = exit();\n    if (timedOut && throwOnTimeout) throw new InterruptedIOException(\"timeout\");\n  }\n\n  /**\n   * Returns either {@code cause} or an InterruptedIOException that's caused by\n   * {@code cause} if a timeout occurred.\n   */\n  final IOException exit(IOException cause) throws IOException {\n    if (!exit()) return cause;\n    InterruptedIOException e = new InterruptedIOException(\"timeout\");\n    e.initCause(cause);\n    return e;\n  }\n```\n\nI think we want to change that to allow the subclass to provide its own exception type. Probably just a method like `protected IOException newTimeoutException(IOException cause)` that accepts a nullable cause. That way OkHttp can use SocketTimeoutExceptions, but timeouts to file systems or in-memory pipes don't have to.\n",
        "... @nfuller if you wanna send a PR that adds this, I'll merge it!\n",
        "@swankjesse Works for me. Thanks. I'll put something together.\n",
        "If the Okio change is taken, there's a possible follow-up here: commit 028a6c75ebf311b34b2f04c08eeef31a002c5396\n\nI haven't looked at why, but Spdy still throws InterruptedIOException, not SocketTimeoutException. I assume because the Spdy code is wrapping a stream, not a socket, but I'm ok with it throwing InterruptedIOException if you are. HttpURLConnection correctly throws SocketTimeoutException with the Okio change.\n",
        "Hmm. . .  I'm guessing for SPDY you need to configure it in `SpdyConnection.java`, which also subclasses `AsyncTimeout`.\n",
        "Yes - you're right. Which behavior would you prefer?\n",
        "I think I want to see socket timeouts in SPDY also. The catch is that we need to use the okio snapshot to get that method.\n",
        "All fixed.\n"
    ],
    "770": [],
    "1262": [],
    "3840": [],
    "1789": [],
    "1220": [],
    "1684": [
        "@nfuller any ideas?\n",
        "Could be https://code.google.com/p/android/issues/detail?id=54072 ?\n",
        "@pguilbot  Going to need more information. What version of Android is affected? I've found similar examples from ~2012 (against ICS). Are you doing things from multiple threads?\n\nCan you send the full stack traces, too? Feel free  to obfuscate your own app's parts of the stack.\n\nThe one @iNoles also looks like a possibility. Hard to tell without more info, though.\n\nThere's also https://code.google.com/p/android/issues/detail?id=81700, which apparently I own. OkHttp doesn't use nio, though, from what I can see so unless it has a common cause it's probably not that.\n",
        "@pguilbot if you could provide a URL that reproduces this, or a test case, or anything we can make forward progress & I'll reopen this issue. For now we're stalled on insufficient information.\n",
        "Hi all, \nThanks for your fast reply.\n\nI think that the @iNoles issue is definitely a possibility.\n\nHere are some full stack traces causing this issue : \n\n---\n\njava.lang.AssertionError: libcore.io.ErrnoException: getsockname failed: EBADF (Bad file number)\n       at libcore.io.IoBridge.getSocketLocalPort(IoBridge.java:649)\n       at libcore.io.IoBridge.closeSocket(IoBridge.java:202)\n       at java.net.PlainSocketImpl.close(PlainSocketImpl.java:162)\n       at java.net.Socket.close(Socket.java:319)\n       at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.close(OpenSSLSocketImpl.java:928)\n       at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:425)\n       at com.squareup.okhttp.internal.http.SocketConnector.connectTls(SocketConnector.java:103)\n       at com.squareup.okhttp.Connection.connect(Connection.java:143)\n       at com.squareup.okhttp.Connection.connectAndSetOwner(Connection.java:185)\n       at com.squareup.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:128)\n       at com.squareup.okhttp.internal.http.HttpEngine.nextConnection(HttpEngine.java:341)\n       at com.squareup.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:330)\n       at com.squareup.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:248)\n       at com.squareup.okhttp.Call.getResponse(Call.java:273)\n       at com.squareup.okhttp.Call$ApplicationInterceptorChain.proceed(Call.java:230)\n       at com.squareup.okhttp.Call.getResponseWithInterceptorChain(Call.java:201)\n       at com.squareup.okhttp.Call.access$100(Call.java:36)\n       at com.squareup.okhttp.Call$AsyncCall.execute(Call.java:164)\n       at com.squareup.okhttp.internal.NamedRunnable.run(NamedRunnable.java:33)\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1080)\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:573)\n       at java.lang.Thread.run(Thread.java:838)\nCaused by: libcore.io.ErrnoException: getsockname failed: EBADF (Bad file number)\n       at libcore.io.Posix.getsockname(Posix.java)\n       at libcore.io.ForwardingOs.getsockname(ForwardingOs.java:69)\n       at libcore.io.IoBridge.getSocketLocalPort(IoBridge.java:645)\n       at libcore.io.IoBridge.closeSocket(IoBridge.java:202)\n       at java.net.PlainSocketImpl.close(PlainSocketImpl.java:162)\n       at java.net.Socket.close(Socket.java:319)\n       at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.close(OpenSSLSocketImpl.java:928)\n       at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:425)\n       at com.squareup.okhttp.internal.http.SocketConnector.connectTls(SocketConnector.java:103)\n       at com.squareup.okhttp.Connection.connect(Connection.java:143)\n       at com.squareup.okhttp.Connection.connectAndSetOwner(Connection.java:185)\n       at com.squareup.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:128)\n       at com.squareup.okhttp.internal.http.HttpEngine.nextConnection(HttpEngine.java:341)\n       at com.squareup.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:330)\n       at com.squareup.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:248)\n       at com.squareup.okhttp.Call.getResponse(Call.java:273)\n       at com.squareup.okhttp.Call$ApplicationInterceptorChain.proceed(Call.java:230)\n       at com.squareup.okhttp.Call.getResponseWithInterceptorChain(Call.java:201)\n       at com.squareup.okhttp.Call.access$100(Call.java:36)\n       at com.squareup.okhttp.Call$AsyncCall.execute(Call.java:164)\n       at com.squareup.okhttp.internal.NamedRunnable.run(NamedRunnable.java:33)\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1080)\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:573)\n       at java.lang.Thread.run(Thread.java:838)\n\n---\n\njava.lang.AssertionError: libcore.io.ErrnoException: getsockname failed: EBADF (Bad file number)\n       at libcore.io.IoBridge.getSocketLocalPort(IoBridge.java:641)\n       at libcore.io.IoBridge.closeSocket(IoBridge.java:202)\n       at java.net.PlainSocketImpl.close(PlainSocketImpl.java:162)\n       at java.net.Socket.close(Socket.java:319)\n       at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.close(OpenSSLSocketImpl.java:895)\n       at com.squareup.okhttp.internal.Util.closeQuietly(Util.java:105)\n       at com.squareup.okhttp.ConnectionPool.performCleanup(ConnectionPool.java:315)\n       at com.squareup.okhttp.ConnectionPool.runCleanupUntilPoolIsEmpty(ConnectionPool.java:242)\n       at com.squareup.okhttp.ConnectionPool.access$000(ConnectionPool.java:54)\n       at com.squareup.okhttp.ConnectionPool$1.run(ConnectionPool.java:97)\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1076)\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:569)\n       at java.lang.Thread.run(Thread.java:838)\nCaused by: libcore.io.ErrnoException: getsockname failed: EBADF (Bad file number)\n       at libcore.io.Posix.getsockname(Posix.java)\n       at libcore.io.ForwardingOs.getsockname(ForwardingOs.java:65)\n       at libcore.io.IoBridge.getSocketLocalPort(IoBridge.java:637)\n       at libcore.io.IoBridge.closeSocket(IoBridge.java:202)\n       at java.net.PlainSocketImpl.close(PlainSocketImpl.java:162)\n       at java.net.Socket.close(Socket.java:319)\n       at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.close(OpenSSLSocketImpl.java:895)\n       at com.squareup.okhttp.internal.Util.closeQuietly(Util.java:105)\n       at com.squareup.okhttp.ConnectionPool.performCleanup(ConnectionPool.java:315)\n       at com.squareup.okhttp.ConnectionPool.runCleanupUntilPoolIsEmpty(ConnectionPool.java:242)\n       at com.squareup.okhttp.ConnectionPool.access$000(ConnectionPool.java:54)\n       at com.squareup.okhttp.ConnectionPool$1.run(ConnectionPool.java:97)\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1076)\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:569)\n       at java.lang.Thread.run(Thread.java:838)\n\n---\n\njava.lang.AssertionError: libcore.io.ErrnoException: getsockname failed: EBADF (Bad file number)\n       at libcore.io.IoBridge.getSocketLocalPort(IoBridge.java:640)\n       at libcore.io.IoBridge.closeSocket(IoBridge.java:202)\n       at java.net.PlainSocketImpl.close(PlainSocketImpl.java:173)\n       at java.net.Socket.close(Socket.java:319)\n       at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.close(OpenSSLSocketImpl.java:895)\n       at okio.Okio$3.timedOut(Okio.java:206)\n       at okio.AsyncTimeout$Watchdog.run(AsyncTimeout.java:278)\nCaused by: libcore.io.ErrnoException: getsockname failed: EBADF (Bad file number)\n       at libcore.io.Posix.getsockname(Posix.java)\n       at libcore.io.ForwardingOs.getsockname(ForwardingOs.java:65)\n       at libcore.io.IoBridge.getSocketLocalPort(IoBridge.java:636)\n       at libcore.io.IoBridge.closeSocket(IoBridge.java:202)\n       at java.net.PlainSocketImpl.close(PlainSocketImpl.java:173)\n       at java.net.Socket.close(Socket.java:319)\n       at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.close(OpenSSLSocketImpl.java:895)\n       at okio.Okio$3.timedOut(Okio.java:206)\n       at okio.AsyncTimeout$Watchdog.run(AsyncTimeout.java:278)\n\n---\n\nThis issue is coming from android 4 (up to 4.2.2).   -> 99,9% \nI get at least one crash from android 5.0.1\n\nI use OkHttp client to do some Https request to a personal API.\nFor the moment I am unable to reproduce this issue.\n",
        "Hi all, \nI just want to follow up with this issue. \n@nfuller / @swankjesse  : Any ideas regarding my full stack traces ?\nThanks\n",
        "@pguilbot \n\nNothing I can really say. I just looked and the line numbers don't appear to correspond with code in AOSP (at least, not code from the master branch) so I can't be sure what is running on device. I vaguely recall going round  this loop before: OEM's can add their own code which makes it difficult to pin down.\n\nLooks like one may have done so: In the Android repos, I can't find any version of the code that calls getSocketLocalPort() from within closeSocket() but it's possible this is what we'd see if somebody called getSocketLocalPort() on an already closed socket....?\n\nAssuming this is a bug in the device, the options open to you:\n\n1) The Socket code / SSL socket implementation are on the device. You might look at the Google Play Services dynamic security provider API calls. That would swap in a more modern SSLSocketFactory and may bypass the issue. Unclear whether it actually would. It should, but may have other side effects.\n\n2) Change Okio to handle the assertion error in addition to the SocketException for this legacy case. Right now, if the SocketException is still being thrown, it is being swallowed in Okio.timedOut().\n\nI suspect the 5.0.1 crash is something else. If you can catch that one you might have found a more current bug.\n",
        "Hello @swankjesse,\nSadly, we are still experiencing this issue with okhttp 2.5.0\n\n```\nCaused by: java.lang.AssertionError: libcore.io.ErrnoException: getsockname failed: EBADF (Bad file number)\n            at libcore.io.IoBridge.getSocketLocalPort(IoBridge.java:603)\n            at java.net.PlainSocketImpl.bind(PlainSocketImpl.java:155)\n            at java.net.Socket.connect(Socket.java:868)\n            at com.squareup.okhttp.internal.Platform$Android.connectSocket(Platform.java:190)\n            at com.squareup.okhttp.Connection.connectSocket(Connection.java:196)\n            at com.squareup.okhttp.Connection.connect(Connection.java:172)\n            at com.squareup.okhttp.Connection.connectAndSetOwner(Connection.java:367)\n            at com.squareup.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:128)\n            at com.squareup.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:328)\n            at com.squareup.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:245)\n            at com.squareup.okhttp.Call.getResponse(Call.java:267)\n            at com.squareup.okhttp.Call$ApplicationInterceptorChain.proceed(Call.java:224)\n            at com.squareup.okhttp.Call.getResponseWithInterceptorChain(Call.java:195)\n            at com.squareup.okhttp.Call.execute(Call.java:79)\n```\n\nSeems like catching such exception in `Connection.connectTls()` is not enough and `Platform.get().connectSocket(socket, route.getSocketAddress(), connectTimeout);`\nneeds it too.\n",
        "https://github.com/square/okhttp/pull/1896/files\n",
        "Looks good to me, cant't wait for the update\nThank you\n"
    ],
    "4645": [],
    "3459": [],
    "1134": [],
    "1223": [],
    "2037": [],
    "1699": [
        "Yeah, that's a good idea. We should fix `CertificatePinner` to use the CA cert if it's used for trust.\n",
        "Yea I think it will be useful to have the option of pinning against all the certs in the chain and the issuer root if not in the chain.\nAre you guys planning on adding this in a future release?\n",
        "Yes, we'll add this. It's a bug that we don't have it.\n",
        "I suspect I might need hacks or reflection to extract the trusted certificate! I\u2019m anxiously awaiting a better answer here: http://stackoverflow.com/questions/31920719/getting-the-trusted-x509certificate-for-a-java-sslsocket\n",
        "I think we're going to need to capture the TrustManager when we create the initial SSLContext, and keep that around so we can use it to look up the trusted cert. It's a hassle!\n",
        "Yea that makes sense. Doesn't seem like there's a straightforward way to do this. What a headache.\n"
    ],
    "1799": [],
    "3556": [],
    "3896": [],
    "3503": [],
    "1711": [
        "Probably. But I haven't done it, and we don't have any guides on how to do it, or test cases that keep it working. If you'd like to do the legwork of figuring that out, I'd love to see a sample.\n\nMost of the work is going to go in the SSL socket factory code, which OkHttp mostly just delegates to.\n",
        "Ok, I don't know much about Java, but let me see what I can find. Can you share with me what you use as an editor?\n",
        "In OkHttpClient.java in okhttp/src/main\n\n```\n  private synchronized SSLSocketFactory getDefaultSSLSocketFactory() {\n    if (defaultSslSocketFactory == null) {\n      try {\n        SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n        sslContext.init(null, null, null);\n        defaultSslSocketFactory = sslContext.getSocketFactory();\n      } catch (GeneralSecurityException e) {\n        throw new AssertionError(); // The system has no TLS. Just give up.\n      }\n    }\n    return defaultSslSocketFactory;\n  }\n```\n\nHmm, what does this mean: \n\n\"This code avoids that by defaulting to an OkHttp-created SSL context.\n- The drawback of this approach is that apps that customize the global SSL\n- context will lose these customizations.\"\n\nsslContext.init looks like\n\n```\npublic final void init(KeyManager[] km,\n        TrustManager[] tm,\n        SecureRandom random)\n```\n\nAccording to http://chariotsolutions.com/blog/post/https-with-client-certificates-on/, the KeyManager is what will provides the client certificate. Given a pfx,\n\n```\nkeyStore = KeyStore.getInstance(\"PKCS12\");\nfis = new FileInputStream(certificateFile);<br>keyStore.load(fis, clientCertPassword.toCharArray());\n```\n\n```\nKeyManagerFactory kmf = KeyManagerFactory.getInstance(\"X509\");\nkmf.init(keyStore, clientCertPassword.toCharArray());\nKeyManager[] keyManagers = kmf.getKeyManagers();\nSSLContext sslContext = SSLContext.getInstance(\"TLS\");\nsslContext.init(keyManagers, null, null);\n```\n\nUpdate:\nAnother example,\nhttp://stackoverflow.com/questions/21624663/ssl-client-authentication-with-certificate-in-android\n",
        "Maybe something like below. Also could be extended to allow for specifying your own ca.\n\n```\nprivate synchronized SSLSocketFactory getDefaultSSLSocketFactory(\n          byte[] pksData, String password) {\n        if (defaultSslSocketFactory == null) {\n          try {\n            InputStream stream = new ByteArrayInputStream(pksData);         \n            KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n            keyStore.load(stream, password);\n\n            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"X509\");\n            kmf.init(keyStore, password.toCharArray());\n            KeyManager[] keyManagers = kmf.getKeyManagers();\n\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(keyManagers, null, null);\n            defaultSslSocketFactory = sslContext.getSocketFactory();\n          } catch (GeneralSecurityException e) {\n            throw new AssertionError(); // The system has no TLS. Just give up.\n          }\n        }\n        return defaultSslSocketFactory;\n      }  \n```\n",
        "Can I specify my own sslSocketFactory?\n",
        "Looks like I could use\n\n```\n  public OkHttpClient setSslSocketFactory(SSLSocketFactory sslSocketFactory) {\n    this.sslSocketFactory = sslSocketFactory;\n    return this;\n  }\n```\n\nAnd create my own new socket factory, though I think there probably should be a way of setting the ClientCertificate. Maybe \n\n```\npublic OkHttpClient setClientCertificate\n```\n\nwould be used to recreate a sslSocketFactory.\n\nAny chance you can add this kind of thing to the build?\n",
        "BTW, I calling OkHttp from Xamarin.Android (C#) using ModernHttpClient. \n",
        "Tofutim, were you able to successfully use client certificate in Xamarin? Can you share the code?\n",
        "@tofutim could you kindly share your findings?\n",
        "The answer is that it should work, but I need to test it. Maybe someone\ncould test my code?\n\nOn Tue, Sep 29, 2015 at 8:54 PM, Xu Hui Hui notifications@github.com\nwrote:\n\n> @tofutim https://github.com/tofutim could you kindly share your\n> findings?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/1711#issuecomment-144274995.\n",
        "OkHttp 3.2.0 does not honour `javax.net.ssl.keyStore` on Java 1.8.0_65 (and I would guess for all platforms) when set up like:\n\n```\nOkHttpClient okHttpClient = new OkHttpClient.Builder().build();\n```\n\nThe above code will result in `Received fatal alert: handshake_failure` when connecting to a site that requires client certificates. But the following _will_ honour `javax.net.ssl.keyStore`:\n\n```\nSSLSocketFactory sslSocketFactory = SSLContext.getDefault().getSocketFactory();\nOkHttpClient okHttpClient = new OkHttpClient.Builder().sslSocketFactory(sslSocketFactory).build();\n```\n\nThis is unintuitive, and I believe a consequence of calling SSLContext.init() with keyManager set to null. trustStore works, on the other hand, I think because of https://github.com/square/okhttp/blob/fb3c390590131e61562bede0a6e030705ccbe8ce/okhttp/src/main/java/okhttp3/OkHttpClient.java#L183,L196 .\n\nI'll write test cases, and hopefully a fix to suitably set up keyStores for Java 1.8.0_65, at least.\n",
        "We deliberately do not use the system\u2019s default SSL context. The problem with that is that in some situations that context cannot safely be shared between OkHttp and other libraries. The result is your system will crash hard.\n",
        "And so the workaround of manually providing an SSL context is just fine.\n",
        "How about OkHttp continues using its own SSLContext, but that context\nhonours `javax.net.ssl.keyStore`? I can look into how to do that.\n\nThe rationale is that other HTTPS libraries honour\n`javax.net.ssl.keyStore`, and it's a WTF that a library doesn't support it\nby default. Further, debugging TLS to discover this is non-trivial. I\nrecognise that client certificates are uncommon and that changes to such\ncritical code should be treated with scepticism, however.\nOn Wed, 9 Mar 2016, 03:15 Jesse Wilson, notifications@github.com wrote:\n\n> And so the workaround of manually providing an SSL context is just fine.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/1711#issuecomment-194093017.\n",
        "This is old, but I think you can close this as it definitely works\n\nhttps://github.com/yschimke/oksocial/blob/master/src/main/java/com/baulsupp/oksocial/Main.java#L379\n\n@tofutim the best way to test I found is with \"openssl s_server -Verify ...\"\n",
        "Awesome. \n",
        "Hi,\r\n\r\nI am new here, but am trying to get a swagger-generated API client app working with our server, which requires client-authenticated SSL.  The generated code uses com.squareup.okhttp.OkHttpClient, which is how I found this issue, but I am really having difficulty following the info here.  Is there a clean example of what would be needed to enable client-authentication with okhttp?  ",
        "It possibly deserves its own howto page.  But it's not a one size fits all situation.  You may have client certs on disk, you may have them in a keystore or you may have a token.\r\n\r\nThis test covers client auth https://github.com/square/okhttp/blob/c77023cd0369c679bf217506ae21d429e6e81bdf/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java#L108\r\n\r\nThis code handles either client auth from a government id card or from disk, but in different places.\r\n\r\nhttps://github.com/yschimke/oksocial/blob/90d676fffcc30207f494b40945337d2063e460a6/src/main/kotlin/com/baulsupp/oksocial/commands/CommandLineClient.kt#L235\r\n",
        "It is possibile to specify Certificate Authority, private key and client certificate?\r\nWhat I would like to know if there is the equivalent of\r\n `curl --cacert ca.pem --key client.key --cert client.crt `",
        "@romanofranz1992 yes, but you have to load the certificates yourself and call clientBuilder.sslSocketFactory\r\n\r\nThere are examples here https://github.com/square/okhttp/blob/c77023cd0369c679bf217506ae21d429e6e81bdf/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java#L108\r\n\r\nand in an external Kotlin test client here \r\n\r\nhttps://github.com/yschimke/oksocial/blob/master/src/main/kotlin/com/baulsupp/oksocial/commands/CommandLineClient.kt\r\n\r\nThis is probably a better question for stackoverflow."
    ],
    "1712": [
        "Are you reading the complete response body in step 4? OkHttp needs you to consume the response body to trigger the cache to be updated.\n",
        "I've created a test case for your scenario here:\nhttps://github.com/square/okhttp/pull/1713/files\n\nThe test passes. If you'd like to provide a different test case that fails, please do. Otherwise I'm closing this bug because I cannot reproduce the problem.\n",
        "Actually i have not readed/closed 304 responses body (some kind of optimization to not waste time on deserialization) so it cause such behavior. \nThank you for your help.\n"
    ],
    "4728": [],
    "1719": [],
    "4469": [],
    "254": [],
    "218": [],
    "4428": [],
    "1845": [],
    "417": [],
    "1736": [
        "I think I had the same problem with some of our users who used our app on an improperly configured IPv6 connection - the IPv6 connection times out while IPv4 would work. Unfortunately I have no stacktraces at the moment, as our stacktrace reporting also relies on okhttp. Is there a fix already in git which I could apply to my okhttp copy - or when is the 2.5 milestone scheduled for? I have to decide whether to wait for okhttp 2.5 with my next release or not.\n",
        "Not fixed yet, and 2.5 likely won't be done till late August or September.\n",
        "Ok, thanks for your answer. I managed to re-create a full stacktrace now, by the way. And the behaviour seems to be identical for me, no matter whether I use setConnectTimeout or not, but that could maybe be because I use the URLConnection API.\n\n``` stacktrace\njava.net.SocketTimeoutException: failed to connect to www.spin.de/2001:780:138:480::d55f:4f2a (port 443) after 30000ms\n            at libcore.io.IoBridge.connectErrno(IoBridge.java:169)\n            at libcore.io.IoBridge.connect(IoBridge.java:122)\n            at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:183)\n            at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:456)\n            at java.net.Socket.connect(Socket.java:882)\n            at com.squareup.okhttp.internal.Platform$Android.connectSocket(Platform.java:190)\n            at com.squareup.okhttp.internal.http.SocketConnector.connectRawSocket(SocketConnector.java:160)\n            at com.squareup.okhttp.internal.http.SocketConnector.connectTls(SocketConnector.java:79)\n            at com.squareup.okhttp.Connection.connect(Connection.java:143)\n            at com.squareup.okhttp.Connection.connectAndSetOwner(Connection.java:185)\n            at com.squareup.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:128)\n            at com.squareup.okhttp.internal.http.HttpEngine.nextConnection(HttpEngine.java:341)\n            at com.squareup.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:330)\n            at com.squareup.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:248)\n            at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:433)\n            at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:114)\n            at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getOutputStream(HttpURLConnectionImpl.java:245)\n            at com.squareup.okhttp.internal.huc.DelegatingHttpsURLConnection.getOutputStream(DelegatingHttpsURLConnection.java:218)\n            at com.squareup.okhttp.internal.huc.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java:25)\n            at de.spin.http.SerializableAsParams.writePostBody(SerializableAsParams.java:18)\n            at de.spin.http.HttpParams.writePostBody(HttpParams.java:195)\n            at de.spin.http.HttpRequest.attemptConnection(HttpRequest.java:82)\n            at de.spin.http.HttpRequest.call(HttpRequest.java:39)\n            at de.spin.http.HttpRequest.call(HttpRequest.java:11)\n            at java.util.concurrent.FutureTask.run(FutureTask.java:237)\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n            at java.lang.Thread.run(Thread.java:818)\n```\n",
        "Sorry to spam this here but in case someone has the same problem as me: I could fix the issue based on the okhttp 2.4 snapshot by inserting\n\n``` java\n    if (ioe instanceof SocketTimeoutException ) {\n        return true;\n    }\n```\n\nin HttpEngine.isRecoverable(RouteException e) IN FRONT OF the if (ioe instanceof InterruptedIOException) check. (line 457), as a SocketTimeoutException is also an InterruptedIOException but InterruptedIOExceptions count as non-recoverable.\n\nFor a future okhttp version, I'd wish it would, at least for the IPv4/IPv6 dual stack case, always connect to both sockets non-blocking and use whichever socket connects first, but from what I've seen in the source code now this is probably a very non-trivial change.\n",
        "Thanks, your fix works for me too.\nAlso there is already an issue for the dual-stack parallel connecting - #506 .\n",
        "This is assigned to the 2.5 Milestone but not closed. Did it make it into the release?\n",
        "Hi Guys! Let me contribute a little.\n\nI have complains from my users about the same problem. My app doesn't want to connect in some misconfigured IPv6 networks. But all browsers work fine due to Happy Eyeballs.\n\nFix from warpspin is great, I can see it's already in master. But unfortunately it doesn't solve my problem. It still makes me wait until connection timeouts before trying the next IP. My users never agree to wait for so long.\n\nHappy Eyeballs is a perfect solution. But running two connections in parallel seems to be an architecture change, reasonable effort to get implementation stable enough.\n\nPlease review my approach. It's very easy and straightforward. And seems to work fine for my users. So I want to know what you thing about it.\n\nWhen we get a list of IPs from DNS why don't we just reorder them. IPv4 should go first, IPv6 after them. This way application will try to use IPv4 first. And IPv4 should work in most cases. We'll fallback to IPv6 only if IPv4 fails. In real world right now IPv4 is used much more often than IPv6 so prioritisation probably makes sense.\n\nBut I'm still concerned about that. Is it safe enough to change the order? Maybe an optional thing. I'll create a pull request just for a review.\n"
    ],
    "371": [],
    "1740": [
        "@swankjesse I'm interested in working on this, couple questions:\n1. Is this still of interest?\n2. What's the expected behavior if a caller tries to call `bufferedBody()` after `body()`? Or `body()` twice?  (I guess I'm unsure what \"that's the last one we'll return.\" means) \n",
        "1. Yes!\n2. bufferedBody() after body() throws. All calls to body() return the same shared instance. As you read it, you consume it!\n",
        "@swankjesse Please make it. I am pretty much new to Android world and trying to log response body. I really could not find a way to logging buffered response with interceptors.\n",
        "```\n  /**\n   * Returns a copy of {@code body} without consuming it. This buffers up to {@code limit} bytes of\n   * {@code body} into memory.\n   *\n   * @throws IOException if {@code body} is longer than {@code limit}.\n   */\n  private ResponseBody copy(ResponseBody body, long limit) throws IOException {\n    BufferedSource source = body.source();\n    if (source.request(limit)) throw new IOException(\"body too long!\");\n    Buffer bufferedCopy = source.buffer().clone();\n    return ResponseBody.create(body.contentType(), body.contentLength(), bufferedCopy);\n  }\n```\n",
        "Clever. Stealing that (for now)!\n"
    ],
    "4580": [],
    "3532": [],
    "2855": [],
    "1222": [],
    "118": [],
    "2176": [],
    "246": [],
    "548": [],
    "374": [],
    "4290": [],
    "4112": [],
    "64": [],
    "4605": [],
    "3187": [],
    "2717": [],
    "3327": [],
    "4070": [],
    "1779": [],
    "243": [],
    "1787": [
        "+1 also seeing this quite a few times\n",
        "+1\n"
    ],
    "1790": [
        "Initially I'd like to just put the behavior back the way it was (intended to be).\n\nThe Android connectivity detection code uses the HttpURLConnection and assumes (rightly or wrongly) that a certain subset of \"routes\" are tried (where \"route\" is a combination of proxy/direct, ip addresses).\n\nPossibly related: We Android bugs raised occasionally where people have complained that HttpURLConnection.setConnectTimeout() and setReadTimeout() actually means we can wait N times those values because those timeouts are observed per socket. It's hard for apps to set a \"correct\" timeout in terms of \"time that will actually elapse\" because an arbitrary URL may resolve to an arbitrary number of socket connections (N).\n\nHowever, I've mostly pushed back on any modification because it will break existing apps and any other interpretation of the URL connection timeout is also prone to problems, particularly when misconfigured networks can just blackhole connection attempts and we always run into the underlying socket timeout. For true flexibility developers would probably need separate \"HTTP connect timeout\" and \"Socket connect timeout\" settings.\n",
        "I have updated the commit to address most comments. I'm not sure what to do about IPv6 addresses with scopes.\n",
        "I think we\u2019re pretty good at this point. APIs to configure timeouts and a policy flag to disable retries."
    ],
    "1465": [],
    "8": [],
    "4690": [],
    "1797": [],
    "2673": [],
    "1782": [],
    "1801": [
        "I'm getting the same problem, here's the stacktrace:\n\n```\njava.lang.NullPointerException: Attempt to invoke virtual method 'com.squareup.okhttp.Request com.squareup.okhttp.internal.http.HttpEngine.getRequest()' on a null object reference\n    at com.squareup.okhttp.Call$AsyncCall.execute(Call.java:175)\n    at com.squareup.okhttp.internal.NamedRunnable.run(NamedRunnable.java:33)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n    at java.lang.Thread.run(Thread.java:818)\n```\n"
    ],
    "2743": [],
    "3908": [],
    "366": [],
    "1824": [
        "Fixed with https://github.com/square/okhttp/pull/1852\n"
    ],
    "2286": [],
    "1827": [
        "Thanks!\n"
    ],
    "1936": [],
    "3887": [],
    "1831": [
        "We should probably throw an `IllegalStateException` in this case.\n",
        "Or UnsupportedOperationException.\n"
    ],
    "4531": [],
    "1833": [
        "Right now we have this inside `canonicalizeHost`:\n\n```\n  // Confirm that the decoded result doesn't contain any illegal characters.\n  int length = idnDecoded.length();\n  if (delimiterOffset(idnDecoded, 0, length, \"\\u0000\\t\\n\\r #%/:?@[\\\\]\") != length) {\n    return null;\n  }\n```\n\nI see no harm in strengthening this to forbid all control characters and 0x7f. Would that solve the problem?\n",
        "I started down that road yesterday but backed off when I saw the list of existing chars came from the WHATWG spec.\nI shall resurrect the change and see if there are any problems. I think it will result in the UnknownHostException / not following redirect behavior mentioned above, which constitutes a behavior change but not one that I can (currently) see causing too many problems.\n",
        "Yeah, I think it's better behavior.\n",
        "@nfuller any further action worth taking here?\n",
        "No, AFAIK it's fixed.\n"
    ],
    "4340": [],
    "3723": [],
    "1472": [],
    "4471": [],
    "1144": [],
    "3536": [],
    "389": [],
    "2150": [],
    "2256": [],
    "2721": [],
    "1872": [
        "I tried looking into this but gave up. At the very least, adding `[]` to the encode set for URI fixed the issue, but I'm not sure that it's the correct approach to re-encode the entire URL using a global encode set. URI has different encoding sets that it's verifying against for the different parts of the URL. Plus I'm worried (but did not confirm) that this wouldn't play well with IPv6.\n\nWe might need a more sophisticated strategy of encoding piecewise before handing to URI either through its `create` method or perhaps one of its constructors.\n",
        "This is similar to https://github.com/square/okhttp/issues/1836. According to [this](https://github.com/square/okhttp/issues/1061), doing cookies in OkHttp removes the last dependent on `java.net.URI`, which would avoid this issue\n",
        "There is a test case matching your case above that is expecting failure on '[' in paths (https://github.com/square/okhttp/blob/master/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java#L933).  The other PR was directed at queries, not paths, but it does seem sketchy to do a global re-encode.  [URI's multi-parameter](http://docs.oracle.com/javase/7/docs/api/java/net/URI.html#URI%28java.lang.String,%20java.lang.String,%20java.lang.String,%20int,%20java.lang.String,%20java.lang.String,%20java.lang.String%29) constructor does piecewise encoding. \n",
        "When PR will be accepted and released? Thanks!\n"
    ],
    "496": [],
    "971": [],
    "4236": [],
    "4611": [],
    "4713": [],
    "1225": [],
    "4488": [],
    "234": [],
    "4688": [],
    "4714": [],
    "1558": [],
    "20": [],
    "409": [],
    "1906": [
        "Very interesting, this suggests a bug in the HPACK encoder. I assume you're using OkHttp as the client also? \n",
        "Yes and it is selecting h2.\n\nIt looks like I may be reusing a request builder to initiate a 2nd identical request after the first succeeded and it is adding a 2nd User-Agent header.\n\nSome pseudo code of the really bad code I just discovered. It is interesting that the header was not canonicalized properly.\n\n``` java\npublic void doRequest(Request.Builder req) {\n    req.addHeader(\"User-Agent\", \"fake\");\n    try {\n        Request r = request.build();\n        response = mClient.newCall(r).execute();\n        if (cookiesGotClearedWhileRequestHappened) {\n            doRequest(req); // again\n        }\n    }\n}\n```\n",
        "Oh, very interesting.\n",
        "Also not that intermittent it's just a race condition for tripping the recursive `doRequest`. I can reproduce easily now.\n",
        "Awesome. Wanna send a test case? Something that loops 1000 times is okay!\n",
        "Will do.\n",
        "@brennantaylor ping!\n",
        "Yeah sorry I forgot. I will get to this soon.\n"
    ],
    "4707": [],
    "714": [],
    "1920": [
        "Yep, I think we were a little too aggressive in picking the canonical form here.\n",
        ":+1: \n"
    ],
    "1921": [
        "This happens when the call times out. When there is no response, the Response object is null, and in `readResponse`, it calls the object without checking whether it's null or not\n",
        "@jophde my theory is that you have a network interceptor that is returning null. Is that possible?\n"
    ],
    "1919": [
        "yep, thanks!\n",
        "seems to be back with okhttp-2.6.0 final\n",
        "Problem seems to be in HttpEngine.java line 938\n\n``` java\n      case HTTP_MULT_CHOICE:\n      case HTTP_MOVED_PERM:\n      case HTTP_MOVED_TEMP:\n      case HTTP_SEE_OTHER:\n        // Does the client allow redirects?\n        if (!client.getFollowRedirects()) return null;\n\n        String location = userResponse.header(\"Location\");\n        if (location == null) return null;\n        HttpUrl url = userRequest.httpUrl().resolve(location);\n\n        // Don't follow redirects to unsupported protocols.\n        if (url == null) return null;\n\n        // If configured, don't follow redirects between SSL and non-SSL.\n        boolean sameScheme = url.scheme().equals(userRequest.httpUrl().scheme());\n        if (!sameScheme && !client.getFollowSslRedirects()) return null;\n\n        // Redirects don't include a request body.\n        Request.Builder requestBuilder = userRequest.newBuilder();\n        if (HttpMethod.permitsRequestBody(userRequest.method())) {\n>>> HERE IS THE PROBLEM\n          requestBuilder.method(\"GET\", null);\n          requestBuilder.removeHeader(\"Transfer-Encoding\");\n          requestBuilder.removeHeader(\"Content-Length\");\n          requestBuilder.removeHeader(\"Content-Type\");\n        }\n\n```\n"
    ],
    "3415": [],
    "1121": [],
    "1927": [
        "Eep. I thought we'd fixed all of these.\n",
        "Did you try OkHttp 2.5? OkHttp 2.0 is really, really old.\n\nOn Thu, Oct 15, 2015 at 5:54 PM Jesse Wilson notifications@github.com\nwrote:\n\n> Eep. I thought we'd fixed all of these.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/1927#issuecomment-148532540.\n",
        "@JakeWharton  I edited it to 2.5 after the first post.\n",
        "It seems that response body isn't ungzipped automatically every time you specify \"Accept-Encoding: gzip\" header manually in a request. \n",
        "By adding that header you are informing OkHttp that you can accept\nGzip-encoded bodies at the application layer.\n\nOn Wed, Nov 18, 2015 at 2:21 PM Alexei Moisseev notifications@github.com\nwrote:\n\n> It seems that response body isn't ungzipped automatically every time you\n> specify \"Accept-Encoding: gzip\" header manually in a request.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/1927#issuecomment-157828838.\n",
        "@tyvsmith By the way, is it really necessary for you to use raw headers (`networkResponse`)?\nSeems like not.\nIt will work properly if you set auth header this way:\n\n``` java\nRequest.Builder builder = response.request().newBuilder();\nsetAuthHeader(builder, freshToken);\n```\n",
        "@alexeimoisseev At first glance that seems accurate, however, it appears like already existing headers only exist on the networkResponse.request(). Using the builder you recommended would lose other headers set.\n",
        "@tyvsmith I think the right fix is to avoid using `networkResponse()` when you're rebuilding the request.\n\n``` diff\n- Request.Builder builder = response.networkResponse().request().newBuilder();\n+ Request.Builder builder = response.request().newBuilder();\n```\n",
        "@swankjesse unfortunately, by using response.request(), all headers are stripped, including ones I injected with interceptors. Is this the desired behavior or is there a recommended alternative approach?\n\n![evaluate_expression_and_genymotion_-_google_nexus_5_-_5_1_0_-_api_22_-_1080x1920__1080x1920__480dpi__-_192_168_58_101](https://cloud.githubusercontent.com/assets/309657/11826159/5ea0058e-a338-11e5-9d58-664df3665eb5.jpg)\n\n![evaluate_expression](https://cloud.githubusercontent.com/assets/309657/11826162/6283fe08-a338-11e5-9bc7-8d0cdf4fa2fd.jpg)\n"
    ],
    "1194": [],
    "352": [],
    "2663": [],
    "3916": [],
    "600": [],
    "3512": [],
    "3642": [],
    "3097": [],
    "724": [],
    "843": [],
    "2195": [],
    "1849": [],
    "4528": [],
    "74": [],
    "763": [],
    "378": [],
    "539": [],
    "2103": [],
    "1998": [
        "Definitely an issue for me right now -- in my case, its other servers sending us `set-cookie:` headers that contain the 0x01 control character. \n\n(EDIT: Reverted to 2.4 to avoid the issue for now.)\n",
        "any update on this?\n",
        "Nothing yet. Is it just redirects and cookies?\n",
        "Yeah, we definitely shouldn\u2019t be throwing an unchecked exception here.\n\nOne problem is that the spec wants us to not interpret header fields, but since we\u2019re exposing a Java API we really want strings.\n\n>   Historically, HTTP has allowed field content with text in the\n>   ISO-8859-1 charset [ISO-8859-1], supporting other charsets only\n>   through use of [RFC2047] encoding.  In practice, most HTTP header\n>   field values use only a subset of the US-ASCII charset [USASCII].\n>   Newly defined header fields SHOULD limit their field values to\n>   US-ASCII octets.  A recipient SHOULD treat other octets in field\n>   content (obs-text) as opaque data.\n\nHandling ISO-8859-1 feels wrong, particularly since the upside of supporting additional characters has the downside of being locked out of UTF-8. Neither stripping non-ASCII characters nor stripping non-ASCII headers feels appropriate.\n",
        "Use URLEncoder encode  headers before addHeader, it works well for me.\n",
        "@zewenwang that only works when you're in control of the headers. If you're sending requests to some site that you don't control and receiving troublesome response headers, it's a much less effective strategy.\n",
        "Same problem here. Just got this (anonymous) Google Play crash report:\n\n```\njava.lang.RuntimeException: An error occurred while executing doInBackground()\n    at android.support.v4.content.ModernAsyncTask$3.done(ModernAsyncTask.java:142)\n    at java.util.concurrent.FutureTask.finishCompletion(FutureTask.java:354)\n    at java.util.concurrent.FutureTask.setException(FutureTask.java:223)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:242)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)\n    at java.lang.Thread.run(Thread.java:818)\nCaused by: java.lang.IllegalArgumentException: Unexpected char 0x201c at 0 in strict-transport-security value: \u201cmax-age=7200\u2033\n    at okhttp3.Headers$Builder.checkNameAndValue(Headers.java:320)\n    at okhttp3.Headers$Builder.add(Headers.java:270)\n    at okhttp3.internal.http.Http2xStream.readHttp2HeadersList(Http2xStream.java:263)\n    at okhttp3.internal.http.Http2xStream.readResponseHeaders(Http2xStream.java:149)\n    at okhttp3.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:775)\n    at okhttp3.internal.http.HttpEngine.access$200(HttpEngine.java:86)\n    at okhttp3.internal.http.HttpEngine$NetworkInterceptorChain.proceed(HttpEngine.java:760)\n    at at.bitfire.davdroid.HttpClient$PreemptiveAuthenticationInterceptor.intercept(HttpClient.java:153)\n    at okhttp3.internal.http.HttpEngine$NetworkInterceptorChain.proceed(HttpEngine.java:733)\n    at at.bitfire.davdroid.HttpClient$UserAgentInterceptor.intercept(HttpClient.java:139)\n    at okhttp3.internal.http.HttpEngine$NetworkInterceptorChain.proceed(HttpEngine.java:733)\n    at okhttp3.internal.http.HttpEngine.readResponse(HttpEngine.java:613)\n    at okhttp3.RealCall.getResponse(RealCall.java:244)\n    at okhttp3.RealCall$ApplicationInterceptorChain.proceed(RealCall.java:201)\n    at okhttp3.logging.HttpLoggingInterceptor.intercept(HttpLoggingInterceptor.java:212)\n    at okhttp3.RealCall$ApplicationInterceptorChain.proceed(RealCall.java:190)\n    at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:163)\n    at okhttp3.RealCall.execute(RealCall.java:57)\n    at at.bitfire.dav4android.DavResource.propfind(DavResource.java:268)\n    at at.bitfire.davdroid.ui.setup.DavResourceFinder.getCurrentUserPrincipal(DavResourceFinder.java:329)\n    at at.bitfire.davdroid.ui.setup.DavResourceFinder.findInitialConfiguration(DavResourceFinder.java:120)\n    at at.bitfire.davdroid.ui.setup.DavResourceFinder.findInitialConfiguration(DavResourceFinder.java:87)\n    at at.bitfire.davdroid.ui.setup.DetectConfigurationFragment$ServerConfigurationLoader.loadInBackground(DetectConfigurationFragment.java:142)\n    at at.bitfire.davdroid.ui.setup.DetectConfigurationFragment$ServerConfigurationLoader.loadInBackground(DetectConfigurationFragment.java:125)\n    at android.support.v4.content.AsyncTaskLoader.onLoadInBackground(AsyncTaskLoader.java:296)\n    at android.support.v4.content.AsyncTaskLoader$LoadTask.doInBackground(AsyncTaskLoader.java:54)\n    at android.support.v4.content.AsyncTaskLoader$LoadTask.doInBackground(AsyncTaskLoader.java:42)\n    at android.support.v4.content.ModernAsyncTask$2.call(ModernAsyncTask.java:128)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:237)\n    ... 3 more\n```\n\nSo, an HTTP request execute call has thrown an `IllegalArgumentException` which I could really not expect, causing DAVdroid to crash.\n\nI suggest to use checked exceptions instead \u2013 maybe subclasses of IOException? For instance, `CharacterCodingException` is used for a similar case and it's an IOException.\n",
        "Don't know why but I am still getting the error for some Japanese characters in the release 3.3.1. Had the fix released in 3.3.1?\n",
        "@JakeWharton The validation can easily bypassed:\n\n```\npublic LoginRequestBuilder addUmlauts(final String umlauts) {\n        Map<String, List<String>> currentHeaders = builder.build().headers().toMultimap();\n        Map<String, String> newHeaders = new HashMap<String, String>();\n        for (Map.Entry<String, List<String>> entrySet : currentHeaders.entrySet()) {\n            final String headerName = entrySet.getKey();\n            builder.removeHeader(headerName);\n            newHeaders.put(headerName, entrySet.getValue().get(0));\n        }\n        newHeaders.put(\"Umlauts\", umlauts);\n        builder.headers(Headers.of(newHeaders));\n        return this;\n    }\n```\n",
        "I understand the current approach is to accept malformed header (with non-ascii characters), but to never allow generating them.\nCould this be just too strict? I find it hardly usable for cookies. One is supposed to accept cookies and send them back. So once you got a (malformed) utf-8 cookie value, you have a problem with sending them back.\nDo you think allowing this could become an option? A dirty method with an unpleasant name that swallows bad characters maybe? :)\n",
        "Updated to the latest version of the lib and still getting same error with the following header:\r\n```\r\nUser-Agent: okhttp/3.3.0 (X325; X325\u2013Locked to Life Wireless; X325; 4.4.2; 3.1.5; 216.48.89.45; alive)\r\n```\r\n\r\nThrowing this exception:\r\n```\r\nUnexpected char 0x2013 at 24 in User-Agent value: okhttp/3.3.0 (X325; X325\u2013Locked to Life Wireless; X325; 4.4.2; 3.1.5; 216.48.89.45; alive)\r\n```",
        "I am also facing same error. I have updated to latest version still issue persist. @swankjesse do we have any workaround or any fix for this ?. Thank you for help advance.",
        "@manjunath143 please open a pull request with an executable test case that demonstrates the failure."
    ],
    "977": [],
    "2001": [],
    "3295": [],
    "1598": [],
    "4644": [],
    "4104": [],
    "196": [],
    "949": [],
    "642": [],
    "923": [],
    "2035": [
        "Why do you want to remove those headers? I think their useful for tracking the speed of the connections in an Interceptor. \nI use them for this at least.\n",
        "You can do the same thing in your interceptor by calling `System.nanoTime()` !\n",
        "Sure! By now I was just counting on them beeing there. But I guess the build will break wehen you remove them, because I use the constants for finding them. \n",
        "Yeah, they\u2019re a leaked implementation detail. Best to not rely on \u2019em!\n"
    ],
    "2000": [],
    "3033": [],
    "1102": [],
    "2454": [],
    "916": [],
    "3491": [],
    "77": [],
    "474": [],
    "2015": [],
    "2050": [
        "This is working as designed. Honoring the headers\u2019 content length is problematic because it interferes with transformations like compression.\n\nSo better question: can you work with the current behavior?\n",
        "Sure I can. It's just prone for errors, because a developer may not notice that the library overrides his header. Minimal fix would be to document this behavior in the signature of Request.addHeader().\n",
        "Thanks @chaitanyajun12\n"
    ],
    "2358": [],
    "510": [],
    "669": [],
    "3796": [],
    "237": [],
    "832": [],
    "704": [],
    "1883": [],
    "1032": [],
    "630": [],
    "2069": [
        "The request needs to be valid at each step.\n"
    ],
    "4740": [],
    "3864": [],
    "2470": [],
    "3059": [],
    "2251": [],
    "2391": [],
    "162": [],
    "2106": [],
    "2473": [],
    "3920": [],
    "4435": [],
    "347": [],
    "2116": [],
    "204": [],
    "3712": [],
    "3069": [],
    "707": [],
    "2127": [
        "Also maybe `Response.body().closeQuietly()` to make that less of a hassle.\n",
        "We talked about removing `IOException` from `close()` since it's not useful\n",
        "#2129 \n",
        "Plus, we\u2019re seeing this when I run `Crawler` with the new HttpURLConnection frontend. So I can use it myself!\n",
        "I was tracking one of these down recently, would you be ok with capturing a stack trace at the time of execute/enqueue?\n",
        "Yeah, I think that's exactly what we should be doing.\n"
    ],
    "4626": [],
    "2714": [],
    "842": [],
    "412": [],
    "3060": [],
    "2207": [],
    "3128": [],
    "4203": [],
    "4460": [],
    "101": [],
    "3080": [],
    "4738": [],
    "1793": [],
    "2151": [
        "Two possibilities:\n- OkHttp has a bug where we\u2019re attempting to recover when we shouldn't be because we\u2019ve exhausted all of the available routes.\n- OkHttp has a bug where you\u2019ve got a custom DNS implementation that returned zero IP addresses for a host and we didn't reject that.\n",
        "Please try OkHttp 2.7.1 which has a targeted fix for this problem.\n",
        "I believe we have this fixed with 2.7.1. Will reopen if that fix wasn't sufficient.\n",
        "2.6 is Ok, I will try 2.7.1 later, thanks very much! Merry Christmas\uff01\n"
    ],
    "2158": [
        "Are you closing the response body of all requests made in the test?\n",
        "the sample [https://github.com/square/okhttp/wiki/Recipes](https://github.com/square/okhttp/wiki/Recipes) doesn't close response body neither.\n\nnormally i won't sumit so many requests at the same time, do i need to close response body all the time? just a little confused...\n",
        "Which sample? Most call `body().string()` which closes it for you.\n",
        "you mean if i call `body().string()`, no need to call `body().close()`, other situation it needs ?\n\nafter i call close for all response body except `body().string()`, no more warning.\n",
        "Correct. We will document which methods on `ResponseBody` automatically close it.\n",
        "If I use `body().byteStream()`do I need to close the connection explicitly as well?\n",
        "Yes, per the javadoc, you'll need to close the body. Only bytes() and string() close it automatically. See https://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/ResponseBody.java#L37\n",
        "Just tried it but it seems if I close the stream after calling byteStream() I will then get an exception on processing the stream since it has already been closed.\n",
        "I was confused ,,I got the warning when i used Retrofit ,,, I didn't have to do anything with the response body,how can I solve this ,,\n\nI do have a custom interceptor ,, is it because of this ?\n",
        "I also have the same problem using Retrofit when there are 2 concurrent http requests are under process. what could go wrong? I do have interceptors.",
        "On a 64-bit API 25 Android emulator, the problem does not occur. But it occurs on the 32-bit emulator."
    ],
    "3410": [],
    "1457": [],
    "1958": [],
    "2178": [],
    "2428": [],
    "904": [],
    "759": [],
    "2330": [],
    "3998": [],
    "2198": [
        "Definitely a bug in OkHttp, but nothing I could spot within a few minutes of staring at the code. I\u2019ll try to reproduce and get this fixed.\n",
        "This may or may not be related, I get the IllegalStateException with this scenario. I'm not 100% sure if this is considered valid\n\n``` java\n  @Test public void cachedRedirect() throws IOException {\n    server.enqueue(new MockResponse()\n        .setResponseCode(HttpURLConnection.HTTP_MOVED_PERM)\n        .addHeader(\"Cache-Control: max-age=60\")\n        .addHeader(\"Location: /bar\"));\n    server.enqueue(new MockResponse()\n        .setBody(\"ABC\"));\n    server.enqueue(new MockResponse()\n        .setBody(\"ABC\"));\n\n    Request request1 = new Request.Builder().url(server.url(\"/foo\")).build();\n    Response response1 = client.newCall(request1).execute();\n    assertEquals(\"ABC\", response1.body().string());\n\n    Request request2 = new Request.Builder().url(server.url(\"/foo\")).build();\n    Response response2 = client.newCall(request2).execute();\n    assertEquals(\"ABC\", response2.body().string());\n  }\n```\n",
        "@dave-r12 ooh, awesome test. Thankyou\n",
        "Is there any plan to release another bug fix to the 2.x branch or will this only be in 3.0?\n",
        "Can do. https://github.com/square/okhttp/issues/2209\n"
    ],
    "1658": [],
    "3600": [],
    "2202": [
        "Sorry for my poor explanation, so I give a simple summary:\nCurrent Android `CookieManager#get(URI, Map<String, List<String>>)` implementation[1] would only return a map whose cookie's entry is a List with only one string item \u2014\u2014 header. This header string was composed of several cookies.\nHowever current OkHttp use `HttpCookie.parse(String)` to parse this header string, but this `HttpCookie.parse(String)` method is only used for parsing one set-cookie\nor set-cookie2 format header.\n\n[1] [return Collections.singletonMap(\"Cookie\", Collections.singletonList(result.toString()))](https://android.googlesource.com/platform/libcore/+/f7ab2bc37debba91864bfec6572a3e7bbe994c58/luni/src/main/java/java/net/CookieManager.java#144)\n\nEdit: details more about this issue.\n",
        "I\u2019ve added a test that tries to reproduce the problem, but doesn\u2019t. Could you send a test that does?\nhttps://github.com/square/okhttp/pull/2207/files\n"
    ],
    "1276": [],
    "2898": [],
    "2179": [],
    "376": [],
    "4038": [],
    "7": [],
    "4160": [],
    "63": [],
    "2655": [],
    "1738": [],
    "2048": [],
    "696": [],
    "1324": [],
    "749": [],
    "2078": [],
    "147": [],
    "2263": [
        "Yeah, the wording could be more clear. It intends to mean that when assembling the complete path, we put a '/' before each segment.\n",
        "So like this?\n\n| Input | PathSegments |\n| --- | --- |\n| `https://github.com` | `[]` |\n| `https://github.com/` | `[\"\"]` |\n| `https://github.com/square/okhttp/issues/2263` | `[\"square\", \"okhttp\", \"issues\", \"2263\"]` |\n",
        "Yep. Though the first case is impossible, every HttpURL has at least one path segment. (ie. we\u2019ll convert the first case into the second case.)\n",
        "Is there any reasoning behind this? I've never seen domain name with a trailing slash in an address bar.\n",
        "There is _always_ a path whether it's displayed or not. When you type \"\nhttp://google.com\" and press enter a \"GET / HTTP/1.1\" is sent indicating a\npath of \"/\".\n\nOn Wed, Jan 20, 2016 at 2:12 PM Marijn van der Werf <\nnotifications@github.com> wrote:\n\n> Is there any reasoning behind this? I've never seen domain name with a\n> trailing slash in an address bar.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/2263#issuecomment-173328230.\n",
        "Ah, my bad then!\n"
    ],
    "2304": [],
    "2660": [],
    "2507": [],
    "135": [],
    "777": [],
    "3900": [],
    "687": [],
    "424": [],
    "2335": [],
    "2292": [],
    "1198": [],
    "887": [],
    "1396": [],
    "4651": [],
    "974": [],
    "76": [],
    "809": [],
    "1967": [],
    "784": [],
    "2315": [
        "Seems it's a bug inside Android Socket implementation.\n\nSOCKS working fine on Oracle JRE and OpenJDK JRE, and I looked into their code:\n`Socket.connect(SocketAddress endpoint, int timeout)`\n\n``` java\n            if (epoint.isUnresolved())\n                impl.connect(addr.getHostName(), port);\n            else\n                impl.connect(addr, port);\n```\n\nThat's what I found in Android framework:\n\n``` java\n        InetSocketAddress inetAddr = (InetSocketAddress) remoteAddr;\n        InetAddress addr;\n        if ((addr = inetAddr.getAddress()) == null) {\n            throw new UnknownHostException(\"Host is unresolved: \" + inetAddr.getHostName());\n        }\n        int port = inetAddr.getPort();\n\n        checkDestination(addr, port);\n        synchronized (connectLock) {\n            try {\n                if (!isBound()) {\n                    // socket already created at this point by earlier call or\n                    // checkOpenAndCreate this caused us to lose socket\n                    // options on create\n                    // impl.create(true);\n                    if (!usingSocks()) {\n                        impl.bind(Inet6Address.ANY, 0);\n                    }\n                    isBound = true;\n                }\n                impl.connect(remoteAddr, timeout);\n                isConnected = true;\n                cacheLocalAddress();\n            } catch (IOException e) {\n                impl.close();\n                throw e;\n            }\n        }\n```\n\nAndroid only accept resolved `InetSocketAddress`.\n",
        "Could you report this issue upstream to AOSP? I\u2019m not particularly eager to implement a SOCKS proxy inside of OkHttp. You might need to implement your own SocketFactory that implements SOCKS.\n",
        "No action for us to take on this.\n"
    ],
    "2321": [
        "Aww, shucks. Thanks for reporting this.\n",
        "I think we fix by only doi g this work if a CertificatePinner is in use.\n\nWe can possibly also move the work to Platform which might be able to get Android\u2019s own certificate cleaner to do that work.\n",
        "Released as 3.1.1 and 2.7.4.\n"
    ],
    "2323": [
        "Ahh, yeah I gotta fix this for the GMS TLS stack. Will fix.\n",
        "Released as 3.1.1 and 2.7.4.\n",
        "Just re-checked with 3.1.1, unfortunately, still doesn't work under Robolectric but works on actual Android (API 23).\n\n```\nCaused by: java.lang.IllegalStateException: Unable to extract the trust manager on okhttp3.internal.Platform$Android@20bcec4c, sslSocketFactory is class sun.security.ssl.SSLSocketFactoryImpl\n    at okhttp3.OkHttpClient.<init>(OkHttpClient.java:186)\n    at okhttp3.OkHttpClient.<init>(OkHttpClient.java:60)\n    at okhttp3.OkHttpClient$Builder.build(OkHttpClient.java:718)\n```\n",
        "Same thing here, robolectric tests are now crashing after upgrade from 3.0.0-RC1\n",
        "Same here on robolectric tests:\n\n`java.lang.IllegalStateException: Unable to extract the trust manager on okhttp3.internal.Platform$Android@19f0acf3, sslSocketFactory is class sun.security.ssl.SSLSocketFactoryImpl\n    at okhttp3.OkHttpClient.<init>(OkHttpClient.java:187)\n    at okhttp3.OkHttpClient.<init>(OkHttpClient.java:151)`\n",
        "@swankjesse please see above: should this be reopened, or would you prefer a new issue opened for the `sun.security.ssl.SSLSocketFactoryImpl` issue?\n",
        "Fixes for Robolectric released in OkHttp 3.1.2.\n",
        "Yupp, Robolectric tests are now back to normal, thanks!\n",
        "Hi,\nsame here\n\nUnable to extract the trust manager on okhttp3.internal.Platform$Android@53244b48, sslSocketFactory is class crittercism.android.q at okhttp3.OkHttpClient.<init>(OkHttpClient.java:187)\nat okhttp3.OkHttpClient.<init>(OkHttpClient.java:151)\n",
        "This issue should be re-opened, I still have the same issue using Retrofit 2.0.0-beta4  (/OkHttp 3.1.2) in combination with Crittercism  (5.5.5-rc-1 to be exact).\n\nError:\n\n```\nCaused by: java.lang.IllegalStateException: Unable to extract the trust manager on okhttp3.internal.Platform$Android@2e3d9cee, sslSocketFactory is class crittercism.android.q\n                                                                                at okhttp3.OkHttpClient.<init>(OkHttpClient.java:187)\n                                                                                at okhttp3.OkHttpClient.<init>(OkHttpClient.java:60)\n                                                                                at okhttp3.OkHttpClient$Builder.build(OkHttpClient.java:718)\n                                                                                at [mypackage].modules.AppModule.provideOkHttpClient(AppModule.java:385)\n```\n",
        "@kacamak , @PieterAelse ugh! You guys interested in trying to help out with the fix? I need to be able to extract the X509TrustManager instance from the SSLSocketFactory, but I don\u2019t know anything about the SSLSocketFactory that gets configured when you use Crittercism. (Also, _why_ is Crittercism customizing the system\u2019s SSL? That seems sketchy.)\n",
        "@swankjesse, some folks are seeing this in the PayPal Sdk too.  PayPal uses custom SSLSocketFactory for pinning purposes and to enable TLSv1.2 on API 16-19 devices.\n",
        "Have this problem with DAVdroid's [SSLSocketFactoryCompat](https://gitlab.com/bitfireAT/davdroid/blob/9a8d29e774f71c764a81e09ed3c42011267aec64/app/src/main/java/at/bitfire/davdroid/SSLSocketFactoryCompat.java).\n\nHas anything changed in how SSLSocketFactories should be set?\n",
        "If you rename that factory\u2019s private `defaultFactory` field to `delegate`, the hacky detector we use will do the right thing.\n",
        "Can you please elaborate on your above comment a little bit more @swankjesse !! That would be very helpful.\n",
        "```\nprivate SSLSocketFactory defaultFactory;\n```\n\nto\n\n```\nprivate SSLSocketFactory delegate;\n```\n",
        "Thanks @iNoles ! I had a complete different thing in mind :) This was easy.\n",
        "Can confirm that it works with `private SSLSocketFactory delegate`. And I won't question it ;)\n",
        "@swankjesse I also don't know whyyy Crittercism is doing anything with SSL. So I'm also not sure how I'll be able to help you out with getting the SSLSocketFactory. \n",
        "Hi, same issue Here wirh the Crittercism API.\n",
        "Hey there, also seeing the same issue. Specifically with the combination of Crittercism and Optimizely...\n",
        "Still same issue with Crittercism.\n\n``` Java\nCaused by: java.lang.IllegalStateException: Unable to extract the trust manager on okhttp3.internal.Platform$Android@256897c7, sslSocketFactory is class crittercism.android.q\n                                                                        at okhttp3.OkHttpClient.<init>(OkHttpClient.java:187)\n                                                                        at okhttp3.OkHttpClient.<init>(OkHttpClient.java:151)\n```\n",
        "@aryarohit07 that\u2019s a strange class name, `crittercism.android.q`. Does it say the same thing if you disable ProGuard?\n",
        "The critterism sdk comes pre-obfuscated using proguard. \nAttached is a simple decompilation of that class - it's a custom SSLSocketFactory.\nThere's a  `public SSLSocketFactory a;` in there.\n\n[critterism.android.a.java.zip](https://github.com/square/okhttp/files/156725/critterism.android.a.java.zip)\n",
        "I am seeing this crash in my app when I have Crittercism 5.5.1 and OkHttp 3.2, however it only occurs when I have proguard enabled for my app.  When I build with it disabled the app works.  It makes me think this might be resolvable by an additional keep command.  \n",
        "Out of curiosity: is it possible to use/create interface to get trust manager from and allow users write custom implementations instead of relying on field name and trying to get it via reflection?\n",
        "@swankjesse I am getting this error even with proguard disabled. And as @ikoz says, I think critterism sdk is already minified using proguard.\n",
        "The issue is only with OkHttp version >=  3.1.0\n",
        "@artem-zinnatullin neat idea. Wanna send a PR to explore further? Not sure it\u2019ll work out because then the delegate will still need to get the trust manager, but it\u2019s worth writing some code.\n",
        "Hey @swankjesse !\n\nLooking to figure out the issue, I saw that you are extracting SSLContext as below:\n\n``` java\npublic X509TrustManager trustManager(SSLSocketFactory sslSocketFactory) {\n    // Attempt to get the trust manager from an OpenJDK socket factory. We attempt this on all\n    // platforms in order to support Robolectric, which mixes classes from both Android and the\n    // Oracle JDK. Note that we don't support HTTP/2 or other nice features on Robolectric.\n    try {\n      Class<?> sslContextClass = Class.forName(\"sun.security.ssl.SSLContextImpl\");\n      Object context = readFieldOrNull(sslSocketFactory, sslContextClass, \"context\");\n      if (context == null) return null;\n      return readFieldOrNull(context, X509TrustManager.class, \"trustManager\");\n    } catch (ClassNotFoundException e) {\n      return null;\n    }\n  }\n```\n\nOur code tries to use `javax.net.ssl.SSLContext` instead of `sun.security...`. Could we either add some code here to look for that too, if nothing. \n\nThat should solve a lot of issues. I am trying to setup dev machine to test this out, but running into `sun.security.*` class not found issues.\n",
        "Hi All -- I'm with Crittercism (renamed recently to Apteligent). We are also investigating this issue. If you're still having issues please contact support@crittercism.com and we'll keep you updated. \n",
        "I'm one of the developers responsible for the Crittercism Android SDK. \n\ncrittercism.android.q is a custom socket factory that we use to wrap the default socket factories.  We delegate socket generation to the original socket factories and wrap newly generated sockets with our own socket which is used to monitor network performance (url, bytes sent, bytes received, latency, status code, and exceptions thrown when talking to that socket).\n\nTwo solutions I can imagine:\n1)  Create an interface for retrieving the TrustManager.  We'd have to implement it on our end.\n2)  We make our factory subclass OpenSSLSocketFactory (using some compilation tricks).\n\n#2 is a bit more future proof as we won't have to coordinate if similar changes are needed in the future.\n\nWe're finishing a large change to our network monitoring code at the moment, which needs to be wrapped up before starting on these changes.  That'll be about 2-3 weeks.\n",
        "Hey @dshirley! So we meet again! One option is to name the delegate socket factory `delegate`. OkHttp has a hack that looks for this field, and if its present the right thing happens automatically.\n",
        "Hey @swankjesse.  I figured it would be a matter of time :-)  \n\nIt turns out we actually _do_ give our delegate factory the variable name \"delegate\"... but ProGuard changes it.  It should be an easy fix.  I believe we'll just need to update our OkHttp regression tests to use the latest version.\n\nFor others that are watching, we're still wrapping up some large changes to our networking monitoring code.  We should be able to get to this in about 2-3 weeks.\n",
        "I have the same issue as the OP with Retrofit 2.0.0 and okhttp 3.2.0.\n",
        "Wildfly 10, java8, and any version > 3.0.1:\nUnable to extract the trust manager on okhttp3.internal.Platform@10c89bdf, sslSocketFactory is class sun.security.ssl.SSLSocketFactoryImpl\n",
        "@dshirley Confirming the same crash with Crittercism and Retrofit 2.0.1. Leaving Crittercism out of production builds temporarily solves the problem.\n",
        "Hi, i have the same issue with Crittercism. Look's like SSLParametersImpl package name can differ on differnt android versions.\n![screen shot 2016-04-06 at 7 42 04 pm](https://cloud.githubusercontent.com/assets/12971849/14324957/cfbc41ec-fc2f-11e5-9fdd-871db39e3f9a.png)\nPlatform class is searching for com.google.android.gms.org.conscrypt.SSLParametersImpl and actual package name is  com.android.org.conscrypt.SSLParametersImpl\n",
        "@swankjesse updating Parse Android SDK and ran into this same issue.  Even using the SSLCertficateFactory() call seems to break.  See https://github.com/ParsePlatform/Parse-SDK-Android/pull/435/files#r58793351.  Do you think this call is redundant given we already set socket timeouts earlier?\n",
        "We are still experiencing this issue when using Crittercism and OkHttp 3.2.0\n",
        "Event with latest Crittercism 5.6.1RC and OkHttp3.2.0 - result the same - crash while application start.\n",
        "The latest snapshot has a new API that lets you specify the SSLSocketFactory and TrustManager independently. Using that should resolve your problems.\n",
        "@swankjesse Any idea on when 3.3.0 will be released?\n",
        "@swankjesse thanks for the suggestion! I was already using reflection to set certain fields so the internal reflection would not run (kind of ironic if you think about it)\n\nEdit: tested, and it works, thanks! Current solution looks like this:\n\n```\n    @Provides\n    public X509TrustManager provideX509TrustManager() {\n        try {\n            TrustManagerFactory factory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n            factory.init((KeyStore) null);\n            TrustManager[] trustManagers = factory.getTrustManagers();\n            return (X509TrustManager) trustManagers[0];\n        } catch (NoSuchAlgorithmException | KeyStoreException exception) {\n            Log.e(getClass().getSimpleName(), \"not trust manager available\", exception);\n        }\n\n        return null;\n    }\n\n    @Provides\n    public SSLSocketFactory provideSSLSocketFactory(X509TrustManager trustManager) {\n        try {\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, new TrustManager[]{trustManager}, null);\n            return sslContext.getSocketFactory();\n        } catch (NoSuchAlgorithmException | KeyManagementException exception) {\n            Log.e(getClass().getSimpleName(), \"not tls ssl socket factory available\", exception);\n        }\n\n        return (SSLSocketFactory) SSLSocketFactory.getDefault();\n    }\n\n    @Provides\n    public OkHttpClient provideHttpClient(SSLSocketFactory sslSocketFactory, X509TrustManager trustManager) {\n        return new OkHttpClient.Builder()\n                .sslSocketFactory(sslSocketFactory, trustManager)\n                .build();\n    }\n```\n",
        "No estimates. Historically we release every 2\u20134 months.\n",
        "For the Apteligent Android SDK, we've made some changes in version 5.6.2 that should address the issue. You can find the downloadable file for the version here:\n\nhttps://app.crittercism.com/downloads/download/crittercism_v5_6_2_sdkonly.jar\n",
        "The 2nd problem is currently if you want to pass an SSL session cache, you have to pass in a SSL Socket factory:\n\n```\nOkHttpClient.Builder builder = new OkHttpClient.Builder();\nbuilder.sslSocketFactory(SSLCertificateSocketFactory.getDefault(socketOperationTimeout, sslSessionCache));\n```\n\nBut even for stock Android `SSLCertificateSocketFactory` relies on `com.android.org.conscrypt.OpenSSLContextImpl` so the trust manager code fails looking for `sun.security.ssl.SSLContextImpl`.\n\nIt turns out the Parse Android SDK, which includes OkHttp2, can't be upgraded until we get to 3.3.0. \nI attempted to do so just now and ran into the issue here.  https://github.com/ParsePlatform/Parse-SDK-Android/pull/435/files#r58793351\n\nI can get around the issue by using the snapshot version and implementing the code to get the default trust manager:\n\n``` java\n\n  private X509TrustManager systemDefaultTrustManager() {\n    try {\n      TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(\n              TrustManagerFactory.getDefaultAlgorithm());\n      trustManagerFactory.init((KeyStore) null);\n      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n      if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) {\n        throw new IllegalStateException(\"Unexpected default trust managers:\"\n                + Arrays.toString(trustManagers));\n      }\n      return (X509TrustManager) trustManagers[0];\n    } catch (GeneralSecurityException e) {\n      throw new AssertionError(); // The system has no TLS. Just give up.\n    }\n  }\n```\n\nAnd then later:\n\n``` java\nbuilder.sslSocketFactory(SSLCertificateSocketFactory.getDefault(socketOperationTimeout, sslSessionCache), systemDefaultTrustManager());\n```\n\nSo waiting for the 3.3.0 release before Parse's Android SDK implementation can be bumped to use OkHttp3. :)\n",
        "One request though if it's possible to make systemDefaultTrustManager() publicly exposed somehow (or at least yanked out of OkHttpClient.java)...otherwise we're going to just reimplement the code. :)\n",
        "Confirmed that the Crittercism 5.6.2 update fixes the issue, thanks for the heads up @jkang-critter \n",
        "@jkang-critter when Crittercism 5.6.2 update fix will be integrated in cordova-plugin-apteligent ?\n",
        "@codebaum  You shouldn't have to disable service monitoring anymore.  The bug was fixed in Crittercism 5.6.1.  An even later version (5.6.3( is now available.\n",
        "~~I was able to make it work with Retrofit 2.0.2 and Crittercism 5.5.5, but I had to disable service monitoring via CrittercismConfig.~~\n\nEDIT: see response below\n",
        "@dshirley Never mind, I thought it wasn't working with 5.6.3-rc-1 but I re-tested and I'm not seeing a crash anymore. \n",
        "Just a friendly ping to see if we can get a fix/release for this issue.  Trying to get things updated for the Parse SDK so would want to have a way to make a call to systemDefaultTrustManager()\n",
        "I have read the discussion on this issue, however I am totally confused by all the discussion on 3rd party libraries that just use OkHttp. My major problem is that I neither do see a clear description why this error is occurring nor how to fix it (or better how to get around it).\n\nI am using plain OkHttp 3.2.0 and Android with my custom SSLSocketFactor and TrustManager implementation. \n",
        "I'm personally getting this error with Retrofit2 v2.0.2:\n\n`Unhandled exception: java.lang.IllegalStateException: Unable to extract the trust manager on okhttp3.internal.Platform@29eaf7d1, sslSocketFactory is class sun.security.ssl.SSLSocketFactoryImpl\n    at okhttp3.OkHttpClient.<init>(OkHttpClient.java:187) [okhttp-3.2.0.jar:]\n    at okhttp3.OkHttpClient.<init>(OkHttpClient.java:60) [okhttp-3.2.0.jar:]\n    at okhttp3.OkHttpClient$Builder.build(OkHttpClient.java:718) [okhttp-3.2.0.jar:]`\n",
        "Using OkHttp 3.3.0-SNAPSHOT fixed the issue for me.\n",
        "Was fixed here by using Crittercism v5.6.3\n",
        "When Crittercism v5.6.3 will be integrated in cordova-plugin-apteligent ?\nRight now it's using release 5.5.2 and I still have the issue in my hybrid app.\n",
        "Hey so i'm running both Crittercsim 5.6.4 and OkHttp V3.3.0 and still facing the crash. Any update on how to fix it ?\n",
        "We're also having this crash. Only on Androids 4.0 and 4.1.\n",
        "+1 Having this same issue on retrofit:2.1.0, I'm simply trying to build an instance of retrofit on the setUp method of a test.\nI'm not event using roboelectric, I am using Mockito and PowerMock though\n\n```\n    testCompile 'org.mockito:mockito-core:1.10.19'\n    testCompile 'org.powermock:powermock:1.6.5'\n    testCompile 'org.powermock:powermock-module-junit4:1.6.5'\n    testCompile 'org.powermock:powermock-api-mockito:1.6.5'\n```\n\n```\n@Before public void setUp() throws Exception {\n        MockitoAnnotations.initMocks(this);\n\n        Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(BuildConfig.BASE_URL)\n                .build(); //Crash here -> java.lang.AssertionError at okhttp3.OkHttpClient.systemDefaultTrustManager(OkHttpClient.java:260)\n\n}\n```\n\nFull stacktrace:\n\n```\njava.lang.AssertionError\n    at okhttp3.OkHttpClient.systemDefaultTrustManager(OkHttpClient.java:260)\n    at okhttp3.OkHttpClient.<init>(OkHttpClient.java:228)\n    at okhttp3.OkHttpClient.<init>(OkHttpClient.java:203)\n    at retrofit2.Retrofit$Builder.build(Retrofit.java:551)\n    at com.productify.urge.usecase.GetCategoriesUseCaseTest.setUp(GetCategoriesUseCaseTest.java:68)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.internal.runners.MethodRoadie.runBefores(MethodRoadie.java:133)\n    at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:96)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.executeTest(PowerMockJUnit44RunnerDelegateImpl.java:300)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTestInSuper(PowerMockJUnit47RunnerDelegateImpl.java:131)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.access$100(PowerMockJUnit47RunnerDelegateImpl.java:59)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner$TestExecutorStatement.evaluate(PowerMockJUnit47RunnerDelegateImpl.java:147)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.evaluateStatement(PowerMockJUnit47RunnerDelegateImpl.java:107)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTest(PowerMockJUnit47RunnerDelegateImpl.java:82)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runBeforesThenTestThenAfters(PowerMockJUnit44RunnerDelegateImpl.java:288)\n    at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:87)\n    at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:50)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.invokeTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:208)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.runMethods(PowerMockJUnit44RunnerDelegateImpl.java:147)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$1.run(PowerMockJUnit44RunnerDelegateImpl.java:121)\n    at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:34)\n    at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:44)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run(PowerMockJUnit44RunnerDelegateImpl.java:123)\n    at org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run(JUnit4TestSuiteChunkerImpl.java:121)\n    at org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run(AbstractCommonPowerMockRunner.java:53)\n    at org.powermock.modules.junit4.PowerMockRunner.run(PowerMockRunner.java:59)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\n```\n",
        "Can you put a breakpoint on `OkHttpClient.java:260` and see what the cause is?\n",
        "Sure, the following line on `OkHttpClient.java`\n\n```\n private X509TrustManager systemDefaultTrustManager() {\n    try {\n      TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(\n          TrustManagerFactory.getDefaultAlgorithm());\n```\n\nThrows this exception:\n\n`java.security.NoSuchAlgorithmException: class configured for TrustManagerFactory: \nsun.security.ssl.TrustManagerFactoryImpl$PKIXFactory not a TrustManagerFactory`\n\n`TrustManagerFactory.getDefaultAlgorithm()` returns the string: \"PKIX\"\n\nHope that helps\n",
        "@feresr looks like PowerMock is causing you harm here.\nhttp://stackoverflow.com/questions/14654639/when-a-trustmanagerfactory-is-not-a-trustmanagerfactory-java\n",
        "@swankjesse Yes, thank you! that was exactly it. that solved my issue.\n",
        "Why Class.forName(\"sun.security.ssl.SSLContextImpl\") has not found here?\n`Class<?> sslContextClass = Class.forName(\"sun.security.ssl.SSLContextImpl\");`\nResult message:\nERROR [org.apache.catalina.core.ContainerBase.[jboss.web].[default-host].[/].[ProxyServlet]](http-localhost-127.0.0.1-8080-4) Servlet.service() for servlet ProxyServlet threw exception: java.lang.IllegalStateException: Unable to extract the trust manager on okhttp3.internal.Platform@67ec7968, sslSocketFactory is class sun.security.ssl.SSLSocketFactoryImpl\n    at okhttp3.OkHttpClient.<init>(OkHttpClient.java:187) [okhttp-3.2.0.jar:]\n    at okhttp3.OkHttpClient.<init>(OkHttpClient.java:60) [okhttp-3.2.0.jar:]\n    at okhttp3.OkHttpClient$Builder.build(OkHttpClient.java:718) [okhttp-3.2.0.jar:]\n    at com.graphhopper.api.GraphHopperWeb.<init>(GraphHopperWeb.java:66) [directions-api-java-client-0.7.0.1.jar:]\n    at com.graphhopper.api.GraphHopperWeb.<init>(GraphHopperWeb.java:58) [directions-api-java-client-0.7.0.1.jar:]\n\nFrom the code:\n`final GraphHopperWeb gh = new GraphHopperWeb();`\n\nServer: JBoss AS 7.1.1.Final \"Brontes\"\n\npom.xml:\n`<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>routeplanner2</groupId>\n  <artifactId>routeplanner2</artifactId>\n  <packaging>war</packaging>\n  <version>2.0</version>\n  <name>routeplanner2</name>\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <maven.compiler.source>1.6</maven.compiler.source>\n    <maven.compiler.target>1.6</maven.compiler.target>\n  </properties>\n  <dependencies>\n    <dependency>\n      <groupId>org.jboss.spec</groupId>\n      <artifactId>jboss-javaee-6.0</artifactId>\n      <version>1.0.0.Final</version>\n      <type>pom</type>\n      <scope>provided</scope>\n    </dependency>\n        <dependency>\n            <groupId>com.googlecode.objectify</groupId>\n            <artifactId>objectify</artifactId>\n            <version>5.1.10</version>\n        </dependency>\n        <dependency>\n            <groupId>com.google.appengine</groupId>\n            <artifactId>appengine-api-1.0-sdk</artifactId>\n            <version>1.8.9</version>\n        </dependency>\n        <!-- GraphHopper -->\n        <dependency>\n            <groupId>com.graphhopper</groupId>\n            <!-- artifactId>graphhopper-core</artifactId>\n            <version>0.8-SNAPSHOT</version -->\n            <artifactId>graphhopper</artifactId>\n            <version>0.7.0</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.apache.xmlgraphics</groupId>\n                    <artifactId>xmlgraphics-commons</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>com.graphhopper</groupId>\n            <artifactId>directions-api-java-client</artifactId>\n            <version>0.7.0.1</version>\n        </dependency>   \n  </dependencies>\n  <profiles>\n    <profile>\n     <id>openshift</id>\n     <build>\n        <finalName>routeplanner2</finalName>\n        <plugins>\n          <plugin>\n            <artifactId>maven-war-plugin</artifactId>\n            <version>2.1.1</version>\n            <configuration>\n              <outputDirectory>deployments</outputDirectory>\n              <warName>ROOT</warName>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n</project>`\n",
        "okhttp:3.1.2 and retrofit 2.0.2 but still getting the issue \njava.lang.IllegalStateException: Unable to extract the trust manager on okhttp3.internal.Platform\n",
        "I experienced this error while using a custom `SocketFactory`. I realized I didn't add all the necessary ProGuard rules. I added the following to fix the issue:\r\n\r\n```java\r\n-keepclassmembers class * implements javax.net.ssl.SSLSocketFactory {\r\n    private final javax.net.ssl.SSLSocketFactory delegate;\r\n}\r\n```\r\nIn my SocketFactory class, I had the following field:\r\n```java\r\nprivate final SSLSocketFactory delegate;\r\n```\r\nSo adjust the ProGuard rule accordingly. E.g, the access modifiers like `private`, `final`, etc. as well as the field name (`delegate`) should match **exactly** as written in the class file.\r\n",
        "@swankjesse iam not getting why wont it work without the delegate hack",
        "@JeffreyCA ooooooof you saved my life :))",
        "`private SSLSocketFactory delegate;` works :+1: "
    ],
    "586": [],
    "1475": [],
    "2115": [],
    "2518": [],
    "4438": [],
    "2344": [],
    "2346": [
        "Thanks. Updated for the next version.\n",
        "Thanks\nI would just like to know who is available https://github.com/rvesse/airline (used by Apache Jena)\nbut need much work for use this fork\nRegards\n"
    ],
    "2173": [],
    "1297": [],
    "502": [],
    "2689": [],
    "1689": [],
    "3873": [],
    "807": [],
    "4718": [],
    "1106": [],
    "4474": [],
    "1234": [],
    "619": [],
    "4524": [],
    "1257": [],
    "2394": [
        "This is also something that is a significant change in OkHttp v3 over v2. It would be good to include this in `CHANGES.md`\n",
        "This has been our behavior forever.\n",
        "I have investigated this further, and there is a change in behaviour between v2 and v3 here, which is in the way SocketConnectionTimeout is handled. In v2 the request was always dropped, in v3 the connection is retried unless `retryOnConnectionFailure` is set.\n\nCompare https://github.com/square/okhttp/blob/parent-3.0.0-RC1/okhttp/src/main/java/okhttp3/internal/http/StreamAllocation.java line 336 to https://github.com/square/okhttp/blob/parent-2.7.5/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java line 358\n\nThis means that if the client sent a POST request, then the server received it but the response got lost due to network issues, the client will resend it again. While in v2 it would fail.\n",
        "This is the change - https://github.com/square/okhttp/commit/3b44fa37675c1d68298283ae4b8b45cd5771888d and https://github.com/square/okhttp/issues/1736\n",
        "@ktchernov could you write a test case? There are great examples in CallTest, https://github.com/square/okhttp/blob/master/okhttp-tests/src/test/java/okhttp3/CallTest.java\n",
        "Along with https://github.com/square/okhttp/issues/2443, that's exactly what caused my development backend to explode: my multipart upload tooks a few hundred of milliseconds more than my read timeout, causing Retrofit to silently retry over and over because of the SocketTimeoutException (which is still [a bug](https://github.com/square/okhttp/issues/2443) BTW) - thus filling my storage with junks since the request did succeed.... \n",
        "Retrofit doesn't retry.\n\nOn Sat, Mar 26, 2016, 3:40 PM Cerrato Renaud notifications@github.com\nwrote:\n\n> Along with #2443 https://github.com/square/okhttp/issues/2443, that's\n> exactly what caused my development backend to explode: the multipart upload\n> tooks slightly more time than my read timeout, causing Retrofit to silently\n> retry over and over...\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/2394#issuecomment-201918305\n",
        "> Retrofit doesn't retry.\n\nI meaned the underlying OkHttp3, used by Retrofit 2.\n",
        "I have created two unit tests, a passing test on OkHttp 2.7 - demonstrating that the behaviour there was as expected: https://gist.github.com/ktchernov/2a1b6ad8a0b0f12634a55b9e2551395e  - when a timeout occurs on a POST request body, OkHttp 2 does not try to re-submit the POST.\n\nSecond is the same test adapted to OkHttp 3.2 https://gist.github.com/ktchernov/5785e6d6664a9f306c01632b95492fdd - this test fails. OkHttp 3.2 does re-submit the POST body - which could result in unexpected duplicate submissions.\n",
        "Thanks for the test. I\u2019ll take a look!\n",
        "Sorry there was a mistake in those tests, which I've corrected now.\n",
        "And this is the bug that we fixed when we changed this behavior.\nhttps://github.com/square/okhttp/issues/1736\n",
        "I think the nuanced fix we want is to recover from timeouts that occur during connect, but not during read.\n"
    ],
    "4345": [],
    "3277": [],
    "732": [],
    "1137": [],
    "1259": [],
    "1355": [],
    "2407": [
        "@swankjesse great. Every 'chain building' implementation does things in a slightly different way. \nIf manually rebuilding the chain after the system did it once, you're bound to end up with different chains in corner cases. \n"
    ],
    "2409": [
        "I was researching this one, but haven't found anything yet. @hamberluo do you know if you're using Http1 or Http2 when this exception happened?\n",
        "I've not been able to reproduce this one. I believe the cause would be related to a response not being closed prior to making a follow up request. The only thing I came up with is to create a 'misbehaving' network interceptor that wrapped the response, but didn't close it properly.\n",
        "Thanks for investigating this Dave. I also tried to isolate this, but my investigation wasn\u2019t very deep! I ended up with this, which discovered that cache bug I fixed last week.\nhttps://gist.github.com/swankjesse/ae7315037362e284edc7\n",
        "(I\u2019d like to eventually tidy that up and check it in. If you want to take it over, please do!)\n",
        "Oh interesting, I'll have a look.\n",
        "@dave-r12 i'm using Http1\n",
        "Cool thanks. As a follow up, are you doing anything fancy like wrapping the Response with a network interceptor?\n",
        "@dave-r12 yes, but i'm not sure it's the real cause. i remove those codes in next app version to verify my thoughts.\n",
        "Hi guys, \n\nWe have this issue in our application. I've added some logs to find out the root cause and found a way to reproduce the problem. It seems the issue comes from multiple redirect on same host. In that case the StreamAllocation doesn't release the stream and will throw IllegalStateException on the next redirect call.\n",
        "@tguerin good find. I'll take a look. I assume you're using the latest release?\n",
        "@swankjesse yes, 3.2.0\n",
        "I figured out a way to reproduce this. We want to release the stream by doing this:\n\n```\n      closeQuietly(userResponse.body());\n```\n\nBut if a network interceptor is involved, it\u2019s possible that closing that doesn\u2019t accomplish what we want. For example, consider this:\n\n```\n    OkHttpClient client = new OkHttpClient.Builder().addNetworkInterceptor(new Interceptor() {\n      @Override public Response intercept(Chain chain) throws IOException {\n        Response response = chain.proceed(chain.request());\n        return response.newBuilder()\n            .body(ResponseBody.create(null, \"HELLO\"))\n            .build();\n      }\n    }).build();\n```\n\n@tguerin, @hamberluo are you using any network interceptors?\n",
        "@swankjesse i use the stetho in debug build instead of release, yet it also crash in release.\n",
        "@swankjesse The only network interceptor we have is used to workaround this issue\n",
        "@swankjesse i also use okhttp ws lib.\n",
        "@tguerin are you using web sockets?\n"
    ],
    "3971": [],
    "3351": [],
    "2414": [
        "Yep, that\u2019s a bug. Good find.\n"
    ],
    "1124": [],
    "918": [],
    "4121": [],
    "2426": [
        "@swankjesse : Thanks for the unit test, very usefull for provide a PR  :smiley:\n\nAbout the problem, this relates the $14.10 of [RFC HTTP 2616](https://www.ietf.org/rfc/rfc2616.txt) : \n\n```\n   in either the request or the response header fields indicates that\n   the connection SHOULD NOT be considered `persistent' (section 8.1)\n   after the current request/response is complete.\n```\n",
        "Closed with #2467.\n"
    ],
    "2427": [
        "Note to self, the code causing this issue was implemented [here](https://github.com/square/okhttp/commit/a7d3396047a75183398f339310774ee415c1c4e8) in order to (based on comments in that commit) resolve #1669, though the commit admits that this solution is not ideal and should evolve into something better.\n\n#1669 also mentions a [related issue on StackOverflow](http://stackoverflow.com/questions/31920719/getting-the-trusted-x509certificate-for-a-java-sslsocket).  It seems that the accepted answer to this question is, more or less, my proposed solution above...\n",
        "I also debugged through and inspected `com.ibm.jsse2.SSLSocketFactoryImpl`.  It's obfuscated to the point where dirty reflection will never work....hence the current implementation is completely crippled on IBM JREs.\n",
        "This assumes that the trust manager is the same one as in the system-wide default SSLSocketFactory. Unfortunately for us, we allow you to provide a custom SSLSocketFactory, which could have hidden inside a different trust manager. When the two trust managers disagree, we have a security problem.\n\nI think the fix we\u2019re going to ultimately need is closer to this change from @artem-zinnatullin:\nhttps://github.com/square/okhttp/pull/2405\n\nI\u2019m not sure that\u2019s the exact API we want, but the spirit of it is right. Avoid magic if we can avoid it.\n",
        "> Unfortunately for us, we allow you to provide a custom SSLSocketFactory\n\nbut if a consumer doesn't provide a custom SSLSocketFactory and they do just lean on the system default, then wouldn't it make sense for OkHttp to leverage that, and the associated TrustManager(s)?\n",
        "@sparty02 yep, definitely.\n",
        "I face a similar problem. Can you pls guide me on how to solve this?"
    ],
    "124": [],
    "2102": [],
    "2435": [
        "Nothing at the moment. We should offer something here.\n",
        "Please add it as a feature request.\n\nStefan Matei\n",
        "Considering the APIs for this. We already have this:\n\n```\ninterface Authenticator {\n  Request authenticate(Route route, Response response);\n```\n\nI\u2019m tempted by this:\n\n```\nclass AbstractAuthenticator implements Authenticator {\n  Request authenticate(Request request);\n  Request authenticate(Route route, Response response);\n```\n\nCertainly the name is terrible. But I like having both proactive and reactive authentication in one interface. And we can use it for both proxies and direct requests.\n",
        "Is it possible to do pre-emptive proxy authentication via interceptors currently?",
        "@bsia Yes, and it's advisable IMHO if your auth is predictable.  e.g. why do oauth2 authentication on a secondary request?  Or sprinkle around your client code.",
        "So using OkHttp how do we connect through a proxy on the wifi network? All suggestions I have tried so far have failed. I am using retrofit and okhttp3. ",
        "Bumping this.\r\n\r\nWe're running up against the same issue where we have a proxy that _always_ requires authentication. The first, unauthenticated request is therefore wasted, as it will always fail. We monitor failed auth attempts, so this is creating a lot of noise.\r\n\r\nIf I'm reading some of the previous comments correctly, it sounds like there is a workaround here in that an Interceptor can be used to set the header on the initial CONNECT request. We can probably use that for now, but having first-class support for \"pre-emptive authentication\" would be cool.\r\n\r\ncc: @stfinney",
        "@nicktrav \r\nI have implemented a PreemptiveAuthenticator on my fork - https://github.com/smatei/okhttp \r\n\r\nThe solution was not accepted on the master branch, but it works for me in production perfectly.\r\n\r\n",
        "@smatei - great! Any specific reason it wasn't accepted? Were there additional things that needed to be addressed before that could be merged in, perhaps?",
        "@nicktrav \r\nThere were some concerns because my implementation was adding an isPreemptive method to Authenticator. \r\n\r\nhttps://github.com/square/okhttp/pull/2458#issuecomment-230819801\r\n\r\nThen I switched to the PreemptiveAuthenticator but did not insist with the merge request. I have dropped it and used it in production.",
        "Fix will be released in OkHttp 3.12."
    ],
    "892": [],
    "1287": [],
    "22": [],
    "3541": [],
    "4561": [],
    "2455": [
        "i also met this problem.\n\n```\nFatal Exception: java.util.concurrent.RejectedExecutionException: Task okhttp3.internal.ws.RealWebSocket$1$2@21f58605 rejected from java.util.concurrent.ThreadPoolExecutor@313dc65a[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]\n       at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2011)\n       at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:793)\n       at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1339)\n       at okhttp3.internal.ws.RealWebSocket$1.onClose(RealWebSocket.java:82)\n       at okhttp3.internal.ws.WebSocketReader.readControlFrame(WebSocketReader.java:205)\n       at okhttp3.internal.ws.WebSocketReader.processNextFrame(WebSocketReader.java:106)\n       at okhttp3.internal.ws.RealWebSocket.readMessage(RealWebSocket.java:97)\n       at okhttp3.ws.WebSocketCall.createWebSocket(WebSocketCall.java:151)\n       at okhttp3.ws.WebSocketCall.access$000(WebSocketCall.java:41)\n       at okhttp3.ws.WebSocketCall$1.onResponse(WebSocketCall.java:97)\n       at okhttp3.RealCall$AsyncCall.execute(RealCall.java:133)\n       at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n       at java.lang.Thread.run(Thread.java:818)\n```\n",
        "3.3.1 still has this bug.\n",
        "Is there a chance to fix this in 3.4?\n",
        "Can you write a test case to reproduce the problem? We've got a bunch of WebSocket tests to get you started.\n",
        "I can't reproduce this. I just seeing it in Crashlytics. All Android versions, different devices.\nI'm using https://github.com/socketio/socket.io-client-java (0.7.0) as websocket client and https://github.com/socketio/socket.io (1.4.5) on the server side.\n",
        "This is how it looks in Fabric (Crashlytics) at last 30 days.\n\n<img width=\"1032\" alt=\"crash_view\" src=\"https://cloud.githubusercontent.com/assets/1515300/16555457/046fad1c-41d5-11e6-964f-db24aa34f72a.png\">\n\n[issue_911_crash_577a0373013a00012f05cbdb0dca4161.txt](https://github.com/square/okhttp/files/345926/issue_911_crash_577a0373013a00012f05cbdb0dca4161.txt)\n",
        "Have same crash report for our app in Crashlytics\nWe use OkHttp 3.3.1 with io.socket:socket.io-client:0.7.0\nHere is the log:\n\n```\n\n#0. Crashed: OkHttp Dispatcher: 0 0 0x0000000000000000\n       at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2011)\n       at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:793)\n       at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1339)\n       at okhttp3.internal.ws.RealWebSocket$1.onClose(RealWebSocket.java:82)\n       at okhttp3.internal.ws.WebSocketReader.readControlFrame(WebSocketReader.java:205)\n       at okhttp3.internal.ws.WebSocketReader.processNextFrame(WebSocketReader.java:106)\n       at okhttp3.internal.ws.RealWebSocket.readMessage(RealWebSocket.java:97)\n       at okhttp3.ws.WebSocketCall.createWebSocket(WebSocketCall.java:152)\n       at okhttp3.ws.WebSocketCall.access$000(WebSocketCall.java:41)\n       at okhttp3.ws.WebSocketCall$1.onResponse(WebSocketCall.java:97)\n       at okhttp3.RealCall$AsyncCall.execute(RealCall.java:133)\n       at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n       at java.lang.Thread.run(Thread.java:811)\n\n--\n\nFatal Exception: java.util.concurrent.RejectedExecutionException: Task okhttp3.internal.ws.RealWebSocket$1$2@2d270c9d rejected from java.util.concurrent.ThreadPoolExecutor@3de66512[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]\n       at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2011)\n       at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:793)\n       at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1339)\n       at okhttp3.internal.ws.RealWebSocket$1.onClose(RealWebSocket.java:82)\n       at okhttp3.internal.ws.WebSocketReader.readControlFrame(WebSocketReader.java:205)\n       at okhttp3.internal.ws.WebSocketReader.processNextFrame(WebSocketReader.java:106)\n       at okhttp3.internal.ws.RealWebSocket.readMessage(RealWebSocket.java:97)\n       at okhttp3.ws.WebSocketCall.createWebSocket(WebSocketCall.java:152)\n       at okhttp3.ws.WebSocketCall.access$000(WebSocketCall.java:41)\n       at okhttp3.ws.WebSocketCall$1.onResponse(WebSocketCall.java:97)\n       at okhttp3.RealCall$AsyncCall.execute(RealCall.java:133)\n       at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n       at java.lang.Thread.run(Thread.java:811)\n\n#0. Crashed: OkHttp Dispatcher: 0 0 0x0000000000000000\n       at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2011)\n       at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:793)\n       at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1339)\n       at okhttp3.internal.ws.RealWebSocket$1.onClose(RealWebSocket.java:82)\n       at okhttp3.internal.ws.WebSocketReader.readControlFrame(WebSocketReader.java:205)\n       at okhttp3.internal.ws.WebSocketReader.processNextFrame(WebSocketReader.java:106)\n       at okhttp3.internal.ws.RealWebSocket.readMessage(RealWebSocket.java:97)\n       at okhttp3.ws.WebSocketCall.createWebSocket(WebSocketCall.java:152)\n       at okhttp3.ws.WebSocketCall.access$000(WebSocketCall.java:41)\n       at okhttp3.ws.WebSocketCall$1.onResponse(WebSocketCall.java:97)\n       at okhttp3.RealCall$AsyncCall.execute(RealCall.java:133)\n       at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n       at java.lang.Thread.run(Thread.java:811)\n\n```\n",
        "I think I've found a way to trigger this, and part of it is that engine.io library is closing the socket then trying to write to it!\n\n``` java\n        if (wsCall != null) {\n            wsCall.cancel();\n        }\n        if (ws != null) {\n            try {\n                ws.close(1000, \"\");\n            } catch (IOException e) {\n                // websocket already closed\n            } catch (IllegalStateException e) {\n                // websocket already closed\n            }\n        }\n```\n\nI'm gonna see if I can add a fix for this unusual scenario.\n",
        "Calling cancel() and then close() should work. Cancel is intended to be async, so in this case the close should just fail with an IOException.\n\nMy guess is that the executor is either configured wrong (not a long enough queue) or its being shutdown.\n",
        "Yes, ws.close fails with IOException, causing it to shutdown the executor. Shouldn't their code first call ws.close, then cancel? \n",
        "Ahhhh... shutting down the executor seems like a mistake.\n",
        "A little bit confused here. I also got this error after updating to socket.io 0.7.0\n\nSo the issue is really with socket.io ( / engine.io) closing the socket then trying to write to it ? This one -https://github.com/socketio/socket.io-client-java/issues/287 ? \n",
        "Yeah, the problem lies in the **engine.io** library when shutting down the executor when **switching the transport from Polling to Websocket**. Quick fix if you can allow yourself not to use the Polling transport but only Websocket when setting up the socket.io library. \n\nSo, by default it will do a handshake via Polling and switch to Websocket if the server responds with an upgrade to websocket command in the handshake response. Here's the code from **Socket constructor**:\n\n``` java\nthis.transports = new ArrayList<String>(Arrays.asList(opts.transports != null ?\n                opts.transports : new String[]{Polling.NAME, WebSocket.NAME}));\n```\n\nSo you can just completely **avoid using the Polling transport** by passing the options to the constructor with transport explicitly set to:\n\n``` java\noptions.transports = new String[] { WebSocket.NAME };\n```\n",
        "After mucking with the socket.io client and server a bit more, I see there is a race condition in the tear down code. If you call disconnect(true) from the server, it will send a data frame, then a close frame. When the client processes the data frame, they appear to encode that the connection should be closed, and spawn an async task that turns around and calls WebSocket#close(). If that async task happens to execute just prior to processing the close frame, then this exception is thrown (because they close the socket, then try to write to it which shuts down the executor.)\n\nI opened this pull request https://github.com/socketio/engine.io-client-java/pull/61.\n\nCurrently I do not see a workaround to this scenario other than changing the code.\n",
        "@dusanvita \n\n> Quick fix if you can allow yourself not to use the Polling transport but only Websocket when setting up the socket.io library.\n\nThx, but how can I determine, that I can use only websockets? ;)\n",
        "@swankjesse : What shall we do, change the  io.socket:socket.io-client:0.7.0 library as suggested by @dave-r12 or use square#2455 . \n",
        "I use okhttp 3.4.2 , and all project and module use okhttp 3.4.2\r\n```\r\njava.util.concurrent.RejectedExecutionException: Task okhttp3.internal.ws.RealWebSocket$1$2@2ddff9b rejected from java.util.concurrent.ThreadPoolExecutor@9493f38[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]\r\n\tat java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2014)\r\n\tat java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:794)\r\n\tat java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1340)\r\n\tat okhttp3.internal.ws.RealWebSocket$1.onClose(RealWebSocket.java:82)\r\n\tat okhttp3.internal.ws.WebSocketReader.readControlFrame(WebSocketReader.java:205)\r\n\tat okhttp3.internal.ws.WebSocketReader.processNextFrame(WebSocketReader.java:106)\r\n\tat okhttp3.internal.ws.RealWebSocket.readMessage(RealWebSocket.java:97)\r\n\tat okhttp3.ws.WebSocketCall.createWebSocket(WebSocketCall.java:152)\r\n\tat okhttp3.ws.WebSocketCall.access$000(WebSocketCall.java:41)\r\n\tat okhttp3.ws.WebSocketCall$1.onResponse(WebSocketCall.java:97)\r\n\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:126)\r\n\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)\r\n\tat java.lang.Thread.run(Thread.java:833)\r\n```\r\n@JakeWharton ",
        "The problem log:\r\n\r\n```\r\njava.util.concurrent.RejectedExecutionException: Task okhttp3.internal.ws.RealWebSocket$1$2@2ddff9b rejected from java.util.concurrent.ThreadPoolExecutor@9493f38[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]\r\n\tat java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2014)\r\n\tat java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:794)\r\n\tat java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1340)\r\n\tat okhttp3.internal.ws.RealWebSocket$1.onClose(RealWebSocket.java:82)\r\n\tat okhttp3.internal.ws.WebSocketReader.readControlFrame(WebSocketReader.java:205)\r\n\tat okhttp3.internal.ws.WebSocketReader.processNextFrame(WebSocketReader.java:106)\r\n\tat okhttp3.internal.ws.RealWebSocket.readMessage(RealWebSocket.java:97)\r\n\tat okhttp3.ws.WebSocketCall.createWebSocket(WebSocketCall.java:152)\r\n\tat okhttp3.ws.WebSocketCall.access$000(WebSocketCall.java:41)\r\n\tat okhttp3.ws.WebSocketCall$1.onResponse(WebSocketCall.java:97)\r\n\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:126)\r\n\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)\r\n\tat java.lang.Thread.run(Thread.java:833)\r\n```\r\n\r\n\r\nWhen you call shutdown(), it can cause this problem. Just like this:\r\n\r\n`mOkHttpClient.dispatcher().executorService().shutdown();\r\n`\r\n"
    ],
    "2089": [],
    "954": [],
    "2421": [],
    "2104": [],
    "2464": [
        "Our expectation is that your Authenticator will check `Response.priorResponse()`, but we could do a lot to make this more obvious.\n",
        "Hi @swankjesse,\n\nDo you mean like this?\n\n`\n\n```\n    case HTTP_PROXY_AUTH:\n    Proxy selectedProxy = route != null\n        ? route.proxy()\n        : client.proxy();\n    if (selectedProxy.type() != Proxy.Type.HTTP) {\n      throw new ProtocolException(\"Received HTTP_PROXY_AUTH (407) code while not using proxy\");\n    }       \n\n    if (userResponse.priorResponse() == null)\n    {\n        return client.proxyAuthenticator().authenticate(route, userResponse);\n    }\n    else if (userResponse.priorResponse().code() == 407)\n    {           \n        return null;\n    }\n```\n\n`\n\nThis breaks the retry loop and returns 407 at the second retry.\n",
        "Hi @swankjesse,\n\nI have found a simple solution. Change signature of followUpRequest  so that it contains the request also. If HTTP_PROXY_AUTH and the request already contained 'Proxy-Authorization' header, the authentication is useless and we can return.\n\n`\n\n```\nprivate Request followUpRequest(Request request, Response userResponse)\n.....\nswitch (responseCode) {\n  case HTTP_PROXY_AUTH:\n    Proxy selectedProxy = route != null\n        ? route.proxy()\n        : client.proxy();\n    if (selectedProxy.type() != Proxy.Type.HTTP) {\n      throw new ProtocolException(\"Received HTTP_PROXY_AUTH (407) code while not using proxy\");\n    }\n\n    String proxyAuth = request.header(\"Proxy-Authorization\");\n\n    if (proxyAuth != null && proxyAuth.length() > 0)\n    {\n        return null;\n    }\n    else\n    {\n        return client.proxyAuthenticator().authenticate(route, userResponse);\n    }`\n```\n\nI like this better and it works with both my attempt of \"preemptive authentication\" (https://github.com/square/okhttp/pull/2458) and normal authentication (authenticate after 407). \n\nWhat do you say about this? Will you accept this solution for this bug? I don't see any problems.\n"
    ],
    "2469": [
        "I can actually replicate it with api.twitter.com also.  Again it seems to be based on the ordering of events.\n\n```\n[api.twitter.com/199.59.150.9, api.twitter.com/199.59.149.232, api.twitter.com/199.59.150.41, api.twitter.com/199.59.149.199]\n<< 0x00000000     6 SETTINGS      \n>> 0x00000000     0 SETTINGS      ACK\n>> CONNECTION 505249202a20485454502f322e300d0a0d0a534d0d0a0d0a\n>> 0x00000000     6 SETTINGS      \n>> 0x00000000     4 WINDOW_UPDATE \n<< 0x00000000     8 GOAWAY        \nPROTOCOL_ERROR\n>> CONNECTION 505249202a20485454502f322e300d0a0d0a534d0d0a0d0a\n<< 0x00000000     6 SETTINGS      \n>> 0x00000000     0 SETTINGS      ACK\n>> 0x00000000     6 SETTINGS      \n>> 0x00000000     4 WINDOW_UPDATE \n>> 0x00000003   381 HEADERS       END_STREAM|END_HEADERS\n<< 0x00000000     0 SETTINGS      ACK\n<< 0x00000003   204 HEADERS       END_HEADERS\n<< 0x00000003   126 DATA          END_STREAM\n```\n",
        "Not sure of the root cause, but I believe its actually an error from the server that gets translated into a retry because of IPv6 and IPv4 addresses that are available.\n\njava.io.IOException: stream was reset: REFUSED_STREAM\n    at okhttp3.internal.framed.FramedStream.getResponseHeaders(FramedStream.java:145)\n    at okhttp3.internal.http.Http2xStream.readResponseHeaders(Http2xStream.java:149)\n    at okhttp3.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:723)\n    at okhttp3.internal.http.HttpEngine.access$200(HttpEngine.java:81)\n    at okhttp3.internal.http.HttpEngine$NetworkInterceptorChain.proceed(HttpEngine.java:708)\n\nTwo questions I have\n\n1) Is this a client bug or a server bug? I'll dig into that a bit.\n2) Should clients be made aware of this or other errors? In the case of DNS misconfiguration its likely to affect initial connection latency.\n",
        "I can reproduce this by setting a breakpoint in FramedConnection, line 508. It looks like the server is sending the SETTINGS frame before we have time to send the connection preface. We ACK the settings before sending our connection preface. From the spec\n\n> The SETTINGS frames received from a peer as part of the connection preface MUST be acknowledged (see Section 6.5.3) after sending the connection preface.\n\n@swankjesse does that sound right?\n",
        "@dave-r12 yeah, that sounds exactly right. We should defer starting the reader thread until after we\u2019ve written the connection preface. Want to take that?\n",
        "It might be as simple as moving this line to the bottom of `sendConnectionPreface()`, renaming that method to suit its new functionality, and fixing any tests that this upsets.\n\n```\n    new Thread(readerRunnable).start(); // Not a daemon thread.\n```\n",
        "I haven't spent much time in that area of the code base yet, it will probably take me a bit to get my footing. I can get started on building my mental model, feel free to make the change.\n",
        "On it.\n",
        "You can be my reviewer!\n",
        "FYI - I can't reproduce the issue with your branch\n"
    ],
    "2474": [
        "Wouldn't the following in `RealConnection` already ensure that connection preface is being enforced on HTTP/2 connections?\n\n```\nif (protocol == Protocol.HTTP_2) {\n      socket.setSoTimeout(0); // Framed connection timeouts are set per-stream.\n\n      Http2Connection http2Connection = new Http2Connection.Builder(true)\n          .socket(socket, route.address().url().host(), source, sink)\n          .listener(this)\n          .build();\n      http2Connection.start();\n```\n\nOr do you have the idea to enforce it on the `Http2Writer` level?\n",
        "There's a few places where we need to fail the connection if the peer doesn't send it. In MockWebServer for one example.\n"
    ],
    "4663": [],
    "4069": [],
    "1353": [],
    "1785": [],
    "2080": [],
    "636": [],
    "2505": [],
    "3149": [],
    "2493": [],
    "2513": [],
    "2275": [],
    "3579": [],
    "2521": [
        "So the fix for this is fairly easy it turns out, but it begs the question as to whether we actually want the queue dispatcher to accept new connections without an existing response. It would be much easier to eagerly fail on an empty queue.\n\n@swankjesse ?\n",
        "I\u2019m curious to see what the thread dumps are. I think our current behavior is to terminate all service threads on shutdown, which means we don\u2019t need special behavior for QueueDispatcher vs. other ones.\n",
        "Oh hang on, we terminate those service threads by breaking their sockets. If the queue dispatcher is empty, then the service thread might be blocked waiting on that. Hmm.\n",
        "I suppose we could also put a dead letter into the queue on shutdown.\n",
        "It is blocked on the dispatcher being empty, yes. You'd have to put as many\nresponses in as are threads waiting.\n\nCalling shutdownNow in shutdown works with the current model, assuming you\nmake InterruptedException propagate correctly.\n\nOn Fri, May 6, 2016, 1:33 AM Jesse Wilson notifications@github.com wrote:\n\n> I suppose we could also put a dead letter into the queue on shutdown.\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/2521#issuecomment-217351648\n",
        "We don\u2019t know how many threads are waiting. But we could put just one dead letter in the queue, then when the recipient of a dead letter receives it that recipient could re-enqueue the dead letter. They\u2019d return in serial, but that\u2019s okay \u2019cause typically there\u2019s only one.\n",
        "What about custom Dispatcher implementations? Isn't thread interrupting a\nmore appropriate mechanism for them?\n\nOn Fri, May 6, 2016 at 11:30 PM Jesse Wilson notifications@github.com\nwrote:\n\n> We don\u2019t know how many threads are waiting. But we could put just one dead\n> letter in the queue, then when the recipient of a dead letter receives it\n> that recipient could re-enqueue the dead letter. They\u2019d return in serial,\n> but that\u2019s okay \u2019cause typically there\u2019s only one.\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/square/okhttp/issues/2521#issuecomment-217603248\n",
        "I don\u2019t like thread interrupting, and it isn\u2019t even likely to work reasonably for other dispatchers. It\u2019s a historical accident that QueueDispatcher can block. I don\u2019t expect other dispatchers to have similar behavior.\n",
        "Thanks!\n",
        "So what's the workaround ? It's doesn't work event with QueueDispatcher ."
    ],
    "2522": [
        "This seems like an application bug, not an OkHttp bug.\n\nHTTP requires ISO-8859-1 for header values but it's effectively just ASCII. If you are creating a user agent using `String.format` then you should pass a `Locale` as the first argument which will ensure it renders to ASCII (such as `Locale.US`).\n",
        "I think the problem is that OkHttp assumes that `%d` will return a ASCII digit and it doesn\u2019t. I didn\u2019t know that was possible, and it suggests we probably want `%s` wherever we\u2019re currently using `%d`. Ugh!\n",
        "Oh this report is about the exception message itself. Got it.\n",
        "We want to replace calls like this:\n\n```\nthrow new IllegalArgumentException(String.format(\n      \"Unexpected char %#04x at %d in header name: %s\", (int) c, i, name));\n```\n\nwith calls like this:\n\n```\nthrow new IllegalArgumentException(String.format(Locale.US,\n      \"Unexpected char %#04x at %d in header name: %s\", (int) c, i, name));\n```\n",
        "Yeah, it was a surprise to me too. But the usage of localized decimal digits is buried in [`java.util.Formatter`](https://developer.android.com/reference/java/util/Formatter.html):\n\n> Number localization. Some conversions use localized decimal digits rather than the usual ASCII digits. So formatting 123 with %d will give 123 in English locales but \u0661\u0662\u0663 in appropriate Arabic locales, for example. This number localization occurs for the decimal integer conversion %d, the floating point conversions %e, %f, and %g, and all date/time %t or %T conversions, but no other conversions.\n"
    ],
    "4330": [],
    "2525": [
        "Aside from the nicer API, is this different from calling `setProxy()` on the OkHttpClient?\n",
        "Probably just a nicer API. I feel like my work around is a little hacky. But it would be nice to have vetted code in the library as I found a bunch of questions online of how to solve this problem, but no solutions.\n\n``` java\n    //Ask Android what proxies we have setup\n    List<Proxy> proxies = ProxySelector.getDefault().select(URI.create(\"http://www.somesite.com\"));\n\n    if (proxies.size() > 0 && proxies.get(0) != Proxy.NO_PROXY) {\n        //Force OkHttp to always use the first proxy if found\n        baseClientBuilder.proxy(proxies.get(0));\n    }\n```\n",
        "I think your workaround is pretty reasonable, and this requirement is pretty specific. I\u2019m going to icebox this and see if other people run into the same problem.\n",
        "I'm also running into the same issue while trying to test timeout handling in my app.  I'm using Charles Proxy to throttle network requests, but after the first request times out subsequent requests are no longer throttled, making testing very painful. :)\n\nThe proposed `allowProxyBypass()` method seems reasonable and could be set for debug builds.\n",
        "I'm also running into the same issue. I put some URLs to the Black List of charles to test out how the app behaves when certain resources can't be loaded. However OkHttp just retries the request with no proxy, which defeats the purpose.\n",
        "i  also running into the same issue ,when i want to Charles to proxy, but no proxy\n",
        "\ud83d\udc4d  on this issue\n",
        "+1 to this. \n\nI don't like the `List<Proxy> proxies = ProxySelector.getDefault().select(URI.create(\"http://www.somesite.com\"));` too much. I don't think Android allows proxy per-uri but there is certainly a reason why the select() takes a uri as parameter.\n\nHaving a `allowProxyBypass(boolean)` removes all ambiguity.\n",
        "If you\u2019d like to force no proxy do this:\n\n```\n    client = client.newBuilder()\n        .proxy(Proxy.NO_PROXY)\n        .build();\n```\n\nIf you want to force a specific proxy, do this:\n\n```\n    client = client.newBuilder()\n        .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"proxyhost\", 8888)))\n        .build();\n```\n",
        "I don't want any of those two options, I want to use the system wide proxy if defined.\n",
        "It\u2019ll do that by default! Unless that proxy is unreachable.\n",
        "So what will be the behaviour of allowProxyBypass(false) if that proxy is unreachable ? I would like okhttp to return an error and not try something else.\n",
        "@swankjesse: \n\n> \" .. Unless that proxy is unreachable.\" \n\nthat is unwanted and unexpected behaviour.\nWhy would I want to bypass a system wide proxy in an app?\nI expect the proxy settings to be respected by default. \n",
        "Yes, because this is unexpected behavior an API method would be helpful for others to locate and resolve this issue. \n",
        "\ud83d\udc4d on this issue\n",
        "I think I'll make a change to the default here. It\u2019s an invasive change but I'm convinced that the cost of migration is worth the end goal of a more predictable API. \n",
        "It is quite strange that a client does not respect the system settings as a user this completely blocks timeouts and other tests with custom proxies like charles.\nDo you have a feeling for an ETA of this change?\n",
        "Thank you Jesse!\n"
    ],
    "2218": [],
    "484": [],
    "284": [],
    "4589": [],
    "2535": [],
    "3741": [],
    "3821": [],
    "2543": [
        "I'm okhttp3.2 with Nginx1.10.0, can you tell me how to set noNewStreams = true in my code to make it work:\n\n``` java\npublic class CoamAuthInterceptor implements Interceptor {\n    @Override\n    public Response intercept(Chain chain) throws IOException {\n        Request originalRequest = chain.request();\n        Response originalResponse = chain.proceed(originalRequest);\n\n        if (!originalResponse.isSuccessful()) {\n        }\n\n        return originalResponse;\n    }\n}\n```\n\nThank you very much!\n",
        "After getting a response from the http-wg list, our recovery policy can be simpler: attempt one retry on the same connection, and then permanently fail the request.\n",
        "(And do that one retry on a different connection if the current connection is shutting down.)\n",
        "@swankjesse if you didn't already discover this, one other thing I noted when running experiments with nginx is that even if the timing works out, it's possible OkHttp will never send the request. I traced it to this line, https://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java#L278\n\nI think the headers will need to be flushed prior to writing the data frames.\n",
        "Is this an okhttp or an nginx problem? People are starting to become nervous because clients which use okhttp (like DAVdroid) don't work with their (up-to-date) nginx servers anymore\u2026 how do you recommend to handle this? Disable HTTP2 in okhttp?\n",
        "Disabling HTTP/2 in OkHttp will work. It's sad, but it'll work. Both OkHttp and Nginx are going to make code changes for this issue.\n",
        "@rfc2822 I love HTTP/2. I temporarily switched to dmfs.org.\n",
        "A quick update: nginx attached a proposed patch on their issue tracker. I tested patch against OkHttp and it worked perfectly.\n",
        "@dave-r12 Would you please give a link of the changeset? I cannot find it in trac.nginx.org. Thanks!\n",
        "@terro https://trac.nginx.org/nginx/ticket/959#comment:14\n",
        "> A quick update: nginx attached a proposed patch on their issue tracker. I tested patch against OkHttp and it worked perfectly.\n\nSo, should the problem go away with nginx 1.10.1 or will we still need to upgrade okhttp to get it working?\n",
        "@rfc2822 it seems nginx will provide a configuration option for the preread buffer. From the commit message:\n\n> If the directive's value is lower than the default initial window (65535),\n> as previously, all streams with data will be rejected until the new window\n> is acknowledged.  Otherwise, no special processing is used and all requests\n> with data are welcome right from the connection start.\n\nIf you change it to lower than default initial window, you'll need to upgrade to 3.3. If you leave it default, everything should just work (this is the behavior most clients expect.)\n\nI'm not familiar with their development process, so it's unclear when that change will get merged in.\n",
        "Also, OkHttp 3.3 will be compatible with nginx 1.9.15, if you must use that version.\n"
    ],
    "2549": [
        "Yup, this is a problem when converting to a format that works with CookieManager. (It isn't a problem with our cookie class itself.)\n",
        "@swankjesse HttpCookie#domainMatches in CookiePolicy#ACCEPT_ORIGINAL_SERVER has a slightly different set of matching rules compared to Cookie#domainMatch. Is there a reason for this?\n\nI'm trying to understand the rationale to stripping off the leading . from the domain.\n\nThanks!\n",
        "It's a bug! Can fix.\n"
    ],
    "3535": [],
    "3867": [],
    "4011": [],
    "4566": [],
    "158": [],
    "1648": [],
    "2189": [],
    "141": [],
    "1290": [],
    "1505": [],
    "2577": [],
    "428": [],
    "2579": [
        "You can copy/paste it into your project and modify to your needs. The provided interceptor isn't designed to solve everyone's use-case, more just the common ones.\n",
        "I\u2019m surprised that these files are considered to be binary. Could you paste a gist with a sample file?\n",
        "Unfortunately, Github doesn't allow to attach `.vcf` or `.ics` files. So I have zipped the files: [sample.zip](https://github.com/square/okhttp/files/287739/sample.zip)\n\nI guess they're considered binary because they contain control characters within the first 16 characters?\n\nIf I remember correctly, I have also seen WebDAV XML responses which were treated binary, probably for the same reason.\n\nWhat about making `isPlaintext()` non-static, so that users can overwrite it?\n",
        "Turns out it\u2019s just the newline characters. I\u2019ll get this fixed and cut a 3.3.1. Sigh.\n"
    ],
    "1256": [],
    "2241": [],
    "4033": [],
    "4252": [],
    "210": [],
    "2609": [
        "Why not pass lowercased hostname to the CertificatePinner?\n\nOn Tue, 7 Jun 2016, 12:54 jkauppin, notifications@github.com wrote:\n\n> If certificate pinner is set for host \"www.HOST.com\" if doesn't apply to\n> the calls that has endpoint \"www.host.com\".\n> \n> The CertificatePinner.findMatchingPins() should ignore the case because\n> http doesn't care if the name is in uppercase or not.\n> \n> Tested with OkHttp 2.7.5.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/square/okhttp/issues/2609, or mute the thread\n> https://github.com/notifications/unsubscribe/AA7B3IzOgks5lleB9tk7MCZNIQYknE4mks5qJT_WgaJpZM4Ivv_6\n> .\n",
        "Yes, that was the fix on the app. However that feels unsafe since a small typo in the host will disable the certificate pinning. From http point of view capital letters has no meaning.\n"
    ],
    "194": [],
    "549": [],
    "1244": [],
    "3613": [],
    "2371": [],
    "4462": [],
    "2552": [],
    "2628": [
        "Yep. Yuck. Can fix.\n"
    ],
    "889": [],
    "4624": [],
    "2109": [],
    "2636": [
        "Wanna send a pull request?\n",
        "Looking at your samples from https://github.com/square/okhttp/tree/master/samples it seems that you are creating the OkHttpClient at the same time with the Request sent to the client. \n\nDo you think the samples should be changed too? Based on my experience, it's just a really bad practice to create the OkHttpClient on-demand with the Request. Or do you think it's a bug that the file handlers are not released? Thus, creating the OkHttpClient on-demand should be ok? \n",
        "I would probably at least add a new section to your FAQ in the Wiki, if for nothing else, for Google to find it for other people if the stumble on the same error message. \n\nhttps://github.com/square/okhttp/wiki/FAQs\n\n> **Error: 'FORTIFY_SOURCE: FD_SET: file descriptor >= FD_SETSIZE. Calling abort().'**\n> \n> If you get this error when calling `execute()` on your `Call`, it means that OkHttp has not released the file handles associated with previous HTTP calls and you are running out of file handles [allowed for a single Android application](http://stackoverflow.com/questions/29117105/whats-the-max-number-of-file-descriptors-on-android).\n> \n> The reason for this is probably that you are creating a new `OkHttpClient` object for each of your HTTP requests, which in turn creates thread pools for each client which will leave connections/file handles around. \n> \n> To solve this issue, create a single static `OkHttpClient` that is shared between all your `Call` requests. \n\nEnglish is not my native language, so feel free to edit as seen fit, if you find this useful. \n",
        "The bug I encountered is due to the fact that I created a new `OkHttpClient` for each request and made several successive requests in a tight loop. This together with the fact that the default `OkHttpClient.Builder` creates a new `ConnectionPool` for each client and this `ConnectionPool` will keep all connections around for at least 5 minutes before discarding them as idle. This will make the file handles run out quite fast on Android.\n\nCreate a default `ConnectionPool` with a 5 minute cleanup period: https://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/OkHttpClient.java#L390\nhttps://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/ConnectionPool.java#L85\n\nThis will keep the connections around for at least 5 minutes:\nhttps://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/ConnectionPool.java#L208\n\nIf we don't want to force the user to create a custom `ConnectionPool` and make sure that file handles are being cleaned, I think this should be handled somehow. I am not (yet) familiar enough with the OkHttp source code to know if this is even feasible to fix, but I will look into a pull request. Input is warmly welcomed to hear if this is feasible to work around or fix inside the OkHttp client. \n",
        "I think we fix this with documentation. Which docs did you read before making that mistake?\n",
        "Well, neither the examples at http://square.github.io/okhttp/ nor the Wiki say anything about this corner case. Also the samples in GitHub do show that the client is created together with the request.\n\nIf there's documentation about ConnectionPool request cleanup and how not to use the OkHttpClient, I must have missed it. \n",
        "I would also like to point out that the [comment](https://github.com/square/okhttp/blob/master/CHANGELOG.md) about `OkHttpClient` in version 3 being stateless, drew a curveball on me when it comes to this issues, which is why I thought it's even a better approach to create the client with the requests.\n",
        ":+1: to these doc improvements! Just ran into this issue and was able to easily figure it out thanks to these changes.\n"
    ],
    "2640": [],
    "4736": [],
    "3833": [],
    "3878": [],
    "1659": [],
    "3242": [],
    "3802": [],
    "546": [],
    "2858": [],
    "2667": [],
    "4577": [],
    "238": [],
    "1217": [],
    "4514": [],
    "2677": [
        "It looks like your server is returning a header like this:\n\n```\nContent-Type: text/html; charset='utf-8'\n```\n\nUnfortunately according to RFC 822, use of single quotes isn\u2019t valid in a media type parameter. Instead the content type should be this:\n\n```\nContent-Type: text/html; charset=\"utf-8\"\n```\n\nPlease ask your server team to fix their broken response headers.\nhttps://tools.ietf.org/html/rfc822\n\nI\u2019m unsure what action OkHttp should take here. Probably our best bet is to see how web browsers like Chrome and Firefox handle invalid charsets and do likewise.\n",
        "thank you\n",
        "Chrome treats single quotes interchangeably with double quotes. Safari and Firefox ignore the malformed charset parameter and detect it from the content.\n"
    ],
    "2682": [
        "Since 2 only comes once, I wanted to chime in with  high level  requests that would help a data loading library we are currently working on. \n\nI'd like to be able to construct a `DataStore<Request,Response>`  The store would have the following interface:\n\n```\nResponse get(request)//return from memory if present else disk if present else network\nResponse fresh(request)//return from network\nnotify()//listen for all responses (not just 1 key)\n```\n\nI'm not sure if it makes sense to encapsulate the memory cache inside of OKHTTP since you would want to cache the inflated models for speed of retrieval. This can't be done without passing a parser into the client\n\nAlso, ideally the disk cache policy would be configurable the way a Guava Cache is rather than forcing cache control on server (or spoofed in an interceptor):\n\n```\ndiskLRUCache = CacheBuilder.newBuilder()\n                .maximumSize(getCacheSize())\n                .expireAfterAccess(getCacheTTL(), TimeUnit.MILLISECONDS)\n                .build();\n```\n\nComparing old to new data is something that would be helpful as well.  Say I have a data call that returns ID + timestamps of correction for all articles from today.  I want to be able to fetch that data from network and compare it to the last entry in the cache.  This could be solved by either allowing custom keys or having a way to recreate a cache key from request params.\n\nFinally cache hits when dealing with timestamps is difficult. I had a project where every request sent needed to include current time. Maybe it would make sense to have a a way to mark request params as ignored when it comes to generating a cache key.\n\nThanks for tracking more flexible cache.\n",
        "Here\u2019s a tentative plan on the structure of the new cache\u2019s index. This plan focuses on what happens on the file system; there\u2019s also a model of the index in memory.\n\nAs always, I\u2019m open to suggestions & ideas!\n\n#### Cache Sequence ID\n\nThe cache is built around a `long` counter that\u2019s incremented on every insert and on every access. This is what\u2019ll power LRU. It\u2019ll be called the sequence ID. It starts at 1.\n\n#### Index\n\nThe index is a single file like `index.ok`. Unlike OkHttp\u2019s current cache journal this file is edited in-place. There\u2019s no rebuilding.\n\nThe index is:\n64 byte header\nN \u00d7 32 byte entry slots\n\nThe header is:\n16 byte prefix like `OkHttp index v1\\n`.\n8 byte created at timestamp\n8 byte entry slot count; should equal (file length - header length) / entry length\n8 byte next ID to assign (initially 1)\n8 byte request count\n8 byte hit count\n8 byte unused (for 64 byte alignment)\n\nEach entry is:\n16 byte SHA-256 hash of URL (truncated from 256 bits to 128 bits)\n8 byte length (content + metadata), or the placeholder `0xffffffffffffffff` if unknown\n8 byte sequence ID\n\n#### Creates\n\nTo insert an entry named by its hash:\n- Take a sequence number\n- Find an empty entry slot, creating one at the end if necessary\n- Write the entry the slot\n- Flush the index to disk\n- Create a file named by the hash in hex `11112222333344445555666677778888.ok`\n- Later, once the entry is committed, update the entry\u2019s length\n\n#### Reads\n\nTo get an entry named by its hash, we:\n- Increment the request count\n- Look for a matching hash. If found and the file is readable:\n  - Increment the hit count.\n  - Assign the entry\u2019s sequence number to a new sequence number\n\n#### Updates\n\nTo update an entry already in the cache:\n- Assign the entry\u2019s sequence number to a new sequence number\n- Assign the entry\u2019s length to the placeholder length\n- Later, once the entry is committed, update the entry\u2019s length\n\n#### Deletes\n\nTo remove an entry from the cache:\n- Remove its file from the file system if it exists\n- Zero out its entry\n\n#### Trims\n\nWhile the cache size is too large, repeatedly remove the entry with the lowest sequence ID.\n\n#### Loading the Cache\n\nThe most difficult part of index loading is that the index may be incomplete. We don\u2019t force a flush after every change, and so it\u2019s possible that several changes are missing from the index. This is expected.\n\nAs a rule of thumb, the index\u2019s set of files is allowed to be a superset of the file system\u2019s files. We never want a file on the file system that isn\u2019t known by the index. But it\u2019s okay if the index knows about a file that hasn\u2019t been created yet, or a file that has already been deleted.\n\nIf the index header is malformed (no prefix or fails to satisfy other invariants) we are on a hostile filesystem. Refuse to cache anything.\n\nOtherwise iterate the entries. Any entry with an placeholder length is a partial entry. Remove that entry.\n",
        "@swankjesse Is there any intention to make an OkHttp Cache that is only in-memory or make the persisted data encrypted so as to better handle using the cache with secure data?",
        "@ScottPierce it's a feature I\u2019d like to do eventually. Maybe\u200b just a mechanism to let you transform the stream."
    ],
    "397": [],
    "2317": [],
    "4486": [],
    "356": [],
    "3889": [],
    "3566": [],
    "2698": [
        "@nfuller thoughts?\n",
        "Thanks for the fantastic investigation. For anyone following along, here\u2019s the original PR:\nhttps://github.com/square/okhttp/pull/1208\n\nIf you\u2019re looking for a quick workaround, you can build your own SslSocketFactory that uses your own business logic to determine which suites are enabled.\n",
        "I think we discussed putting the \"enabled\" vs \"supported\" behavior behind a setting but it was decided not to do it because it would complicate the API.\n\nI still think the \"use enabled\" behavior makes most sense on the Android platform and as the safe default for the library, but I do see that people that value connectivity over other considerations might want to alter it to \"use supported\".\n\nI'd be happy with any change providing we retained the ability to make it \"use enabled\" in the Android platform.\n",
        "@nfuller what if we flip OkHttp to use any supported cipher suite, and the Android platform just declares ConnectionSpec instances to match its needs? Would that work?\n",
        "@swankjesse If I'm interpreting what you're suggesting correctly: not really.\n\nWe don't want to be explicit about the ciphers to use because the whitelist we rely on _is_ the set of enabled ciphers. On the Android platform, the SSLSocketFactory can be replaced with a new one at runtime by apps or GMS core that may (for example) disable a cipher and introduce a new one. If we baked a list of ciphers into the HttpsHandler code that builds the ConnectionSpec (which is not replaceable and ships with the device) we would continue using the disabled cipher (we don't immediately drop _support_ for ciphers, just disable them by default if they're found to be insecure) and would not use the new cipher because it wouldn't be in the hardcoded whitelist (because we can't predict what ciphers may be added in future that won't be broken).\n\nThis is the reason why on Android so far we use \"null\" with OkHttp to mean \"just use the set the SSLSocket has enabled, it may know better than you do\".\n",
        "BTW, @emilburzo you can work around the problem by manually configuring the supported cipher suites on the target device. Lousy workaround, but it\u2019ll at least restore connectivity.\n",
        "@swankjesse for now I forked okhttp 2.7.5 and changed `sslSocket.getEnabledCipherSuites()` back to `sslSocket.getSupportedCipherSuites()`\n\nMy reasoning being that since I only use secure/modern ciphers server-side, the intersection between `client supported` and `server supported` should never result in an insecure one being used (do correct me if I'm wrong, please).\n\nAnd at least on this (really old) device, it means being able to use the only modern/secure cipher that is supported, but not enabled.\n",
        "We should probably at a minimum document this because customizing the SSLSocketFactory is tricky work.\n"
    ],
    "825": [],
    "4661": [],
    "4681": [],
    "790": [],
    "3725": [],
    "400": [],
    "3091": [],
    "3353": [],
    "3147": [],
    "225": [],
    "4326": [],
    "565": [],
    "1304": [],
    "1469": [],
    "3770": [],
    "4357": [],
    "136": [],
    "921": [],
    "4662": [],
    "2756": [
        "Can you provide a test case to demonstrate?\n",
        "I had the same issue today too. The loop ran endlessly for minutes until I killed the app. Maybe put an upper bound to the number of executions or at least slow down after 10 iterations? \n",
        "We gotta make sure shutdown connections get removed from the pool.\n",
        "@swankjesse were you planning to pick this one up? If not I can look into it.\n",
        "Please do!\n",
        "I have a similar issue using http2, I tried to debug the code and I have found this TODO in method `isHealthy` of `RealConnection` class:\n\n```\nif (framedConnection != null) {\n  return true; // TODO: check framedConnection.shutdown.\n}\n```\n\nThe problem seems to be related to this TODO.\n",
        "@fabioCollini yup, although that snippet is an older version. I'm working on a fix.\n",
        "Is there any update on this issue? We're running into the same issue in our project. After some investigation we've discovered that the following code might not work as it's expected to work [StreamAllocation.java#L135-L139](https://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java#L135-L139):\n\n``` java\nsynchronized (connectionPool) {\n  if (candidate.successCount == 0) {\n    return candidate;\n  }\n}\n```\n\n`candidate.successCount == 0` returns `true`, but `candidate.isHealthy(doExtensiveHealthChecks)` returns `false` for the same connection instance.\n\nI don't have a test case at the moment, but I'll try to find and provide it ASAP.\n",
        "Yea, sorry I fell behind on this. The test case is straightforward, send a GOAWAY frame without closing the connection. I'll try to wrap this up in the next day or so.\n",
        "We're blocked on releasing due to this issue, so I'm trying to help out where I can... I'm not sure if this will help at this point, but here's a demonstration of the problem: https://github.com/dlew/okhttp/commit/5092a7b1cb99740e83d90364c1b3a97e5a6c19e3\n",
        "bit by this too...hope it gets released soon :-)\n",
        "What version was this bug introduced in?  I.e., can we switch to an older version of okhttp to work around it?\n\nLooks like the answer is no.  I went back to 3.2.0 (couldn't go further w/o hitting conflicts w/ other libraries) and it's still there.  It's easy to reproduce in an app by using CharlesProxy and throttling w/ a 50% reliability network.\n",
        "I\u2019m hoping to cherrypick #2955 and release it as 3.4.2.\n\nhttps://github.com/square/okhttp/pull/2955\n",
        "Released as 3.4.2.\n",
        "Thanks for the quick release @swankjesse...that fixed a weird issue w/ our app where a bad network caused a timeout and then the network stack fell over and the user had to restart the app to fix it :-)\n",
        "From more testing, I found that if the network gets crappy enough (if you leave CharlesSSL at 50% and keep trying to get your app to load stuff over the network when Charles gives you an unstable network), the network stack gets stuck w/ these still:\n  Caused by: java.io.IOException: shutdown\n at okhttp3.internal.framed.FramedConnection.newStream(FramedConnection.java:238)\nRetrofit (1.9.0 if it matters) then gets stuck as before...takes longer now so initial testing didn't show this...the fix definitely helped.\n",
        "@kenyee yeah, I know and I\u2019m sad about that. We\u2019ve got a couple of failing tests where our \u2018perseverence\u2019 goals aren\u2019t being met. We\u2019ll fix those before closing this issue.\n",
        "@dave-r12 anything left here?\n",
        "Nothing I can think of.\n",
        "Sweet!\n"
    ],
    "2757": [
        "Good find. Can fix.\n",
        "I've sent a pull request to fix this, based on overriding equals() and hashCode() to implement value equality semantics on the certificate related classes. The complication is that this is easy to break (although the tests should now hopefully catch it). I'll wait to hear from you whether you like that approach or want to implement a different one.\n"
    ],
    "1394": [],
    "3623": [],
    "2393": [],
    "1781": [],
    "4359": [],
    "27": [],
    "1275": [],
    "2045": [],
    "3859": [],
    "4702": [],
    "4100": [],
    "663": [],
    "2780": [
        "Got the same issue with widely used IP Webcam app version 1.12.4r\nhttps://play.google.com/store/apps/details?id=com.pas.webcam\n\nGET /shot.jpg HTTP/1.1\nUser-Agent: Android/6.0 (6.0 - 5X) com.alexvas.dvr.pro\nHost: 10.0.1.4:8080\nConnection: Keep-Alive\nAccept-Encoding: gzip\n\nHTTP/1.1 401 Unauthorized\nContent-Length: 0\nWWW-Authenticate: Digest qop=\"auth\", realm=\"IP Webcam\", nonce=\"1470841389\"\n",
        "Please see also #2772, where I have linked working code which parses `WWW-Authenticate` parameters (named as well as anonymous ones).\n",
        "`HttpHeaders.parseChallenges` is _basically_ broken, I come across a `@TODO` stub in it, saying:\n\n> This currently only handles schemes with a 'realm' parameter;\n>   It needs to be fixed to handle any scheme and any parameters\n>   http://code.google.com/p/android/issues/detail?id=11140\n\nExcept `Basic` scheme, any other scheme like `Digest Access Authentication`, are unsupported.\n",
        "https://github.com/rburgst/okhttp-digest uses `response.challenges()` which uses `HttpHeaders.parseChallenges()` to get scheme via `Challenge` instance. If `realm=value` is not the first parameter, `Challenge` is not returned and okhttp-digest does not work.\n",
        "> https://github.com/rburgst/okhttp-digest uses response.challenges() which uses HttpHeaders.parseChallenges() to get scheme via Challenge instance.\n\nAre you sure it's **okhttp-digest** bothering you? \n\n> If realm=value is not the first parameter, Challenge is not returned and okhttp-digest does not work.\n\nThe order should be the _very_ least of your worries , since `Realm` is the only parameter being parsed, \n",
        "OkHttp does not support Digest authentication, so I'm using okhttp-digest library. okhttp-digest parses `WWW-Authenticate` by it's own, but it relies on scheme being parsed by OkHttp. This is the problem.\n\nCheck this line\nhttps://github.com/rburgst/okhttp-digest/blob/master/src/main/java/com/burgstaller/okhttp/DispatchingAuthenticator.java#L35\n\nWhat I'm trying to say is that if `realm` cannot be parsed in `HttpHeaders.parseChallenges()`, `scheme` is not returned.\n\n`HttpHeaders.parseChallenges()` is not properly implemented.\n",
        "Okay, I see, seems someone is working on it. Good luck!\n",
        "No, nobody is working. **That is an issue in OkHttp**.\nCheck unit tests submitted in first post.\n",
        "That's sad, there're two ways to solve your problems, either to\n- implement #2772 proposal(closed, at this point) to fix `HttpHeaders.parseChallenges`, but the downside is unnecessary overhead as `WWW-Authenticate` header get parsed two times.\n- or create a new issue under okhttp-digest, for `Response.challenges` is not usable for parsing Digest scheme.\n",
        "Why it should be okhttp-digest issue? The problem is that `HttpHeaders.parseChallenges()` method in OkHttp does not properly parses `realm` value in `WWW-Authenticate` header.\n\nBut yes, implementing #2772 will fix the issue.\n",
        "Fixed with https://github.com/square/okhttp/pull/4252"
    ],
    "1020": [],
    "2788": [],
    "2862": [],
    "2988": [],
    "2038": [],
    "60": [],
    "4686": [],
    "631": [],
    "2815": [
        "I think we do update the cached headers in response to a 304. Could you write a test case to demonstrate your problem?\n",
        "Seems you are correct and do (as you pointed me to https://github.com/square/okhttp/blob/master/okhttp-tests/src/test/java/okhttp3/CacheTest.java#L1825 in the SO at http://stackoverflow.com/questions/36835550/android-okhttp-how-to-handle-etag/36853783?noredirect=1#comment65736650_36853783 ). This may be an Android specific issue. I'll put together a test using the AndroidJUnit runner and see if it replicates the issue. If so, I'll post back here. One thing I know for sure is that the OkHttp-Sent-Millis and OkHttp-Received-Millis values in the cache entry are never updated from a 304 response. If my understanding is correct, these are used to determine the freshness of the cache. If they never get updated, the cache will always be stale and never used. The odd thing is that the other header entries do get updated from a 304, just not these two.\n",
        "Thanks for fixing this! Do you have plans for a release including this fix? This problem is causing lots of unnecessary requests for us.\n",
        "Yep. Planning on doing 3.5.0 very soon.\n"
    ],
    "915": [],
    "464": [],
    "2912": [],
    "1308": [],
    "3545": [],
    "1731": [],
    "2875": [],
    "2840": [
        "Yep. Let's do something for this.\n",
        "We can probably just hook up `AsyncTimeout` to call `Call.cancel()`. Heck, we could even make `Call` work like `Source` and `Sink` so it can be adjusted independent of the client.\r\n\r\n```\r\n  /** Returns the timeout for this call */\r\n  Timeout timeout();\r\n```",
        "Next steps:\r\n\r\n * [x] Pick a default value (none? 60 seconds?)\r\n * [x] Configuration on OkHttpClient.Builder\r\n * [x] Confirm it does _something_ reasonable for web sockets and SSE\r\n",
        "Our initial timeout needs to be no-timeout. Otherwise upgrading is made very difficult when the code-being-upgraded doesn\u2019t expose its OkHttpClient instance to be configured. For example, if the use of OkHttp is an implementation detail of a 3rd party SDK.",
        "https://github.com/square/okhttp/pull/4369",
        "Fixed!",
        "If you happen to be using [Retrofit](https://github.com/square/retrofit) with its [RxJava](https://github.com/ReactiveX/RxJava) call adapter you can already get this for free:\n\n``` java\ninterface MyService {\n  @GET(\"/user\")\n  Observable<User> getUser();\n}\n```\n\n``` java\nMyService service = // ...\nservice.getUser()\n  .timeout(2, SECONDS) // covers sending the request and waiting for the response\n  .subscribe(..);\n```\n",
        "I'm no using retrofit. I just want to create a client with a timeout for the whole operation.\n",
        "I\u2019d also be interested in a whole operation timeout.\n",
        "We successfully implemented a deadline for both the request and response body reading by subclassing Call in our application in production:  https://gist.github.com/ericcj/49118c877f471b3d8d53db545160e4ac\r\n\r\nLooks like there have been a couple related implementations, one inside the HTTP codecs (https://github.com/square/okhttp/pull/2729) and a simple solution for just the body reading (https://github.com/square/okhttp/issues/1130).  \r\n\r\nMuch of it could also be implemented in an interceptor, except that we would have to close the socket instead of calling the more precise cancel method and it wouldn't cover the seemingly infinite retries on IOExceptions getting a connection in RetryAndFollowUpInterceptor which does while (true) until if (canceled) throw.  \r\n\r\nNote that we also have a separate interceptor to timeout DNS (https://gist.github.com/ericcj/a4e5c99982d36d3348ff3c732fa51038) since even our deadline doesn't cover that as per https://github.com/square/okhttp/issues/95 although now using the new Dns interface would be preferable.  ",
        "Will this functionality be implemented?",
        "we waiting ... :)) ",
        "@swankjesse any update regarding this issue? Thanks in advance."
    ],
    "705": [],
    "2842": [
        "I\u2019ve added code to forbid spaces in keys. I don\u2019t think forbidding multiple spaces is worth the effort. Thanks for reporting this!"
    ],
    "512": [],
    "582": [],
    "4677": [],
    "4115": [],
    "1974": [],
    "2853": [],
    "80": [],
    "3092": [],
    "2867": [
        "Yes!\n",
        "Would you like me to send a pull request?\n",
        "Yes!\n"
    ],
    "4614": [],
    "2879": [
        "The spec allows a body in a HEAD response. An empty response is much more\nappropriate, although if the content length is 0 I agree we should actively\nclose the underlying source.\n\nOn Thu, Sep 22, 2016, 10:37 PM Kenzie Togami notifications@github.com\nwrote:\n\n> Currently, if a server returns a Content-Length in the headers of a HEAD\n> request matching the size of the GET entity (as it is supposed to), OkHttp\n> will think that the response has a body to be read. When attempting to read\n> this body, an exception is thrown because only 0 bytes are read instead of\n> whatever the content length is: Content-Length and stream length disagree.\n> OkHttp should just report a null body, since the Content-Length info is\n> still available in the headers.\n> \n> Here's a test case for what I expect AND what actually happens:\n> https://gist.github.com/kenzierocks/6f061563cbcaafc05fe469a494ab45d6\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/square/okhttp/issues/2879, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAEEEctiTXodqWTjy7s3FTZJ06BvPx55ks5qsztqgaJpZM4KEjoA\n> .\n",
        "An empty response would also make sense.\n",
        "I added a test. The empty body is working as designed.\n",
        "Fantastic, thanks!\n"
    ],
    "532": [],
    "1028": [],
    "2883": [
        "It\u2019s an issue with the comment. It should really say \u201cNever null on responses returned from servers\u201d. It is possible to create instances of `Response` without providing a body, and we also use this in the `cacheResponse` and `networkResponse` members of `Response`.\n",
        "@swankjesse Agreed, makes sense. Can i submit a PR to make that change to the comment or what is the process with milestones/releases?\n",
        "Sure, please send a PR to fix the docs.\n"
    ],
    "4520": [],
    "2886": [
        "Yep, can fix.\n"
    ],
    "1357": [],
    "346": [],
    "1285": [],
    "1876": [],
    "2892": [
        "Can fix!\n"
    ],
    "2438": [],
    "3185": [],
    "339": [],
    "2902": [
        "1. Sure\n2. Before `onOpen` only. We could send a \"going away\" close if it was opened but it becomes weird with interactions to `WebSocket` is canceling a reader close such that subsequent calls to `WebSocket` should ISE or do we treat it like a peer close where subsequent calls just IOE?\n3. No. Only on user cancel currently.\n4. Ideally we disallow writes on the reader thread entirely. currently you can write in onOpen and any listener callback\n5. We can hide the API iff we ship with auto-pings. i'm still willing to bet exposing it is the first issue filed after the release though.\n6. I think we decided listener because it was long-lived instead of a callback which is a single invocation\n7. Wasn't the initial version like this? I can't remember. I think it would ISE if you tried to do something before connected. My biggest concern is that no matter what the application has to wait for the open callback so why not prevent them from sending anything with the type system instead of with runtime checks.\n8. Probably since `close()` sends something as well.\n",
        "Leaning more and more towards a no on 7.\n\nA `WebSocketCall` is representation of a unit of work that you trigger once and the result of that work becomes `WebSocket` in the same way as you would `Call` and get `Response`.\n",
        "I\u2019ve got a different approach on 7. A `Response` is _almost_ a value object. It would be completely except that streaming body is an necessary optimization.\n\nBut a `WebSocket` is a service object. It\u2019s closer to `Call` because it\u2019s live and interactive. And so I think it\u2019s interesting to contemplate having a single interactive thing rather than one that produces the other.\n\nThe type system consequences are super interesting. If you\u2019re building a chat app you need a little state machine to move messages from the user to the websocket. Presumably this is tough work because you need to keep track everything until it has been acknowledged. But do you want to enqueue messages before the websocket is open? Maybe? And for us do we want to optimistically transmit such messages?\n\nI\u2019m flexible on this but I think it\u2019s probably the most interesting API we\u2019ve seen in a long time.\n",
        "Answered without looking at other answers at all (to get that natural reaction)...\n1. Regarding `maxRequestsPerHost` - Sure.\n2. IMO, once `onOpen()` is called, `WebSocketCall` shouldn't do anything anymore. Therefore `WebSocketCall#cancel()` should only work before `onOpen()`.\n3. No. Like above, I think `WebSocketCall` itself should be discarded once `onOpen()` is called.\n4. Ignoring.\n5. I would like ping/pong to be automatic and was actually thinking that could be an extension added to a later version. That said, I don't know how complex pings can get with some websockets. In Trello it's just empty messages, but maybe other websockets do send actual data in the pings, which would be harder to do automatically.\n   \n   Also worth noting that, in the case of Trello's sockets, both sides are pinging each other constantly. So would this also include _responding_ to pings automatically?\n6. I like \"listener\" in this case because it's an ongoing connection. \"Callback\" seems more appropriate for a one-off operation.\n7. I've looked through my code and the one place that would be tricky to handle would be reconnecting logic. Suppose we decide to close the socket (e.g. a ping times out). We call `WebSocket#close`, but we have no expectation that `WebSocketListener#onClose` will ever get called (since hey it was a ping timeout in the first place).\n   \n   Now, if we want to retry connecting to the sockets, we wait a couple seconds then initiate a new `WebSocketCall`. But meanwhile, it's still possible that we may (somehow) get `WebSocketListener#onClose`. So then we're in a circumstance where we're both connecting _and_ we got the message that it's closed.\n   \n   Maybe the answer here is to have one unique listener per connection?\n   \n   Regardless, I'm not opposed to the idea of combining them. It just means you need to add a lot more `WebSocket#is*` methods. I would probably also just throw an exception if you try to call `message()` or `ping()` before it is open.\n8. Ignoring.\n",
        "> So would this also include responding to pings automatically\n\nYep. The spec mandates this so it will always be the behavior.\n",
        "Another thing about the Trello sockets - once you're connected to sockets (general), we then send messages which subscribe us to individual channels (specific). E.g., there's a channel for your current user or a channel for a board you might have open.\n\nThose channel subscription messages currently have to be queued and then sent once `onOpen()` is called. So the idea of queueing messages for later sending is appealing in that regard.\n\n**But** the way the subscription works we have to track our request and then match it with a later response. So it'd be difficult to wrangle if we _thought_ we sent a subscription request but it never actually got sent.\n",
        "I wonder what it\u2019d look like to hook up [Tape](https://github.com/square/tape) to WebSockets. It\u2019d get pretty involved due to a missing link between messages sent and messages received.\n\nWith a Request/Response model, you know your request was accepted when you receive a 2xx response. With WebSockets, you must devise your own application-layer scheme to acknowledge which messages were accepted. Ugly.\n",
        "WebSockets don't seems appropriate for that use case. If you want a request/response model then you should be using http/2 or at worst a keep-alive connection and definitely not web sockets.\n",
        "The API looks pretty good but I think some of the semantics around building a reliable sender and receiver were a little tricky.\n\nIt seems like the API handles reading the socket in it's own thread then sends messages to the `WebSocketListener`.  I assume by the comment \"Start a new thread or use another thread in your application\" that it is my responsibility to handle the send side. I created my own looper for doing sends.  It's pretty tricky to test all the scenarios for proper shutdown in this case.  If the API provided a simple way for me to pass in my `WebSocket` so that all the sends are performed in their own thread and it handled all the shutdown code, that would make using the API a lot simpler.\n",
        "> It's pretty tricky to test all the scenarios for proper shutdown in this case.\n\nI'm not convinced this is true. Proper shutdown happens in only two ways:\n- The client desires it and calls `close()` with no further writes. The listener eventually receives `onClose`.\n- The listener receives `onClose` indicating writes should stop. We auto-reply acknowledging the close on your behalf.\n\nImproper shutdown also happens in two ways, except if you handle the proper shutdown case correctly these come for free:\n- Writing a message or ping throws an `IOException`. You're obligated to try and call `close()` and stop writing.\n- The listener gets called with `onFailure` on indicating writes should stop.\n\nIf the listener receives `onClose` or `onFailure` future writes to the `WebSocket` will throw `IOException` which gets handled by the first point.\n\nSo this really boils down to one thing: `try`/`catch` your writes and call `close` if they throw. Everything else comes for free. If you want, you can do a best effort and stop writing when `onClose` or `onFailure` happen but they'll quickly error out anyway.\n\nThat leads me to\n\n> If the API provided a simple way for me to pass in my WebSocket so that all the sends are performed in their own thread and it handled all the shutdown code, that would make using the API a lot simpler.\n\nThe API would be more simple, but it wouldn't be easier to use.\n\nIn this queued write system how do you know which write failed? What happens to queued data that wasn't written? What do we do with queued data when the listener receives `onClose` or `onFailure`? How large is the buffer in the queue? Do we let the application continually enqueue messages faster than they can be processed and eventually OOM?\n\nIf we adopted a queued system the writing API would not change at all, but we'd now need to add APIs to support all these cases:\n- A callback or mechanism for backpressure when the web socket is slower at sending than the application is at queueing.\n- A callback mechanism to indicate when each message was successfully sent.\n- A querying mechanism so unsent queued messages can be retrieved and potentially retried on a reconnect.\n\nThis actually makes the API more complex and makes writing a correct client more difficult. Your application requirements have to reconcile the assumptions that we've made about how you want to write to web sockets and they won't always match.\n\nWeb sockets _are_ complicated to implement and we do force you to make decisions at the application layer. How you want to handle queueing, successful message sends, and retrying the connection is hard to implement inside the library to appease everyone.\n",
        "I think we need `WebSocket.isClosed()` though to differentiate between sever-closed sockets that cause `IOExeption` and normal network errors.\n",
        "Thanks, for the details.  As for cleanup, I think I managed to get most of what you described covered in my client implementation (I just wasn't sure this was all I needed).  Having the process you described above saved in some of the more permanent documentation would be nice.\n\nYou've made a convincing argument that management of the write side should be left to the implementer.\n\nWhat struck me as strange about the API is that an established websocket connection is a symmetric pipe, but the API interface is asymmetric (one where the read side appears managed and the write is not).  Wouldn't many of the same arguments about more nuanced management apply to the read side as well?\n\nI like the `WebSocketListener.onMessage()` approach.  I think it's better than something like having a blocking `WebSocket.receiveMessage()` that would only provide framing.  But having an unmanaged receive does seem better matched to the `WebSocket.sendMessage()`.\n",
        "After writing a little experiment code some observations:\n- [ ] We don\u2019t have a violent way to break the socket and free it's resources. I think we need one for poorly behaving servers.\n- [ ] Closing a WebSocket cleanly is awkward. There\u2019s close vs. cancel depending on lifecycle state, plus synchronization with any other threads that are writing or closing.\n",
        "I propose we always fully buffer WebSocket messages. The consequences:\n- A listener that receives `onMessage()` can return immediately without reading the response body. The `ResponseBody` the caller holds is buffered!\n- A writer never blocks writing a message. It\u2019s merely enqueued to be written later, with some limit on how many bytes or messages can be enqueued concurrently.\n\nI\u2019m proposing this behavior even though I know it\u2019s weird. The reason is that message receipts are the application layer\u2019s concern. If the client sends something that\u2019s intended to be durable, the client already needs to hold that thing until a receipt is received. Blocking until the bytes have been written to the socket doesn\u2019t confirm anything.\n",
        "I\u2019m happy with where this is now.",
        "I still think most people are going to end up writing code to keep track of the state of the websocket in a way that could be provided by the API itself because of [this problem](https://github.com/square/okhttp/pull/2959#issuecomment-259253465).",
        "yeah, for sure. I think I\u2019d like to write a sample to exercise that case, which may motivate expanding the API.",
        "For 5: I would like to expose the ping pong api.Because this is very helpful to keep your websocket connected and reconnect when meet with network issue or something else.The WebSocketListener onClose method isn't reliable in practice."
    ],
    "142": [],
    "446": [],
    "849": [],
    "711": [],
    "755": [],
    "780": [],
    "1073": [],
    "4327": [],
    "2939": [
        "Ugh, seems like the webserver is sending a malformed cookie and we\u2019re echoing it back. We can either fix by discarding the bad cookie on the way in, stripping bad characters from it, or by retaining bad characters in it on the way out. I\u2019ll look to see what Chrome & Firefox do and try to do likewise.\n",
        "In case of Chrome, I think they basically trim the bad characters (in this case \\u0001).  \r\nI also tested some other control characters and found out Chrome will strip the backslash only and convert whitespace related control characters into whitespace.\r\n\r\n@swankjesse What do you think about this approach?\r\n\r\n![screen shot 2016-12-28 at 15 44 27](https://cloud.githubusercontent.com/assets/1751188/21515597/90238eee-cd14-11e6-9236-113e7c0694d5.png)\r\n",
        "#### Chrome:\r\n * drops cookies containing `\\u0001` through `\\u0019`\r\n * except `\\u0000` which is stripped\r\n\r\n#### Firefox:\r\n * drops cookies containing `\\u0000` through `\\u0019`\r\n * except `\\u0000` which terminates the header\r\n * except `\\u0009` (tab) which is retained\r\n\r\n#### Safari:\r\n * truncates cookie at character containing `\\u0000` through `\\u0019`\r\n * truncates cookie at character containing `\\u007f` through `\\u00ff`\r\n * except `\\u0009` (tab) which is retained\r\n\r\n",
        "I think I\u2019ll try to get OkHttp to drop cookies in [`\\u0000`..`\\u0019`] and [`\\u007f`..].",
        "Was this one released in 3.5.0? I still have the problem.\r\nThanks",
        "Nope. Hoping to cut 3.6.0 like today or tomorrow."
    ],
    "2940": [
        "@swankjesse Can I get an update on this issue? Thank you. :)\n",
        "Can fix.\n"
    ],
    "1835": [],
    "576": [],
    "2376": [],
    "4621": [],
    "3346": [],
    "589": [],
    "4297": [],
    "1500": [],
    "1082": [],
    "806": [],
    "3057": [],
    "4292": [],
    "1624": [],
    "581": [],
    "44": [],
    "49": [],
    "2993": [
        "Would it be set in the `Request`? If so, that'd be a weird setting for any `Request` that's not web sockets-related.",
        "I was thinking it\u2019d be configuration on the OkHttpClient.",
        "That sounds good to me.",
        "@swankjesse Hi, I am migrating websocket from 3.4 to 3.5, now we can send ping automatically using okhttp client.But how do i know websocket get pong from server? There is used to be a `onPong` method in WebsocketListener.",
        "Automatic pings and pongs are not surfaced to the application layer.\n\nOn Thu, Dec 1, 2016 at 11:49 PM Jiawen Geng <notifications@github.com>\nwrote:\n\n> @swankjesse <https://github.com/swankjesse> Hi, I am migrating websocket\n> from 3.4 to 3.5, now we can send ping automatically using okhttp client.But\n> how do i know websocket get pong from server? There is used to be a onPong\n> method in WebsocketListener.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/square/okhttp/issues/2993#issuecomment-264372792>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEERTxkmoENhILp6jOvft0X352NwO3ks5rD6NmgaJpZM4K3kQ9>\n> .\n>\n",
        "Is it still possiable I can send ping and handle pong in `okhttp 3.5`.For now I use keep sending ping mechanism to ensure I the websocket is connected and reconnect when run into network exception or other crash.",
        "We\u2019ll notify you with an onFailure if that occurs.",
        "But I tested on genymotion the onFailure not called when I entre airplane model after 1min or so.But the websocket is actually closed. ",
        "Here is my okhttp client.Do i need to set connectionTimeout to make `onFailure` reliable?\r\n```java\r\n    private OkHttpClient client = new OkHttpClient.Builder()\r\n            .readTimeout(0, TimeUnit.SECONDS)\r\n            .writeTimeout(0, TimeUnit.SECONDS)\r\n            .build();\r\n```",
        "Found another thing ,you get no exception when sending ping even if your network not available.",
        "File separate bugs. Preferably with test cases if possible. Commenting here\nwon't get things done.\n\nOn Sat, Dec 3, 2016, 3:29 AM Jiawen Geng <notifications@github.com> wrote:\n\n> Found another thing ,you get no exception when sending ping even if your\n> network not available.\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/square/okhttp/issues/2993#issuecomment-264625798>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEUNuTzuCgFWs9obDFhyIcjyR40Btks5rEShygaJpZM4K3kQ9>\n> .\n>\n"
    ],
    "526": [],
    "4353": [],
    "146": [],
    "2092": [],
    "4584": [],
    "1878": [],
    "4711": [],
    "692": [],
    "3021": [],
    "1316": [],
    "1732": [],
    "4642": [],
    "2495": [],
    "2871": [],
    "3035": [],
    "3263": [],
    "1205": [],
    "4547": [],
    "3428": [],
    "1127": [],
    "2040": [],
    "4263": [],
    "2066": [],
    "423": [],
    "4696": [],
    "413": [],
    "4201": [],
    "4133": [],
    "3612": [],
    "3183": [],
    "3419": [],
    "3559": [],
    "2990": [],
    "2653": [],
    "3090": [],
    "1810": [],
    "3103": [
        "Makes sense. Can do."
    ],
    "2744": [],
    "1345": [],
    "1504": [],
    "3115": [
        "Can you provide some tips to reproduce? Not much actionable here.",
        "Crash logs is uploaded by user device. Once I open okhttp cache in my app's new version, these crash comes.",
        "I think I spotted a possible culprit - if the first initialization fails from a faulty filesystem, the closed field may get set to true."
    ],
    "479": [],
    "4057": [],
    "36": [],
    "416": [],
    "1085": [],
    "798": [],
    "1879": [],
    "3135": [
        "That\u2019s odd. As specified `/dev/urandom` is always supposed to provide entropy."
    ],
    "3138": [
        "Fix isn\u2019t sufficient!\r\n\r\n```\r\nSep 01, 2017 6:07:29 AM okhttp3.internal.platform.Platform log INFO: [WS client] onFailure java.io.EOFException at okio.RealBufferedSource.require(RealBufferedSource.java:60) at okio.RealBufferedSource.readByte(RealBufferedSource.java:73) at okhttp3.internal.ws.WebSocketReader.readHeader(WebSocketReader.java:113) at okhttp3.internal.ws.WebSocketReader.processNextFrame(WebSocketReader.java:97) at okhttp3.internal.ws.RealWebSocket.loopReader(RealWebSocket.java:265) at okhttp3.internal.ws.RealWebSocket$2.onResponse(RealWebSocket.java:204) at okhttp3.RealCall$AsyncCall.execute(RealCall.java:153) at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) Sep 01, 2017 6:07:29 AM okhttp3.mockwebserver.MockWebServer$3 processOneRequest INFO: MockWebServer[40001] received request: GET / HTTP/1.1 and responded: HTTP/1.1 101 Switching Protocols Tests run: 34, Failures: 1, Errors: 0, Skipped: 1, Time elapsed: 7.353 sec <<< FAILURE! - in okhttp3.internal.ws.WebSocketHttpTest throwingOnClosingClosesImmediatelyAndFails(okhttp3.internal.ws.WebSocketHttpTest) Time elapsed: 0.054 sec <<< FAILURE! java.lang.AssertionError: Remaining events: [Failure[java.io.EOFException]] at org.junit.Assert.fail(Assert.java:88) at org.junit.Assert.assertTrue(Assert.java:41) at okhttp3.internal.ws.WebSocketRecorder.assertExhausted(WebSocketRecorder.java:167) at okhttp3.internal.ws.WebSocketHttpTest.throwingOnClosingClosesImmediatelyAndFails(WebSocketHttpTest.java:213) \r\n```",
        "https://s3.amazonaws.com/archive.travis-ci.org/jobs/270702987/log.txt?X-Amz-Expires=30&X-Amz-Date=20170901T085440Z&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJRYRXRSVGNKPKO5A/20170901/us-east-1/s3/aws4_request&X-Amz-SignedHeaders=host&X-Amz-Signature=c131fd5e76fd8b9eebf8d104b5e4ebc4935be3454c277c59f9032b73d05d4647",
        "Actually, the new failure is unrelated to Okio buffers. Whew.\r\nhttps://github.com/square/okhttp/pull/3570"
    ],
    "3790": [],
    "562": [],
    "2192": [],
    "233": [],
    "771": [],
    "138": [],
    "2587": [],
    "222": [],
    "617": [],
    "6": [],
    "893": [],
    "3173": [
        "You'll need to configure your ConnectionSpec to enable obsolete cipher suites in OkHttp.\r\nhttps://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java",
        "It seems that IBMJSSE2, the JSSE implementation used by Websphere, in not compatible with this solution.\r\nThe problem is that for this implementation, the cipher suite names may starts with SSL_ or TLS_ ([IBM documentation](https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/ciphersuites.html)), both accepted: but that is not true for OkHttp.\r\n\r\nExample:\r\nThe cipher TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 is not legacy (like the SSL_RSA_WITH_3DES_EDE_CBC_SHA cipher) and its Java name is the same as its id in the CipherSuite class.\r\n\r\nThe socket implementation correctly registers the cipher\r\n ```java\r\nsocket.setEnabledCipherSuites(javaNames(spec.cipherSuites()));\r\n ```\r\n\r\nbut in the getEnabledCipherSuites list, the name is returned with the SSL_ prefix.\r\nFor that reason the following lines of code, in the method CipherSuite.isCompatible(SSLSocket socket), return false\r\n\r\n```java\r\nif (cipherSuites != null\r\n        && !nonEmptyIntersection(cipherSuites, socket.getEnabledCipherSuites())) {\r\n      return false;\r\n}\r\n ```\r\n\r\nand the class ConnectionSpecSelector throws the \"Unable to find acceptable protocols\" exception.\r\n\r\nThis problem seems very similar to the one descripted in this page\r\nhttps://github.com/cloudant/java-cloudant/issues/215\r\n\r\nIs it possible that this is the real cause of the presence of the single cipher SSL_RSA_WITH_3DES_EDE_CBC_SHA in the client hello phase of my test servlet?\r\n",
        "Oh interesting. We can probably fix to handle TLS_ or SSL_ prefixes",
        "@swankjesse Our implementation would benefit greatly from this proposal, does the team have an estimated ETA on bringing this patch into a release?",
        "I experienced the same problem today running an okhttp based client within IBM Bluemix. A solution would be appreciated!",
        "@swankjesse \r\nHey, any update on an ETA?",
        "No ETA. Any advice on reproducing this as a person who doesn\u2019t use WebSphere? Ideally on a Mac?",
        "This issue _probably_ does not need all of WebSphere to be seen. It is likely that only IBM Java is needed. IBM publishes Docker images with IBM Java in it\r\n\r\n```\r\ndocker run -it --rm ibmcom/ibmjava:8-sdk java -version\r\njava version \"1.8.0\"\r\nJava(TM) SE Runtime Environment (build pxa6480sr4fp1-20170215_01(SR4 FP1))\r\nIBM J9 VM (build 2.8, JRE 1.8.0 Linux amd64-64 Compressed References 20170209_336038 (JIT enabled, AOT enabled)\r\nJ9VM - R28_20170209_0201_B336038\r\nJIT  - tr.r14.java.green_20170125_131456\r\nGC   - R28_20170209_0201_B336038_CMPRSS\r\nJ9CL - 20170209_336038)\r\nJCL - 20170215_01 based on Oracle jdk8u121-b13\r\n```\r\n\r\nSimilar issue for Apache's HTTP client: https://issues.apache.org/jira/browse/HTTPCLIENT-1784\r\n\r\nSome relevant IBM documentation: http://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/matchsslcontext_tls.html",
        "That helps a lot. Thanks @bruceadams !",
        "Please note that the IBM doc @bruceadams linked to points out that OkHttpClient's usage of `TLS` in the creation of the default SSLContext will also cause problems for IBM Java users when attempting to connect to a server that does not offer TLS 1.0. Wanted to make sure that was clear given the initial focus was on 3DES being the only suite chosen.\r\n\r\nI'm not a real coder these days - but I believe you could explicitly supply `TLSv1,TLSv1.1,TLSv1.2` to get support for all 3 protocols consistently across Oracle and IBM. I do not know about other JDKs though.",
        "Good news: I was able to establish connectivity with OkHttp and this particular server using the IBM docker image. That was a really good help.\r\n\r\nBut I need to make a code change. I need to change OkHttp\u2019s CipherSuite class to ignore the `TLS_` or `SSL` prefix when identifying a cipher suite. I didn\u2019t realize that IBM and Oracle used different prefixes, and our code is too simple. This is ugly, but should be straightforward to overcome.\r\n\r\nThe other trick to connecting to this particular server is enabling TLS 1.2 on in the SSLSocket. This is awkward code. In my test I used [DelegatingSSLSocketFactory](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java#L109) configured like so:\r\n```\r\n      // Force TLS 1.2 on. This isn\u2019t the on by default for IBM Java8.\r\n      sslSocketFactory = new DelegatingSSLSocketFactory(sslSocketFactory) {\r\n        @Override protected SSLSocket configureSocket(SSLSocket socket) throws IOException {\r\n          socket.setEnabledProtocols(new String[] {\r\n              TlsVersion.TLS_1_0.javaName(),\r\n              TlsVersion.TLS_1_1.javaName(),\r\n              TlsVersion.TLS_1_2.javaName()\r\n          });\r\n          return socket;\r\n        }\r\n      };\r\n```\r\n\r\nI\u2019ll make the OkHttp change to ignore `TLS_` vs. `SSL_` prefixes.\r\n\r\nFor reference, here\u2019s my updates to your test harness:\r\nhttps://gist.github.com/swankjesse/d094cb17d0562520cdbf64254542694a",
        "@JakeWharton @swankjesse, Thanks for fixing this.  Are you guys planning on doing a release? \r\n\r\nThe reason I'm asking is because based on your [CHANGELOG](https://github.com/square/okhttp/blob/master/CHANGELOG.md), it could be weeks before you release a new version. \r\n\r\nIn the meantime, I'm going to add a workaround similar to the one @swankjesse described in his gist.\r\n\r\nThanks again for fixing this.",
        "@JakeWharton @swankjesse Adding to the request to see if you can accelerate 3.7.0 if your not already on the verge of releasing it. With the sweet32 vulnerability more and more people are removing 3DES as a supported suite on their servers - including us (IBM). I realize we apparently made a bad choice at some point to be different and unfortunately stuck with it are now suffering for it. Because Oracle still used SSL_ for older suites there have been suites available when using IBM Java until now when the last of these - the 3DES suites - are going away.\r\n\r\nWe did look into creating our own SslSocketFactory as a temporary solution with 3.6.0 but you don't just accept the suites configured in that factory - you require overlap with your hard-coded list.",
        "Glad you're\u200b not blocked. Sorry for the radio silence; just lots going on at the moment.",
        "Hi @swankjesse - Am using version 3.9.1 of the jar, but am still running into the handshake_failure exception. \r\njavax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure  at com.ibm.jsse2.j.a(j.java:23)\r\n\r\nAm trying to communicate to APNS, using okhttp library. We are using IBM WAS 8.5.5 and Java 1.7. Can you pls let me know how can we work around this problem? thanks for your help.",
        "@JakeWharton @swankjesse please ignore the entreaty above (which I think you already were \ud83d\ude04 ). The ability to simply turn off the cleansing of the default cipher suites provided by the socket by via providing a `ConnectionSpec` which has had `.allEnabledCipherSuites()` invoked on it was totally missed when looking at this."
    ],
    "1737": [],
    "886": [],
    "1237": [],
    "1383": [],
    "3203": [
        "Can fix."
    ],
    "2022": [],
    "3967": [],
    "3211": [
        "Drop the text which we didn't explicitly log from the assertion?\n\nOn Tue, Mar 7, 2017, 11:40 AM Andreas Ahlenstorf <notifications@github.com>\nwrote:\n\n> Two tests in CallTest break when they are executed on a JVM that does not\n> use an English locale: leakedResponseBodyLogsStackTrace() and\n> asyncLeakedResponseBodyLogsStackTrace(). The problem is the line:\n>\n> assertTrue(message.contains(\"WARNING: A connection to \" + server.url(\"/\") + \" was leaked.\"\n>     + \" Did you forget to close a response body?\"));\n>\n> WARNING is for example WARNUNG (German for \"WARNING\") on a JVM with a\n> German locale. If you tell me how I should fix it (JUnit @Rule,\n> Locale.setDefault(...)) I'll do it.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/square/okhttp/issues/3211>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEYLBqxjFwA_DgwAZbI4Blm-xhpehks5rjYhqgaJpZM4MVuWF>\n> .\n>\n"
    ],
    "4526": [],
    "685": [],
    "3037": [],
    "396": [],
    "2293": [],
    "3751": [],
    "1456": [],
    "1493": [],
    "4339": [],
    "3384": [],
    "3227": [
        "hi, any news on that?",
        "@swankjesse when can we expect your solution to be implemented or at least to merge @ahulyk's PR as an intermediate solution until you make your own implementation. Another solution would be that you again expose onPong() callback like you had in versions 3.0.x-3.4.x so we can implement our own handling of closing websockets that don't respond on pings with pongs.",
        "### Question for web socket users:\r\n\r\nMy preference is to fail the web socket if we don't receive a pong within the ping interval.\r\n\r\nWhat's your ping interval? Does this new policy work for you?",
        "@swankjesse our ping interval is 30 sec, but pong timeout is 10 sec. On timeout we fail the connection and try reconnecting. So if both ping interval and pong timeout are configured through the single value, this does not work for us",
        "@swankjesse this is exactly what we need.",
        "Okay, I\u2019ve done some thinking on this and have some observations. There are two interesting parameters:\r\n\r\n * Maximum round trip time\r\n * Maximum time to discover connectivity loss\r\n\r\nWith this PR we\u2019re require our users to set the ping interval to max roundtrip time or greater.\r\nIn the best case we\u2019ll detect a connectivity loss in the ping interval (connectivity lost immediately before we ping).\r\nIn the worst case we\u2019ll detect a connectivity loss in 2 x the ping interval (connectivity lost immediately after we receive a pong).\r\n\r\nWith multiple pings in flight it\u2019d be possible to improve the worst case. We can\u2019t improve the best case. I\u2019m okay with this.",
        "Hi @swankjesse,\r\n\r\nSmall correction here:\r\nAny successfully received data packet should reset the ping timer not just a pong packet.\r\n\r\nIf there is an incoming traffic in the web socket it shouldn't be considered stale even in case there are no pong responses.\r\nOtherwise, some long operations might cause false timeouts.",
        "Pongs can interleave and the spec tells you to reply as soon as possible.\n\nOn Tue, Feb 20, 2018, 5:57 PM Sergei Dryganets <notifications@github.com>\nwrote:\n\n> Hi @swankjesse <https://github.com/swankjesse>,\n>\n> Small correction here:\n> Any successfully received data packet should reset the ping timer not just\n> a pong packet.\n>\n> If there is an incoming traffic in the web socket it shouldn't be\n> considered stale even in case there are no pong responses.\n> Otherwise, some long operations might cause false timeouts.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/square/okhttp/issues/3227#issuecomment-367150608>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEWm9cl8HFA2dQKc23fv1_PUU3p7Sks5tW03MgaJpZM4MheB3>\n> .\n>\n",
        "yep, you are right - ping and pong are control frames so if server implements the standard correctly this should be good enough.\r\n\r\nSome interesting details from the RFC:\r\n```\r\nIf an endpoint receives a Ping frame and has not yet sent Pong frame(s) in response to previous Ping frame(s), the endpoint MAY elect to send a Pong frame for only the most recently processed Ping frame.\r\n\r\nA Pong frame MAY be sent unsolicited.  This serves as a unidirectional heartbeat.  A response to an unsolicited Pong frame is not expected.\r\n```",
        "I\u2019m hoping what we have here is sufficient. If it isn\u2019t because pongs are head-of-line blocked behind messages, or because pongs are being sent unsolicited, then we can fix in follow-up.",
        "The unsolicited pong frame thing should be handled, timeouts will stop working if a server is using pongs for keepalives.",
        "It looks quite similar to my issue   #3722    @yschimke ",
        "Hey, I am getting the same Error any Fix for this ??"
    ],
    "3228": [],
    "247": [],
    "4138": [],
    "232": [],
    "1566": [],
    "3235": [
        "Can you ask the Tomcat authors to fix their server? Seems like they\u2019re shutting out a lot of popular browsers with that check.\r\n\r\ncurl:\r\n```\r\nGET /?a={} HTTP/1.1\r\nUser-Agent: curl/7.51.0\r\n```\r\n\r\nFirefox:\r\n```\r\nGET /?a={} HTTP/1.1\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0\r\n```\r\n\r\nChrome:\r\n```\r\nGET /?a={} HTTP/1.1\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\r\n```\r\n\r\nSafari:\r\n```\r\nGET /?a={} HTTP/1.1\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/602.4.8 (KHTML, like \r\n```\r\n\r\nWget does conform though, for what that\u2019s worth.\r\n```\r\nGET /?a=%7B%7D HTTP/1.1\r\nUser-Agent: Wget/1.16.1 (darwin13.4.0)\r\n```",
        "WhatWG recommends escaping `\"#<>` only. https://url.spec.whatwg.org/#query-state",
        "I sympathize, believe me.  See the ticket referenced above for how I discovered the problem.\r\n\r\nIn attempting to craft a workaround, I've discovered that HttpClient (4.5.2) appears to be aligned with Tomcat in terms of what is valid URL:\r\n\r\n```\r\n    String original = \"http://mycompany.com:80/path/query.html?json={}\";\r\n\r\n    // parse with OkHttp3 works\r\n    String url = HttpUrl.parse(original).toString();\r\n\t\t\r\n    // parse with HttpClient fails\r\n    // Illegal character in query at index 45: http://mycompany.com:80/path/query.html?json={}\r\n    String url2 = new URIBuilder(original).toString();\r\n```\r\n\r\n",
        "Oh man, having to discover that through an extra layer of indirection is tricky. \r\n\r\nLooks like it has been since fixed in Tomcat.\r\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=60594",
        "Thanks for the link.  I hadn't seen that yet.\r\n\r\nI wouldn't say that they 'fixed it', as the issue that I experienced would continue to occur unless the System property `tomcat.util.http.parser.HttpParser.requestTargetAllow` is set.\r\n\r\nNot that HttpClient's URLBuilder is the gold-standard (or I wouldn't be using OkHttp3), but I'd respectfully suggest that modifying HttpUrl builder to escape {, }, and | would be a good thing to do :-)",
        "Yep.\r\n\r\nOne frustrating thing is that servlets & other frameworks don\u2019t unescape automatically. So if you write a web app that\u2019s expecting `{` and OkHttp provides `%7B`, your program might reply with a 400. This means that we can\u2019t change OkHttp\u2019s escaping rules without breaking applications.\r\n\r\nI don\u2019t think changing which URL characters are legal was a wise move for Tomcat. Particularly since the characters they\u2019ve chosen to forbid aren\u2019t part of any spec. The CVE they\u2019re trying to address is bogus and they overreacted, and applications like ours are broken as a side-effect.",
        "So, I wrote a little unit test to see how all of the ASCII chars were encoded by OkHttp and HttpClient.   \r\n\r\nI got some interesting results, which I'd like to confirm with you.  In no particular order, let's start with ASCII character 3F, or the ?.\r\n\r\nAccording to my test, OkHttp is willing to parse the following URL:\r\n```\r\nhttp://host/path/subpath?arg=?\r\n```\r\n\r\nIt returns a single query parameter named \"arg\", with a value of ?.  \r\n\r\nSo, maybe the parser is too forgiving. But then my unit test rebuilds the URL, passing that same query parameter name and value back in, and I get back the same URL.  That seems wrong, and in violation of the spec (shouldn't unescaped question mark only be used as separator between path and query string?)\r\n\r\nI'm pretty sure that I'm using the HttpUrl builder correctly.  If I am, the unit tests produces a set of results where HttpUrl builder is different than HttpClient. \r\n\r\n**Code:**\r\n```\r\nimport java.net.URISyntaxException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.List;\r\n\r\nimport org.apache.http.client.utils.URIBuilder;\r\nimport org.junit.Assert;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.junit.runners.Parameterized;\r\nimport org.junit.runners.Parameterized.Parameters;\r\n\r\nimport com.google.common.base.Joiner;\r\n\r\nimport okhttp3.HttpUrl;\r\nimport okhttp3.HttpUrl.Builder;\r\n\r\n@RunWith(Parameterized.class)\r\npublic class HttpUrlEscapingTest {\r\n\t@Parameters(name = \"{2}\")\r\n\tpublic static Collection<Object[]> data() {\r\n\t\tList<Object[]> list = new ArrayList<>();\r\n\t\tfor (int i = 0; i < 256; i++) {\r\n\t\t\tCharacter ch = Character.valueOf((char) i);\r\n\r\n\t\t\tString hex = Integer.toHexString(i).toUpperCase();\r\n\t\t\tif (hex.length() < 2) {\r\n\t\t\t\thex = \"0\" + hex;\r\n\t\t\t}\r\n\r\n\t\t\tfinal String name;\r\n\t\t\tif (i >= 32 && i <= 127) {\r\n\t\t\t\t// including printable version\r\n\t\t\t\tname = hex + \" \\\"\" + ch + \"\\\"\";\r\n\t\t\t} else {\r\n\t\t\t\tname = hex;\r\n\t\t\t}\r\n\r\n\t\t\tlist.add(new Object[] { ch, hex, name });\r\n\t\t}\r\n\t\treturn list;\r\n\t}\r\n\r\n\tprivate final char ch;\r\n\tprivate final String hex;\r\n\tprivate final String name;\r\n\r\n\tpublic HttpUrlEscapingTest(char ch, String escapedChar, String name) {\r\n\t\tthis.ch = ch;\r\n\t\tthis.hex = escapedChar;\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\tbuilder.append(\"HttpUrlEscapingTest [ch=\");\r\n\t\tbuilder.append(ch);\r\n\t\tbuilder.append(\", \");\r\n\t\tif (hex != null) {\r\n\t\t\tbuilder.append(\"hex=\");\r\n\t\t\tbuilder.append(hex);\r\n\t\t\tbuilder.append(\", \");\r\n\t\t}\r\n\t\tif (name != null) {\r\n\t\t\tbuilder.append(\"name=\");\r\n\t\t\tbuilder.append(name);\r\n\t\t}\r\n\t\tbuilder.append(\"]\");\r\n\t\treturn builder.toString();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Tomcat-friendly URL with strict URL escaping\r\n\t *\r\n\t * @param url\r\n\t *            OkHttp3 URL\r\n\t * @return Tomcat-friendly URL with strict URL escaping\r\n\t */\r\n\tpublic static String buildUrl(HttpUrl url) {\r\n\t\tURIBuilder builder = new URIBuilder();\r\n\t\tString scheme = url.scheme();\r\n\t\tbuilder.setScheme(scheme);\r\n\r\n\t\tStringBuilder userInfo = new StringBuilder();\r\n\t\tString username = url.username();\r\n\t\tString password = url.password();\r\n\t\tif (!username.isEmpty() || !password.isEmpty()) {\r\n\t\t\tuserInfo.append(username);\r\n\t\t\tif (!password.isEmpty()) {\r\n\t\t\t\tuserInfo.append(':');\r\n\t\t\t\tuserInfo.append(password);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (userInfo.length() != 0) {\r\n\t\t\tbuilder.setUserInfo(userInfo.toString());\r\n\t\t}\r\n\r\n\t\tbuilder.setHost(url.host());\r\n\t\tint port = url.port();\r\n\t\tif (port != HttpUrl.defaultPort(scheme)) {\r\n\t\t\tbuilder.setPort(port);\r\n\t\t}\r\n\r\n\t\tbuilder.setPath(Joiner.on('/').join(url.pathSegments()));\r\n\t\tfor (String name : url.queryParameterNames()) {\r\n\t\t\tfor (String value : url.queryParameterValues(name)) {\r\n\t\t\t\tbuilder.addParameter(name, value);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbuilder.setFragment(url.fragment());\r\n\r\n\t\treturn builder.toString();\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void testEscapingAsciiChars() throws URISyntaxException {\r\n\t\t// okhttp is forgiving when parsing\r\n\t\tString url = \"http://host/path/subpath?arg=%\" + hex;\r\n\t\tHttpUrl original = HttpUrl.parse(url);\r\n\r\n\t\t// encode using httpclient\r\n\t\tString httpClientUrl = buildUrl(original);\r\n\r\n\t\t// encode using okhttp\r\n\t\tBuilder builder = original.newBuilder();\r\n\t\tfor (String name : original.queryParameterNames()) {\r\n\t\t\tbuilder.removeAllQueryParameters(name);\r\n\t\t}\r\n\t\tfor (String name : original.queryParameterNames()) {\r\n\t\t\tfor (String value : original.queryParameterValues(name)) {\r\n\t\t\t\tbuilder.addQueryParameter(name, value);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tString okHttpUrl = builder.build().toString();\r\n\t\tAssert.assertEquals(\"HttpClient encoded as \\\"\" + httpClientUrl + \"\\\" but OkHttp encoded as \\\"\" + okHttpUrl + \"\\\"\", httpClientUrl,\r\n\t\t\t\tokHttpUrl);\r\n\r\n\t\t// make sure HttpClient can parse\r\n\t\tAssert.assertNotNull(new URIBuilder(httpClientUrl).toString());\r\n\t}\r\n}\r\n```",
        "Okay, just read this:\r\nhttp://stackoverflow.com/questions/2924160/is-it-valid-to-have-more-than-one-question-mark-in-a-url\r\n\r\n*wow*",
        "Yep. Here\u2019s my research.\r\nhttps://docs.google.com/spreadsheets/d/1BgGAhJ5WE3JBsATeudamiBzxmgEhwkfcFqQmPx8qrkc/edit?usp=sharing",
        "Thanks for sharing!\r\n\r\nI'm writing some code to output how different libraries handle this on the server side.  I'll share tomorrow.  Thanks again.",
        "@arakelian did your research on how libraries handle this find anything interesting?",
        "@swankjesse Work has been busy since I found the work around, so I haven't experimented beyond what I had the last day that I commented. We have a production release this week, but I intend to revisit this again, as I'm eager to understand how the different Java-side libraries handle this. Give me two weeks... Thanks.",
        "Sounds good.",
        "@arakelian I\u2019m gonna close this out \u2019cause it\u2019s not actionable in OkHttp. If you find out anything interesting about different libraries, I\u2019m curious.",
        "Guys, I'm f*cked hard by this issue...\r\nI'm using spring boot based backend and okhttp as tool for sending test requests.\r\nAnd I'm got\r\n```\r\njava.lang.IllegalArgumentException: Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986\r\n```\r\nthe problem char is `{`\r\nSpring Boot 1.5.6 uses Tomcat 8.5.16\r\n\r\nWhat the status/plans about this stuff?",
        "@Hronom you might be able to work-around with [this](https://github.com/spring-cloud/spring-cloud-netflix/issues/1800#issuecomment-288129648):\r\n`tomcat.util.http.parser.HttpParser.requestTargetAllow`\r\n\r\nI don\u2019t think OkHttp is to blame here. And I also think it\u2019s not safe to change OkHttp\u2019s behavior; I wrote about this [here](https://publicobject.com/2017/08/01/url-encoding-is-material/).",
        "I did some more research on this. As above, none of the major browsers replace `{` with `%7B` when a URL is entered into the address bar. But it _is_ escaped when submitted as a GET parameter in an HTML form like the following:\r\n\r\n```\r\n<form method=\"get\" action=\"http://localhost:8000/\">\r\n  <input type=\"text\" name=\"foo\">\r\n  <input type=\"submit\">\r\n</form>\r\n```\r\n\r\nI think it\u2019s my mistake that I interpreted browser behavior as \u201cdoes it re-encode this character in a URL\u201d and not \u201cdoes it encode this character in a form\u201d and for that I\u2019m sorry! I have convinced myself that `addQueryParameter()` should escape `{` etc., but `parse()` should continue to preserve the passed-in encoding.\r\n\r\n@arakelian, @Hronom thanks for pushing me on this and I\u2019m sorry it took me so long to come around on it.",
        "@swankjesse it would be good to have some of these principles documented somewhere.  It matches my thinking for how I expect OkHttp to work, generally acting like a user agent instead of a networking toolkit like Netty.",
        "@arakelian : This solved my problem. Thanks so much. :+1: ",
        "In a `<form>` Chrome seems to percent-encode everything but numbers, letters, and `*-._`. Should `addQueryParameter()` do the same? What about `addEncodedQueryParameter()`?",
        "@swankjesse Thank you for the changes."
    ],
    "595": [],
    "2324": [],
    "3331": [],
    "1498": [],
    "554": [],
    "3245": [
        "Executable test case to reproduce the problem?",
        "Seeing the same exact crash for a handful of users, mostly on Samsung S7 line devices. Unfortunately I'm unable to reproduce and due to the stacktrace, not even sure where it's coming from on my side. I'll let you know if I'm able to reproduce or find the origin.",
        "I think you probably want to report this to Samsung. It\u2019s likely an issue with that device that you\u2019ll probably see on any HTTP client.",
        "![2017-04-06 11-47-04](https://cloud.githubusercontent.com/assets/3746993/24737132/01c2043e-1abf-11e7-9e9a-7dad73ccd415.png)\r\n\r\ntracking this bug a week(about 2,004 user crash), most crash at huawei phone,other is samsung,xiaomi , all in android 7.0 .",
        "FYI @15characterlimi ",
        "No action for us to take on this.",
        "This is a known bug in Android 7.0; it was fixed by this change which went into Android 7.1:\r\n\r\n   https://android-review.googlesource.com/#/c/271775/\r\n\r\nI'm very sorry that we found it too late for Android 7.0 and that you ran into it.\r\n\r\nThe issue is that Android 7.0's PrivilegedActionException.getException() returns null, so places that do:\r\n\r\n   throw privilegedActionException.getException() \r\n\r\nwill attempt to throw a null value. There are 19 such places in Android N; sadly, this is one of them. :-(  I plan to take appropriate measures to make vendors aware of this issue and the patch.",
        "PS. I should add that the NullPointerException from this Android bug masks some other Exception that would normally be thrown at affected places in the code. In the particular example of Socket, in cases where Socket.getInputStream() or getOutputStream() *should* throw IOException but the socket was still open at the start of that method being called, then the IOException will be swallowed and replaced by the NullPointerException that you have observed. :(\r\n",
        "We could fix the callsite to catch NPE and rethrow an IOException. Lemme see what that looks like.",
        "thanks.",
        "Such a workaround could work, but should probably be specific to the kind of \"throw with null exception\" kind of NPE. Let me know how you go / whether you need help.",
        "@15characterlimi  i send email to developer@huawei.com report this bug. i think under ideal conditions this exception case by some rom, unnecessary throw null exception. "
    ],
    "4461": [],
    "3252": [
        "Interesting, I\u2019ll take a look.\r\n\r\nI\u2019m pretty reluctant to send anyway after waiting for some period. That invites potential race conditions, and I\u2019m (naively) only expecting OkHttp\u2019s users to use `Expect: 100-continue` when they are confident the server will accept it.",
        "I agree, the last part of the issue is not that important and can be ignored."
    ],
    "1364": [],
    "3261": [
        "Appreciated for your quick reply!"
    ],
    "3230": [],
    "2602": [],
    "160": [],
    "1495": [],
    "343": [],
    "1586": [],
    "1284": [],
    "884": [],
    "2708": [],
    "4678": [],
    "2253": [],
    "4377": [],
    "1187": [],
    "2036": [],
    "3308": [
        "The exception is only in the newest app version. \r\n\r\nThe last one had okhttp 3.6.0 with an older proguard config:\r\n`-dontwarn okio.** \r\n-dontwarn okhttp3.**\r\n-dontwarn com.squareup.okhttp.**\r\n-dontwarn retrofit2.**\r\n-keepattributes Signature\r\n-keepattributes Exceptions\r\n-keep class retrofit2.** { *; }\r\n-keep class com.myownpackage.models.** { *; }\r\n-keepclassmembernames interface * {\r\n    @retrofit2.http.* <methods>;\r\n}`\r\n\r\nnew proguard:\r\n`-dontwarn okio.**\r\n-dontnote retrofit2.Platform\r\n-dontwarn retrofit2.Platform$Java8\r\n-keepattributes Signature\r\n-keepattributes Exceptions\r\n-keep class com.myownpackage.models.** { *; }`",
        "Could you provide an executable test case?",
        "It\u2019s possible that the `Dns` is returning an empty list of IP addresses rather than throwing. That\u2019s not to spec but it\u2019s something we could report in a more obvious way.",
        "I get the same error.\r\n\r\nOkHttp: 3.7.0 method: GET\r\n\r\ndevice: samsung galaxy note3, android 5.0\r\n\r\n> java.util.NoSuchElementException\r\n\tat okhttp3.internal.connection.RouteSelector.next(RouteSelector.java:77)\r\n\tat okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:171)\r\n\tat okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:121)\r\n\tat okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:100)\r\n\tat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n\tat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n\tat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n\tat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:120)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n\tat com.readystatesoftware.chuck.ChuckInterceptor.intercept(ChuckInterceptor.java:172)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n\tat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:185)\r\n\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:135)\r\n\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\r\n\tat java.lang.Thread.run(Thread.java:818)",
        "happen again (another request, different url)...\r\n\r\nOkHttp: 3.7.0 method: POST \r\n\r\ndevice: samsung galaxy note3, android 5.0",
        "@su1216 has this happened with okhttp 3.6.0 also? can you share your proguard settings?",
        "Ok, I've reverted to version 3.6.0 and updated the app. 4% have already updated and there's no NoSuchElementException. Something's broken in version 3.7.0.",
        "This has been reported for DAVdroid (with okhttp/3.7.0) too, when it did a `PROPFIND` request:\r\n\r\n```\r\njava.util.NoSuchElementException\r\n        at okhttp3.internal.connection.RouteSelector.next(RouteSelector.java:77)\r\n        at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:171)\r\n        at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:121)\r\n        at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:100)\r\n        at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\r\n        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n        at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\r\n        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n        at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\r\n        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n        at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:120)\r\n        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n        at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:185)\r\n        at okhttp3.RealCall.execute(RealCall.java:69)\r\n        at at.bitfire.dav4android.DavResource.propfind(DavResource.java:276)\r\n```\r\n\r\nIt didn't occur with DAVdroid versions which still use okhttp/3.6.0.\r\n\r\nProGuard settings: https://gitlab.com/bitfireAT/davdroid/blob/370367724c494990f56ae0f38132520a31dd2992/app/proguard-rules.txt",
        "@Jeff11 no proguard in my project. I just use okhttp v3.7.0 instead of volley... ",
        "I added checks to confirm that the DNS is returning results here:\r\nhttps://github.com/square/okhttp/pull/3316",
        "Still occurs with 3.8.0:\r\n\r\n```\r\njava.util.NoSuchElementException\r\n\tat okhttp3.internal.connection.RouteSelector.next(RouteSelector.java:78)\r\n\tat okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:171)\r\n\tat okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:121)\r\n\tat okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:100)\r\n\tat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n\tat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n\tat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n\tat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:120)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n\tat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:185)\r\n\tat okhttp3.RealCall.execute(RealCall.java:69)\r\n\tat at.bitfire.dav4android.DavResource.propfind(DavResource.java:276)\r\n\u2026\r\n```",
        "I have also met this issue.\r\n\r\n[issue_28_crash_5923A8F6019E00016BB942F3F58072BE_f688b3543f6511e7b6dd56847afe9799_0_v2.txt](https://github.com/square/okhttp/files/1021286/issue_28_crash_5923A8F6019E00016BB942F3F58072BE_f688b3543f6511e7b6dd56847afe9799_0_v2.txt)\r\n",
        "Is there a known way to work around this problem?",
        "If you could help to reproduce it, that's the first step.",
        "@swankjesse Is it possible to get a 3.8.1 release with the potential fix?",
        "I have also met this issue okhttp3.8.0 and 3.6.0",
        "Hi @swankjesse,\r\nWe also got the crash the other day. I try to share some context that may help the investigation.\r\nWe enabled HTTP2 on our domains. We did not change anything on client side. The Android app started crashing, the iOS handled the traffic well. Once we reverted back to HTTP1.1, the crash disappeared. \r\nWe use multiple OkHttp clients in the app and only one of them was crashing. The only difference I found was that retryOnConnectionFailure was set to false on this client.\r\nBased on these symptoms, we suspect that the crash may be related to HTTP2 connection coalescing. Wdyt?\r\nI hope this helps. Let me know if you need any more information.\r\n",
        "@swankjesse\r\nI think because I save it to the array and clear ( cancelAll () )  the whole array when I exit the screen.\r\n\r\n```\r\n\r\npublic class StreetViewWebService extends WebServiceBase {\r\n\r\n    private int size = 0;\r\n    private int threshold = 0;\r\n\r\n    private static final String TAG = StreetViewWebService.class.getSimpleName();\r\n\r\n    OkHttpClient client;\r\n\r\n    private Context context;\r\n\r\n    HashMap<Integer, retrofit2.Call<ResponseBody>> calls;\r\n\r\n    StreetViewInterface mService;\r\n\r\n    public StreetViewWebService(Context context) {\r\n        client = new OkHttpClient();\r\n        size = context.getResources().getInteger(R.integer.probe_default_size);\r\n        threshold = context.getResources().getInteger(R.integer.availability_threshold);\r\n        this.context = context;\r\n        calls = new HashMap<>();\r\n        mService = new Retrofit.Builder()\r\n                .baseUrl(getApplicationWebserviceURL())\r\n                .build()\r\n                .create(StreetViewInterface.class);\r\n    }\r\n\r\n    public synchronized void probe(final Integer AdId, final double lat, final double lon, final OnStreetViewStatusListener listener) {\r\n        if (AdId == null) return;\r\n        String path = context.getResources().getString(R.string.probe_path, size, lat, lon);\r\n        retrofit2.Call<ResponseBody> call =\r\n                mService.streetView(path);\r\n        calls.put(AdId, call);\r\n        call.enqueue(new retrofit2.Callback<ResponseBody>() {\r\n            @Override\r\n            public void onResponse(retrofit2.Call<ResponseBody> call, Response<ResponseBody> response) {\r\n                if (listener != null) {\r\n                    if (response.body() != null) {\r\n                        listener.onStreetViewStatus(response.body().contentLength() > threshold ? Status.AVAILABLE : Status.UNAVAILABLE);\r\n                    } else {\r\n                        listener.onStreetViewStatus(Status.UNKNOWN);\r\n                    }\r\n                }\r\n                cancelStreetView(AdId);\r\n                Log.d(TAG,\"onResponse\");\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(retrofit2.Call<ResponseBody> call, Throwable t) {\r\n                if (listener != null) {\r\n                    listener.onStreetViewStatus(Status.UNKNOWN);\r\n                }\r\n                cancelStreetView(AdId);\r\n                Log.d(TAG,\"onFailure\");\r\n            }\r\n        });\r\n    }\r\n\r\n    @IntDef({Status.UNKNOWN, Status.AVAILABLE, Status.UNAVAILABLE})\r\n    @Retention(RetentionPolicy.SOURCE)\r\n    public @interface Status {\r\n        int UNKNOWN = 0;\r\n        int AVAILABLE = 1;\r\n        int UNAVAILABLE = 2;\r\n    }\r\n\r\n    public interface OnStreetViewStatusListener {\r\n        void onStreetViewStatus(@Status int status);\r\n    }\r\n\r\n    public synchronized void cancelStreetView(Integer AdId) {\r\n        if (AdId == null) return;\r\n        if (calls.containsKey(AdId)) {\r\n            if (!calls.get(AdId).isCanceled()) {\r\n                calls.get(AdId).cancel();\r\n                calls.remove(AdId);\r\n            }\r\n        }\r\n    }\r\n\r\npublic void cancelAll() {\r\n        if (calls != null) {\r\n            calls.clear();\r\n        }\r\n    }\r\n}\r\n```",
        "Fix released as OkHttp 3.8.1.",
        "ok",
        "Still happening on 3.9.0.\r\n\r\nJust recently updated to latest version and observed spike in Fabric. Sorry can't provide reproducible steps but it is happening in the wild! \r\n\r\nThis combination is failing:\r\n> compile 'com.squareup.okio:okio:1.13.0'\r\n> compile 'com.squareup.okhttp3:okhttp:3.9.0'\r\n",
        "Could you provide a stack trace?",
        "@dave-r12 here is the stack trace:\r\n\r\nFatal Exception: java.util.NoSuchElementException\r\n       at okhttp3.internal.connection.RouteSelector.next(RouteSelector.java:77)\r\n       at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:171)\r\n       at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:121)\r\n       at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:100)\r\n       at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:120)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at this-is-our-custom-interceptor-class.intercept(Unknown Source)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:185)\r\n       at okhttp3.RealCall.execute(RealCall.java:69)",
        "Thanks @mohammad-haque. Looks like you might still be on 3.8 or 3.8.1? I checked line StreamAllocation:171.\r\n\r\nHere's 3.8.1: https://github.com/square/okhttp/blob/parent-3.8.1/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java#L171\r\n\r\nHere's 3.9.0: https://github.com/square/okhttp/blob/parent-3.9.0/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java#L171\r\n\r\nCan you double check to see if you're pulling in 3.9.0?",
        "Thanks @dave-r12. It turns out to be the case, somehow build was not pulling 3.9.0. I will provide feedback after testing with 3.9.0. Thank you once again.  ",
        "java.util.NoSuchElementException\r\n\tat okhttp3.internal.connection.RouteSelector.next(RouteSelector.java:78)\r\n\tat okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:171)\r\n\tat okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:121)\r\n\tat okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:100)\r\n\tat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n\tat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n\tat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n\tat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:120)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n\tat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:185)\r\n\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:135)\r\n\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1076)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:569)\r\n\tat java.lang.Thread.run(Thread.java:856)",
        "We have this issue. Last weeks its started get more. We can't reproduce it. Please help!\r\nHere is our error log;\r\n\r\n# Date: 2018-02-07T12:12:00Z\r\n# OS Version: 7.0\r\n# Device: Galaxy Note5\r\n# RAM Free: 33.3%\r\n# Disk Free: 12.7%\r\n\r\n0. Crashed: OkHttp Dispatcher\r\n       at okhttp3.internal.connection.RouteSelector.next(RouteSelector.java:78)\r\n       at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:171)\r\n       at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:121)\r\n       at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:100)\r\n       at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:120)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:185)\r\n       at okhttp3.RealCall$AsyncCall.execute(RealCall.java:135)\r\n       at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)\r\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)\r\n       at java.lang.Thread.run(Thread.java:762)\r\n\r\n--\r\n\r\nFatal Exception: java.util.NoSuchElementException\r\n       at okhttp3.internal.connection.RouteSelector.next(RouteSelector.java:78)\r\n       at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:171)\r\n       at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:121)\r\n       at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:100)\r\n       at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:120)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:185)\r\n       at okhttp3.RealCall$AsyncCall.execute(RealCall.java:135)\r\n       at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)\r\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)\r\n       at java.lang.Thread.run(Thread.java:762)\r\n\r\n\r\n",
        "Getting Fabric crash reports on this as well after updating to 3.9.0 with Retrofit 2.3.0.  OS Version 7.0\r\n\r\nFatal Exception: java.util.NoSuchElementException\r\n       at okhttp3.internal.connection.RouteSelector.next(RouteSelector.java:78)\r\n       at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:171)\r\n       at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:121)\r\n       at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:100)\r\n       at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:120)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:185)\r\n       at okhttp3.RealCall$AsyncCall.execute(RealCall.java:135)\r\n       at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)\r\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)\r\n       at java.lang.Thread.run(Thread.java:761)\r\n",
        "@muhammadzadeh @dumanOktay @jamescahall those stack traces indicate you're still using OkHttp 3.8 (or earlier.) You should double check your version and upgrade if you can.",
        "I have the version set in gradle to 3.9.0 and got the stack trace above.",
        "@jamescahall hmm ok, weird. Neither of those lines (StreamAllocation.java:171 or RouteSelector.java:78) have executable code in versions 3.9.0 and above that I can see. If you can provide any other information, that'd be helpful.",
        "I have no other information than what was provided from Fabric which others have shared above as well.  Maybe check to see that the repos for gradle are getting the correct code based upon the version.",
        "same problem, with **retrofit:2.4.0** and **okhttp 3.10.0**\r\n\r\n\r\n`Fatal Exception: java.util.NoSuchElementException\r\n       at okhttp3.internal.connection.RouteSelector.next(RouteSelector.java:78)\r\n       at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:171)\r\n       at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:121)\r\n       at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:100)\r\n       at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:120)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at com.justdo.logic.network.RestClient$1.intercept(RestClient.java:60)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:185)\r\n       at okhttp3.RealCall$AsyncCall.execute(RealCall.java:135)\r\n       at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)\r\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)\r\n       at java.lang.Thread.run(Thread.java:818)`",
        "Hi @vasiledoe. That stack trace doesn't line up with **okhttp 3.10.0**. Looks like you might be using 3.8.0 or 3.8.1. Can you confirm?",
        "hi @dave-r12 I still have this issue in **3.10.0**\r\n\r\nat okhttp3.internal.connection.RouteSelector.next (RouteSelector.java:78)\r\nat okhttp3.internal.connection.StreamAllocation.findConnection (StreamAllocation.java:171)\r\nat okhttp3.internal.connection.StreamAllocation.findHealthyConnection (StreamAllocation.java:121)\r\nat okhttp3.internal.connection.StreamAllocation.newStream (StreamAllocation.java:100)\r\nat okhttp3.internal.connection.ConnectInterceptor.intercept (ConnectInterceptor.java:42)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed (RealInterceptorChain.java:92)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed (RealInterceptorChain.java:67)\r\nat okhttp3.internal.cache.CacheInterceptor.intercept (CacheInterceptor.java:93)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed (RealInterceptorChain.java:92)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed (RealInterceptorChain.java:67)\r\nat okhttp3.internal.http.BridgeInterceptor.intercept (BridgeInterceptor.java:93)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed (RealInterceptorChain.java:92)\r\nat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept (RetryAndFollowUpInterceptor.java:120)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed (RealInterceptorChain.java:92)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed (RealInterceptorChain.java:67)\r\nat com.tamoco.sdk.GzipInterceptor.intercept (SourceFile:44)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed (RealInterceptorChain.java:92)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed (RealInterceptorChain.java:67)\r\nat com.tamoco.sdk.ApiHeaderInterceptor.intercept (SourceFile:55)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed (RealInterceptorChain.java:92)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed (RealInterceptorChain.java:67)\r\nat okhttp3.RealCall.getResponseWithInterceptorChain (RealCall.java:185)\r\nat okhttp3.RealCall.execute (RealCall.java:69)\r\nat retrofit2.OkHttpCall.execute (OkHttpCall.java:180)\r\n",
        "@dave-r12 as I mentioned,  stack trace is from **okhttp 3.10.0**",
        "@vasiledoe I wanted to confirm my own sanity so I pulled down **okhttp 3.10.0** from Maven central and used `javap` to inspect the bytecode. As expected, that exception is happening on line 75 not line 78:\r\n\r\n```\r\n  public okhttp3.internal.connection.RouteSelector$Selection next() throws java.io.IOException;\r\n    flags: ACC_PUBLIC\r\n    LineNumberTable:\r\n      line 74: 0\r\n      line 75: 7\r\n      line 79: 15\r\n      line 80: 23\r\n...\r\n    Code:\r\n      stack=6, locals=6, args_size=1\r\n         0: aload_0       \r\n         1: invokevirtual #17                 // Method hasNext:()Z\r\n         4: ifne          15\r\n         7: new           #18                 // class java/util/NoSuchElementException\r\n        10: dup           \r\n        11: invokespecial #19                 // Method java/util/NoSuchElementException.\"<init>\":()V\r\n        14: athrow        \r\n```\r\n\r\nI did the same thing with **okhttp 3.8.1**. As expected, the exception is happening on line 78 (same as your stack trace):\r\n\r\n```\r\n  public okhttp3.Route next() throws java.io.IOException;\r\n    flags: ACC_PUBLIC\r\n    LineNumberTable:\r\n      line 75: 0\r\n      line 76: 7\r\n      line 77: 14\r\n      line 78: 21\r\n...\r\n    Code:\r\n      stack=5, locals=2, args_size=1\r\n         0: aload_0       \r\n         1: invokespecial #13                 // Method hasNextInetSocketAddress:()Z\r\n         4: ifne          42\r\n         7: aload_0       \r\n         8: invokespecial #14                 // Method hasNextProxy:()Z\r\n        11: ifne          34\r\n        14: aload_0       \r\n        15: invokespecial #15                 // Method hasNextPostponed:()Z\r\n        18: ifne          29\r\n        21: new           #16                 // class java/util/NoSuchElementException\r\n        24: dup           \r\n        25: invokespecial #17                 // Method java/util/NoSuchElementException.\"<init>\":()V\r\n        28: athrow        \r\n```\r\n\r\nIf you are using okhttp 3.10.0, I'm not sure how you seem to be getting a stack trace for okhttp 3.8.1. I'm really hoping this is not something new we have to contend with!\r\n\r\nIs it possible for you to output the value of `okhttp3.internal.Version.userAgent()`?",
        "@dave-r12 \r\n\r\n`okhttp3.internal.Version.userAgent()`\r\ni'm using \"okhttp/3.10.0\"",
        "@JulienGenoud I'm at a loss. The stack trace you provided aligns with version 3.8 or 3.8.1 not 3.10.0. So it seems like either: the tool you're using to obtain the stack trace has a bug of some kind or you're somehow using 3.10 for development/test but shipping with 3.8/3.8.1.\r\n\r\nIf you can get us a concrete, executable example/test then maybe we can try to troubleshoot that. Otherwise I feel like I'm  flying blind here!",
        "I'm still getting this quite often in Fabric Crashlytics reports.  I confirmed 3.9.0 with okhttp3.internal.Version.userAgent() and seeing crash on line 78.  Why hasn't this been resolved after 5 more months?",
        "@jamescahall if you could open a new issue with an executable test case that reproduces the problem, we can probably fix it in fewer than 5 months!",
        "The issue only occurs in 0.005% of requests or less.  We see 20-30 crashes on 500,000 requests daily.  Isn't it possible to investigate what kind of scenario would lead to this crash and make adjustments that way?",
        "Can you send a stacktrace for a recent one? The stacktrace pasted above has line numbers that don\u2019t match up.\r\n\r\nAlso \u2013 please open a new issue? ",
        "The stack trace is the same as shown above with the error on line 78.  The issue should be re-opened as it isn't fixed.  A number of developers have reported the exact same issue with line numbers not matching what you are saying while showing the app is running the latest version in logging.  I don't see what else we can provide.\r\n\r\n\r\nokhttp3.internal.connection.RouteSelector.next\u00a0(RouteSelector.java:78)\r\n--\r\n\u00a0 | okhttp3.internal.connection.StreamAllocation.findConnection\u00a0(StreamAllocation.java:171)\r\n\u00a0 | okhttp3.internal.connection.StreamAllocation.findHealthyConnection\u00a0(StreamAllocation.java:121)\r\n\u00a0 | okhttp3.internal.connection.StreamAllocation.newStream\u00a0(StreamAllocation.java:100)\r\n\u00a0 | okhttp3.internal.connection.ConnectInterceptor.intercept\u00a0(ConnectInterceptor.java:42)\r\n\u00a0 | okhttp3.internal.http.RealInterceptorChain.proceed\u00a0(RealInterceptorChain.java:92)\r\n\u00a0 | okhttp3.internal.http.RealInterceptorChain.proceed\u00a0(RealInterceptorChain.java:67)\r\n\u00a0 | okhttp3.internal.cache.CacheInterceptor.intercept\u00a0(CacheInterceptor.java:93)\r\n\u00a0 | okhttp3.internal.http.RealInterceptorChain.proceed\u00a0(RealInterceptorChain.java:92)\r\n\u00a0 | okhttp3.internal.http.RealInterceptorChain.proceed\u00a0(RealInterceptorChain.java:67)\r\n\u00a0 | okhttp3.internal.http.BridgeInterceptor.intercept\u00a0(BridgeInterceptor.java:93)\r\n\u00a0 | okhttp3.internal.http.RealInterceptorChain.proceed\u00a0(RealInterceptorChain.java:92)\r\n\u00a0 | okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept\u00a0(RetryAndFollowUpInterceptor.java:120)\r\n\u00a0 | okhttp3.internal.http.RealInterceptorChain.proceed\u00a0(RealInterceptorChain.java:92)\r\n\u00a0 | okhttp3.internal.http.RealInterceptorChain.proceed\u00a0(RealInterceptorChain.java:67)\r\n\u00a0 | okhttp3.RealCall.getResponseWithInterceptorChain\u00a0(RealCall.java:185)\r\n\u00a0 | okhttp3.RealCall$AsyncCall.execute\u00a0(RealCall.java:135)\r\n\u00a0 | okhttp3.internal.NamedRunnable.run\u00a0(NamedRunnable.java:32)\r\n\u00a0 | java.util.concurrent.ThreadPoolExecutor.runWorker\u00a0(ThreadPoolExecutor.java:1133)\r\n\u00a0 | java.lang.Thread.run\u00a0(Thread.java:761)\r\n\r\n",
        "Fixed in OkHttp 3.12.",
        "I got the same exception after upgrading to 3.14.The stacktrace is as follows:\r\njava.util.NoSuchElementException\r\n\tat okhttp3.internal.connection.RouteSelector.next(RouteSelector.java:75)\r\n\tat okhttp3.internal.connection.ExchangeFinder.findConnection(ExchangeFinder.java:187)\r\n\tat okhttp3.internal.connection.ExchangeFinder.findHealthyConnection(ExchangeFinder.java:107)\r\n\tat okhttp3.internal.connection.ExchangeFinder.find(ExchangeFinder.java:87)\r\n\tat okhttp3.internal.connection.Transmitter.newExchange(Transmitter.java:162)\r\n\tat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:41)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:142)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:117)\r\n\tat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:94)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:142)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:117)\r\n\tat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:142)\r\n\tat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:88)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:142)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:117)\r\n\tat com.baidu.duer.glide.DuerAppGlideModule$ImageLoaderIntercept.intercept(DuerAppGlideModule.java:72)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:142)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:117)\r\n\tat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:221)\r\n\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:172)\r\n\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1162)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:636)\r\n\tat java.lang.Thread.run(Thread.java:764)",
        "same problem on version 3.14.2",
        "```\r\nFatal Exception: java.util.NoSuchElementException\r\n       at okhttp3.internal.connection.RouteSelector.next + 75(RouteSelector.java:75)\r\n       at okhttp3.internal.connection.ExchangeFinder.findConnection + 187(ExchangeFinder.java:187)\r\n       at okhttp3.internal.connection.ExchangeFinder.findHealthyConnection + 108(ExchangeFinder.java:108)\r\n       at okhttp3.internal.connection.ExchangeFinder.find + 88(ExchangeFinder.java:88)\r\n       at okhttp3.internal.connection.Transmitter.newExchange + 169(Transmitter.java:169)\r\n       at okhttp3.internal.connection.ConnectInterceptor.intercept + 41(ConnectInterceptor.java:41)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed + 142(RealInterceptorChain.java:142)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed + 117(RealInterceptorChain.java:117)\r\n       at okhttp3.internal.cache.CacheInterceptor.intercept + 94(CacheInterceptor.java:94)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed + 142(RealInterceptorChain.java:142)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed + 117(RealInterceptorChain.java:117)\r\n       at okhttp3.internal.http.BridgeInterceptor.intercept + 93(BridgeInterceptor.java:93)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed + 142(RealInterceptorChain.java:142)\r\n       at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept + 88(RetryAndFollowUpInterceptor.java:88)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed + 142(RealInterceptorChain.java:142)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed + 117(RealInterceptorChain.java:117)\r\n       at applicationId.network.RetrofitApiManager.lambda$getClient$1 + 45(RetrofitApiManager.java:45)\r\n       at [applicationId.network.-$$Lambda$RetrofitApiManager$T8u62N07bPZuTSKTMwG8MsiSwAU.intercept(Unknown Source)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed + 142(RealInterceptorChain.java:142)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed + 117(RealInterceptorChain.java:117)\r\n       at okhttp3.logging.HttpLoggingInterceptor.intercept + 223(HttpLoggingInterceptor.java:223)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed + 142(RealInterceptorChain.java:142)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed + 117(RealInterceptorChain.java:117)\r\n       at okhttp3.RealCall.getResponseWithInterceptorChain + 221(RealCall.java:221)\r\n       at okhttp3.RealCall$AsyncCall.execute + 172(RealCall.java:172)\r\n       at okhttp3.internal.NamedRunnable.run + 32(NamedRunnable.java:32)\r\n       at java.util.concurrent.ThreadPoolExecutor.runWorker + 1167(ThreadPoolExecutor.java:1167)\r\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run + 641(ThreadPoolExecutor.java:641)\r\n       at java.lang.Thread.run + 764(Thread.java:764)](url)\r\n```\r\n\r\nversion 3.14.2",
        "I'm facing the problem in version 4.0.1 as well. It doesn't seem to happen that often, but I have users reporting it.\r\n\r\n`java.util.NoSuchElementException\r\nat okhttp3.internal.connection.RouteSelector.next(RouteSelector.java:63)\r\nat okhttp3.internal.connection.ExchangeFinder.findConnection(ExchangeFinder.java:199)\r\nat okhttp3.internal.connection.ExchangeFinder.findHealthyConnection(ExchangeFinder.java:109)\r\nat okhttp3.internal.connection.ExchangeFinder.find(ExchangeFinder.java:77)\r\nat okhttp3.internal.connection.Transmitter.newExchange$okhttp(Transmitter.java:162)\r\nat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:35)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:112)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:87)\r\nat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:82)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:112)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:87)\r\nat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:84)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:112)\r\nat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:71)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:112)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:87)\r\nat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:184)\r\nat okhttp3.RealCall.run(RealCall.java:11)\r\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1162)\r\nat java.util.concurrent.ThreadPoolExecutor.run(ThreadPoolExecutor.java:636)\r\nat java.lang.Thread.run(Thread.java:764)`\r\n\r\nI have a NetworkInterceptor which removes a header from requests and proceedes in the chain and a custom DNS class which returns known addresses for the host, delegates to SYSTEM if this list is empty and lastly throws an `UnknownHostException` if the list is still empty. ConnectTimeout is at 5000ms, my best guess would be that the connection times out sometimes and there is no more route to take? (Most servers I use only have one IPv4 address and - if even that - 1 IPv6 address)",
        "@Ch4t4r please upgrade to OkHttp 4.0.1 to see if that fixes the issue for you.",
        "I'm already on 4.0.1. If it helps, I could reproduce the crash on stock Android 8.0 in an IPv4 only network where the target server only has one address. It's always the same url getting requested, albeit with different request bodies. Crash happened after over 1000 requests. ",
        "@Ch4t4r ah, the `.java` in the stacktrace distracted me, but the line numbers are right for Kotlin. ",
        "@swankjesse Yeah, I believe this is because I deobfuscated the trace. The app is obfuscated with R8 but I'm using the provided rules so that shouldn't be a factor here. \r\n\r\nIf wanted I can share relevant code passages here, but as mentioned previously I'm not doing anything too crazy. ",
        "As this occurs in production I can't debug the crash, but as it is happening after a lot of requests I believe that `ExchangeFinder` doesn't believe the connection to be healty anymore (stream failures and connect timeouts tend to happen with over 1000 requests), tries to retrieve a new route from `RouteSelector` which then fails because all routes have been exhausted (as I said most servers only have one IP-Address and I use no proxy). Maybe because `retryCurrentRoute` returns false after some time in `ExchangeFinder`?\r\nI use a connect timeout of 5000ms, there can be multiple connection to the same URL at the same time.\r\nI'm aware that this is some sort of edge case but as the purpose of the app is to run as long as possible thousands of requests to the same url are inevitable.",
        "@Ch4t4r 5000ms means 5 seconds - it might be not enough for some busy server + low latency connection",
        "@vasiledoe sure, but where would you draw the line? I could of course increase this timeout but to me it feels like it wouldn't fix the underlying problem -- it could still fail with 15 seconds or even more. ",
        "We were able to nail down an instance of this in both 4.0.1 and 3.14.2 with an executable test case. A fix was put it for the next release.",
        "Yeah I saw that, thank you very much! I'll just have to wait for 4.1 then. Right now I'm using a workaround by returning the IP addresses a server has 40 times which obviously isn't very pretty - but it does the job. ",
        "I believe fixed with #5325 released in 4.1. Please give it a try!",
        "Haven't seen this crash for some time now. Great Job \ud83d\udc4d",
        "Bad news, guys. I've just got this crash on okhttp v4.4.0 (on Android).",
        "@soshial have you got a fresh stack trace?",
        "Sure!\r\n<img width=\"1100\" alt=\"image\" src=\"https://user-images.githubusercontent.com/100644/76306840-4b0bb700-62d0-11ea-9a3f-64909d0415e7.png\">\r\n",
        "Got it too with v4.4.0. See if this can help.\r\n\r\n`Fatal Exception: java.util.NoSuchElementException\r\n       at okhttp3.internal.connection.RouteSelector.next(RouteSelector.kt:63)\r\n       at okhttp3.internal.connection.ExchangeFinder.findConnection(ExchangeFinder.kt:197)\r\n       at okhttp3.internal.connection.ExchangeFinder.findHealthyConnection(ExchangeFinder.kt:107)\r\n       at okhttp3.internal.connection.ExchangeFinder.find(ExchangeFinder.kt:75)\r\n       at okhttp3.internal.connection.RealCall.initExchange$okhttp(RealCall.kt:245)\r\n       at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.kt:32)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:100)\r\n       at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.kt:82)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:100)\r\n       at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.kt:83)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:100)\r\n       at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.kt:74)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:100)\r\n       at cash.sherwood.clients.SherwoodApi$Factory$create$1.intercept(SherwoodApi.kt:257)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:100)\r\n       at okhttp3.internal.connection.RealCall.getResponseWithInterceptorChain$okhttp(RealCall.kt:197)\r\n       at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:502)\r\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)\r\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)\r\n       at java.lang.Thread.run(Thread.java:764)`"
    ],
    "2136": [],
    "909": [],
    "2319": [],
    "3324": [],
    "3325": [
        "@swankjesse Please take a look at this.",
        "@Egorand Is this going to be a PR?",
        "@ycai2 it's been merged already: https://github.com/square/okhttp/pull/3353\r\nThe fix is available in 3.9.0-SNAPSHOT, could you please verify that it fixes the issue for you?"
    ],
    "3841": [],
    "3341": [],
    "388": [],
    "1018": [],
    "1971": [],
    "1868": [],
    "2024": [],
    "470": [],
    "2390": [],
    "1064": [],
    "3365": [
        "I meet this issue too. Please help fix this. Thanks"
    ],
    "322": [],
    "1995": [],
    "3383": [
        "We could throw an IllegalStateException instead. Applications shouldn't ever attempt to close the response returned from a `cacheResponse()` or `networkResponse()`.",
        "Not sure to understand\r\n\r\nFrom code https://github.com/square/okhttp/blob/c70e35802e984e8b9bf3fbf1479deb37c0bdfa43/okhttp/src/main/java/okhttp3/Response.java#L274\r\n\r\nResponse.close() correctly only deals with body (ResponseBody) and does not touch the others.\r\n\r\nFinally maybe I'm wrong but in the end just adding a body != null check sound like the proper handling as there's no real error to manage in fact, a Closeable should not NPE on close.",
        "It's an error to attempt to close a response that doesn't have a body.",
        "> It's an error to attempt to close a response that doesn't have a body.\r\n\r\n@swankjesse how strongly do you hold this opinion? If this were not an error condition, then users could use `Response` in a try-with-resources statement in scenarios where the body is not considered. Take this example which checks for a successful status code and ignores the body\r\n\r\n```java\r\nResponse response = null;\r\ntry {\r\n  response = client.newCall(request).execute();\r\n  if (!response.isSuccessful()) {\r\n    throw new IllegalStateException(\"HTTP server returned error code \" + response.code());\r\n  }\r\n} finally {\r\n  if (response != null && response.body() != null) {\r\n    response.close();\r\n  }\r\n}\r\n```\r\n\r\nIf this code didn't need to first check `response.body != null` to avoid an error condition, then we could get rid of boilerplate with a try-with-resources statement.\r\n\r\n```java\r\ntry(Response response = client.newCall(request).execute()) {\r\n  if (!response.isSuccessful()) {\r\n    throw new IllegalStateException(\"HTTP server returned error code \" + response.code());\r\n  }\r\n}\r\n```",
        "Your example above is safe. You have to try hard to get a response without a body \u2013 it\u2019s the response used by `Response.networkResponse()` or `Response.cacheResponse()`.",
        "Cool, that helps. I was running into trouble in a unit test where I was building a `Response` myself and I omitted the body e.g.\r\n\r\n```java\r\n    final Response response =\r\n        new Response.Builder()\r\n            .request(success.request())\r\n            .protocol(Protocol.HTTP_1_1)\r\n            .message(\"OK\")\r\n            .code(204)\r\n            .build();\r\n```\r\n\r\nbut I can fix this by adding an empty body to the builder chain and remain confident that for my use case responses should always have a non-null body.\r\n\r\n```java\r\n.body(EMPTY_RESPONSE)\r\n```\r\n\r\nthanks!"
    ],
    "3386": [
        "You must call either close or cancel on every WebSocket you create. We should add this to our documentation."
    ],
    "3868": [],
    "102": [],
    "3550": [],
    "3395": [
        "Failing test?",
        "Looking further, this is a problem with how the logging interceptor should behave when the protocol version is unknown? Yeah, we can fix this."
    ],
    "2637": [],
    "3404": [
        "Can fix.",
        "@swankjesse any thoughts on action to take in this scenario? Re-throw the exception? I can grab this one if you like.",
        "@dave-r12 we\u2019re in a tough spot. We can\u2019t throw a checked exception and it is user-hostile to throw an unchecked exception. Without loading the file we don\u2019t know what the domain is, and so we can\u2019t parse the cookie correctly.\r\n\r\nSo I think our best option is to steal the technique used in Guava\u2019s [Uninterruptibles](https://github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/Uninterruptibles.java). Just retry the load and re-interrupt the calling thread once that completes.",
        "Ahh, I see. Got it, thanks."
    ],
    "1093": [],
    "1915": [],
    "4739": [],
    "1388": [],
    "4508": [],
    "1046": [],
    "85": [],
    "382": [],
    "3422": [
        "Unsure what action to take here. From OkHttp\u2019s perspective the server isn\u2019t hung, it\u2019s just slow.",
        "Not 100% sure yet, but looks like `Http2Connection.ReaderRunnable.headers(...)` drops headers of healthy streams after `GOAWAY` frame. Will try to propose a fix later today or tomorrow."
    ],
    "4445": [],
    "1080": [],
    "4362": [],
    "3438": [
        "File a bug on b.android.com/new. Doesn't seem likely to be related to\nOkHttp code.\n\nOn Thu, Jun 29, 2017, 3:59 AM Dmitry <notifications@github.com> wrote:\n\n> For Android O i noticed such crash in crashlytic,\n>\n> Fatal Exception: java.lang.ClassCastException: android.system.UnixSocketAddress cannot be cast to java.net.InetSocketAddress\n>        at libcore.io.IoBridge.getLocalInetSocketAddress(IoBridge.java:700)\n>        at libcore.io.IoBridge.connectDetail(IoBridge.java:197)\n>        at libcore.io.IoBridge.connect(IoBridge.java:138)\n>        at java.net.PlainSocketImpl.socketConnect(PlainSocketImpl.java:129)\n>        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:356)\n>        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)\n>        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)\n>        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:356)\n>        at java.net.Socket.connect(Socket.java:616)\n>        at okhttp3.internal.platform.AndroidPlatform.connectSocket(AndroidPlatform.java:63)\n>        at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.java:223)\n>        at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:149)\n>        at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:192)\n>        at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:121)\n>        at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:100)\n>        at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\n>        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\n>        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\n>        at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\n>        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\n>        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\n>        at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\n>        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\n>        at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:120)\n>        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\n>        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\n>        at com.pubnub.api.interceptors.SignatureInterceptor.intercept(SignatureInterceptor.java:32)\n>        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\n>        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\n>        at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:185)\n>        at okhttp3.RealCall$AsyncCall.execute(RealCall.java:135)\n>        at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\n>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1162)\n>        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:636)\n>        at java.lang.Thread.run(Thread.java:764)\n>\n> Will this be fixed in new version of library?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/square/okhttp/issues/3438>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEESRGb9j_pzpeZxmSoVoLOkgHY40eks5sI1lagaJpZM4OI81v>\n> .\n>\n",
        "I have added an issue https://issuetracker.google.com/issues/63649622",
        "It looks like the fix for this missed O. Is there any workaround in OkHttp other than not calling cancel? It's ugly to skip cancelling queued requests made with OkHttp in O only. ",
        "Yeah we'll work around and catch the exception.",
        "Gosh! Getting same issue also. ",
        "@swankjesse any chances of the fix making it into production sometime soon? \ud83d\udc9f ",
        "@yschimke any chance of getting an intermediate release that fixes just this bug before 3.10 is released?",
        "cc @swankjesse @JakeWharton Seems like a clean fix to apply to a 3.9.1 branch.",
        "Released as OkHttp 3.9.1."
    ],
    "2090": [],
    "900": [],
    "329": [],
    "123": [],
    "2729": [],
    "557": [],
    "1716": [],
    "4334": [],
    "1307": [],
    "2559": [],
    "559": [],
    "488": [],
    "2523": [],
    "1269": [],
    "4235": [],
    "833": [],
    "3483": [
        "Ah it appears 408 responses are not effected by `retryOnConnectionFailure(false)`, Might I suggest a way to have it not retry them either?",
        "Hmm . . . . yeah good question. In the interim you can use an interceptor to rewrite 408s as 400s or something.",
        "me to",
        "Can fix. In this case, should a 408 response consult `retryOnConnectionFailure`? \r\n\r\nDoing some research, seems Chrome will only retry a single time. Firefox doesn't appear to retry at all, although I've found an old issue in their bug tracker that seems to suggest they will.\r\n\r\nThere's also a (somewhat) recent issue on Chrome bug tracker in regards to 408's and HTTP/2. https://bugs.chromium.org/p/chromium/issues/detail?id=695225",
        "I think that although it\u2019s not strictly a _connection_ failure, our `retryOnConnectionFailure` option is really intended to say \u201capplication layer is responsible for retries\u201d. I think our best way forward is to make 408s honor that setting."
    ],
    "3484": [],
    "1655": [],
    "1575": [],
    "841": [],
    "3498": [
        "Can fix. Thanks!"
    ],
    "4205": [],
    "2759": [],
    "2353": [],
    "3603": [],
    "1894": [],
    "3514": [
        "Looks like you\u2019re adding null to your interceptor chain.",
        "Thanks for your answer @swankjesse \r\nHowever, I don't know where we could ne doing that.\r\n\r\nSorry but this is a large project and we are two new guys continuing the work of another company so we're still trying to understand everything.\r\n\r\nFrom what I see, the addInterceptor method is only called using non null objects because it is created during the call as you can see bellow\r\n\r\n```\r\nokHttpClientBuilder.interceptors().clear();\r\nokHttpClientBuilder.addInterceptor(new Interceptor() {\r\n                    @Override\r\n                    public Response intercept(Interceptor.Chain chain) throws IOException {\r\n\r\n                        HttpUrl url = chain.request().url().newBuilder()\r\n                                .addQueryParameter(Constants.TOKEN_PARAMETER, TokenManager.getInstance().getCurrentToken()).build();\r\n\r\n                        Request request = chain.request().newBuilder().url(url).build();\r\n\r\n                        return chain.proceed(request);\r\n                    }\r\n                });\r\n```\r\n\r\n\r\nMaybe there is something else that's done wrong. \r\n\r\nThanks for the help!",
        "@swankjesse, i have this problem too, how to fix it? thanks.\r\n\r\n        Interceptor addCookiesInterceptor = chain -> {\r\n            Request.Builder builder = chain.request().newBuilder();\r\n            String cookies = UserInfoMrg.getInstance().getString(\"token\", \"\");\r\n            if (!TextUtils.isEmpty(cookies)) {\r\n                builder.addHeader(\"Cookie\", \"user_token=\" + cookies);\r\n            }\r\n            return chain.proceed(builder.build());\r\n        };\r\n",
        "this is my error message.\r\n\r\n![image](https://user-images.githubusercontent.com/20266526/35266382-23e29d46-005e-11e8-805a-f67c729c58eb.png)\r\n\r\n\r\n"
    ],
    "3693": [],
    "736": [],
    "3521": [
        "@ifedorenko do any of the requests result in a redirect or auth challenge?",
        "No, no redirects and no auth challenges according to nginx logs (all requests have `status=200`).",
        "Gotcha -- if you want some help feel free to provide the config and test case. I can help take a look.",
        "I ran more tests and see rather wide variety of exceptions thrown when nginx tells okhttp GOWAY. I believe specific exception depends on state of individual http2 stream and timing of GOAWAY.\r\n\r\n`IllegalStateException` is fixed by #3525 and I believe happens when one failed stream marks the connection as noNewStreams while another failed stream attempts recovery using the same connection.\r\n\r\nAll other exceptions are subclasses of `IOException` and while annoying do not cause real problems because they are already covered by retry-with-backoff logic in my code. I can document the exceptions I see in my test if anyone is interested."
    ],
    "958": [],
    "2893": [],
    "1767": [],
    "4534": [],
    "4304": [],
    "43": [],
    "1639": [],
    "407": [],
    "1705": [],
    "3546": [],
    "469": [],
    "3305": [],
    "1182": [],
    "1786": [],
    "2763": [],
    "587": [],
    "3100": [],
    "480": [],
    "593": [],
    "4122": [],
    "1147": [],
    "3030": [],
    "4146": [],
    "1479": [],
    "758": [],
    "1877": [],
    "2227": [],
    "874": [],
    "2995": [],
    "1332": [],
    "3433": [],
    "730": [],
    "802": [],
    "2186": [],
    "3575": [],
    "4142": [],
    "372": [],
    "3628": [
        "@stephentalley I think the appropriate spec is now https://tools.ietf.org/html/rfc7231#section-6.2.1.\r\n\r\n> The client ought to continue sending the request and discard the 100 response.\r\n\r\nSince when is \"ought\" a rfc2119 keyword :( ",
        "I have also encountered this problem, and I don't want to add the `Expect` header because we send requests to a lot of different servers and I don't want to risk breaking working things.\r\n\r\nWhat do you mean by \"badly behaving server\"? As I understand it, any server may send 100 Continue, and it should be ignored.\r\n\r\nDo you think it's possible to write a patch/test without much okhttp experience?",
        "The server is arguably doing the wrong thing by the spec.  The spec says the client should be tolerant even if it didn't request this (Postel's law).\r\n\r\nI say arguably, because as the spec mentions, ther are clients out there that don't support this and servers will break by implementing.\r\n\r\n> \r\n> Note: The Expect header field was added after the original\r\n>       publication of HTTP/1.1 [RFC2068] as both the means to request an\r\n>       interim 100 (Continue) response and the general mechanism for\r\n>       indicating must-understand extensions.  However, the extension\r\n>       mechanism has not been used by clients and the must-understand\r\n>       requirements have not been implemented by many servers, rendering\r\n>       the extension mechanism useless.  This specification has removed\r\n>       the extension mechanism in order to simplify the definition and\r\n>       processing of 100-continue.\r\n\r\nBut it's now a bug based on the latest spec, so OkHttp should support this even when not sending Expect.  \r\n\r\nIf you need this fixed ASAP, then definitely read through the code, try making a failing test and PR, ask questions here and I'll (and others) help if you get stuck.",
        "We are also encountering this issue in our Android app with one specific server (see opacapp/opacclient#497) since we switched from Apache HttpClient to OkHttp. I don't have any experience with the OkHttp codebase either, but maybe I can try to look into it.",
        "I have sent a pull request (#3766) that includes a failing test and a commit that seems to fix the problem. However, there is still one issue where I am stuck -> see the description of the PR.",
        "This is fixed with PR #3766 , so it can be closed with the next release.",
        "What release did this make it into? 3.10 or 3.11? I'm using Retrofit and it pulls in 3.10, but I think I'm hitting this bug.\r\n\r\nEdit: I forced gradle to grab 3.11, but it's still failing with a 401 when I try to POST to a customer's website with okhttp (via retrofit). If I use curl, it succeeds. Most customers are fine, these guys are doing something odd, but since it works with curl there must be something I should be configuring to make it work? Or is it something to do with the certificates? Here's the log from curl:\r\n\r\n```\r\n* SSL connection using TLS1.2 / ECDHE_RSA_AES_128_GCM_SHA256\r\n* \t server certificate verification SKIPPED\r\n* \t server certificate status verification SKIPPED\r\n* \t common name: *.tourist-mobile.com (matched)\r\n* \t server certificate expiration date OK\r\n* \t server certificate activation date OK\r\n* \t certificate public key: RSA\r\n* \t certificate version: #3\r\n* \t subject: OU=Domain Control Validated,CN=*.mycustomer.com\r\n* \t start date: Mon, 04 Jun 2018 10:28:08 GMT\r\n* \t expire date: Thu, 13 Jun 2019 10:27:08 GMT\r\n* \t issuer: C=US,ST=Arizona,L=Scottsdale,O=GoDaddy.com\\, Inc.,OU=http://certs.godaddy.com/repository/,CN=Go Daddy Secure Certificate Authority - G2\r\n* \t compression: NULL\r\n* ALPN, server did not agree to a protocol\r\n> POST /EventComMaster/callback/flightstats HTTP/1.1\r\n> Host: mycustomer.com\r\n> User-Agent: curl/7.47.0\r\n> Accept: */*\r\n> Content-Type: application/json\r\n> Content-Length: 15887\r\n> Expect: 100-continue\r\n> \r\n< HTTP/1.1 100 Continue\r\n* We are completely uploaded and fine\r\n< HTTP/1.1 200 OK\r\n< Date: Mon, 12 Nov 2018 21:47:46 GMT\r\n< Server: Apache/2.2.15 (CentOS)\r\n< Pragma: no-cache\r\n< Expires: Thu, 01 Jan 1970 00:00:00 GMT\r\n< Cache-Control: no-cache\r\n< Cache-Control: no-store\r\n< Content-Length: 0\r\n< Connection: close\r\n< Content-Type: text/plain; charset=UTF-8\r\n< \r\n* Closing connection 0\r\n\r\n```",
        "You can always specify an explicit dependency on a newer version. Retrofit\nonly uses public APIs.\n\nOn Mon, Nov 12, 2018, 7:03 PM Chris Kessel <notifications@github.com wrote:\n\n> What release did this make it into? 3.10 or 3.11? I'm using Retrofit and\n> it pulls in 3.10, but I think I'm hitting this bug.\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/square/okhttp/issues/3628#issuecomment-438038735>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEcmamFi-8dx_Y2XusUagYintIJtvks5uueuKgaJpZM4Pi9Ux>\n> .\n>\n",
        "Yea, I forced it to 3.11 and verified it with gradle dependencies, but it still fails. I'm going to try a POST with the javax.ws.rs.Client and see if that works. We were using Apache http and it worked with the default configuration. It started failing when we converted over to Retrofit/OkHttp. \r\n\r\nI'm guessing it's something in OkHttp, but I can't figure out what exactly. Everything looks to be configured as far as ciphers, TLS versions, etc compared to what the curl command shows should happen.",
        "I know this is through Retrofit, so maybe not useful for you, but for what it's worth, the call works (200 response) with javax.ws.rs.Client. Default client, just ClientBuilder.newClient().\r\n```\r\n          MediaType contentType = MediaType.valueOf(deliveryFormat.getMediaType());\r\n            Response response = httpClient.target(uri)\r\n                    .request(contentType)\r\n                    .post(Entity.entity(serializedAlert, contentType), Response.class);\r\n```\r\nThis fails with Retrofit with a 401:\r\n```\r\n            RequestBody requestBody = RequestBody.create(MediaType.parse(deliveryFormat.getMediaType()), serializedAlert);\r\n            Response<ResponseBody> response = retrofitCustomerCallback.postAlert(uri.toString(), requestBody).execute();\r\n```\r\nWhere that postAlert is a Retrofit interface with this method:\r\n```\r\npublic interface RetrofitCustomerCallback{\r\n    @POST\r\n    Call<ResponseBody> postAlert(@Url String customerEndpoint, @Body RequestBody alert);\r\n}\r\n```\r\n\r\nAnd the OkHttp configuration is mostly basic aside from some timeout settings (which I'll be adding to the Client code above):\r\n```\r\n        OkHttpClient client = new OkHttpClient.Builder()\r\n                .connectTimeout(myConfig.getPostConnectionTimeoutSeconds(), TimeUnit.SECONDS)\r\n                .readTimeout(myConfig.getPostResponseTimeoutSeconds(), TimeUnit.SECONDS)\r\n                .writeTimeout(myConfig.getPostResponseTimeoutSeconds(), TimeUnit.SECONDS)\r\n                .build();\r\n```\r\n\r\nUnfortunately, this is posting to a customer's endpoint, so I don't have any details on how that's configured. Just the CURL trace above."
    ],
    "478": [],
    "4082": [],
    "2926": [],
    "2823": [],
    "3504": [],
    "1197": [],
    "1612": [],
    "2462": [],
    "4630": [],
    "1563": [],
    "761": [],
    "2889": [],
    "1313": [],
    "3518": [],
    "411": [],
    "1569": [],
    "2052": [],
    "3509": [],
    "3819": [],
    "4487": [],
    "3108": [],
    "2133": [],
    "3719": [
        "Does your app change the SSL provider in any way? to GMS services e.g. include ProviderInstaller.installIfNeeded.  It could also just be the setup of that phone.\r\n\r\nIs it a one-off or consistently reproducible?\r\n\r\nI've seen a similar issue in rare timing cases either before or after a network issue, a non-standard SSL provider can return NONE as the string.  OkHttp might have to handle this more gracefully.\r\n\r\nhttps://github.com/google/conscrypt/blob/c88f9f55a523f128f0e4dace76a34724bfa1e88c/common/src/main/java/org/conscrypt/SSLNullSession.java#L149-L151",
        "Hi!\r\n\r\nAbout your questions:\r\n\r\n- \"Does your app change the SSL provider in any way? to GMS services e.g. include ProviderInstaller.installIfNeeded\" : no change\r\n- \"Is it a one-off or consistently reproducible?\" : just only 1 crash until now\r\n\r\nIs there a manner to catch this exception in my App to avoid a crash?",
        "I could confirm this issue on multiple devices. You could look in details at Crashlytics http://crashes.to/s/188322d298a\r\n\r\nHere is part of my application from stacktrace https://gist.github.com/anonymous/eb4c8d96de290e84c3e5be093060023f\r\n\r\nI use GMS ProviderInstaller and custom SSLSocketFactory.",
        "+1:\r\n\r\n![image](https://user-images.githubusercontent.com/10081640/34315440-a19f2062-e766-11e7-824d-7ca4a623d7bb.png)\r\n",
        "n.b. my PR fix will turn these into IOExceptions and handle them cleanly e.g. retry other connection routes.  But it won't fix an underlying fatal problem e.g. connecting to specific servers with a custom SSLSocketFactory.",
        "@yschimke: this crash stills there :( I've added ProviderInstaller.installIfNeeded into my App + a custom SSLSocketFactory. It's really rare, but today 1 user had this crash (Android 7.0 on Galaxy S7 Edge).",
        "@anthony3444 the fix is in the next release (3.10), until then when they happen you will get a crash from OkHttp.  ",
        "We're observing the same crash. 100% of crashes happen to users on Google phones running Android 8.1.0, though we can't reproduce on the same device we have.",
        "@yschimke do we have an ETA of this release? ",
        "I don't, I think we had planned for a 3.10 earlier than this.  cc @swankjesse @JakeWharton ",
        "Hey guys, same crash - it's quite rare for us too, was just wondering if the issue could be kept open until 3.10 is released.\r\n\r\nAre there any extra informations that I could provide that may be needed/helpful?",
        "I think this is fixed in 3.10.",
        "@swankjesse is 3.10 expected to be released any time soon? thanks!",
        "@anna-b if you look at the [milestone](https://github.com/square/okhttp/milestone/22) they seem to be aiming for end Feb. So a bit more than a week.",
        "same error using 3.10 with Retrofit 2\r\n\r\n`Fatal Exception: java.lang.IllegalArgumentException: Unexpected TLS version: \r\n       at okhttp3.TlsVersion.forJavaName(TlsVersion.java:53)\r\n       at okhttp3.TlsVersion.forJavaNames(TlsVersion.java:59)\r\n       at okhttp3.ConnectionSpec.tlsVersions(ConnectionSpec.java:113)\r\n       at okhttp3.ConnectionSpec.toString(ConnectionSpec.java:221)\r\n       at java.lang.String.valueOf(String.java:2683)\r\n       at java.lang.StringBuilder.append(StringBuilder.java:129)\r\n       at java.util.AbstractCollection.toString(AbstractCollection.java:458)\r\n       at java.util.Collections$UnmodifiableCollection.toString(Collections.java:1108)\r\n       at java.lang.String.valueOf(String.java:2683)\r\n       at java.lang.StringBuilder.append(StringBuilder.java:129)\r\n       at okhttp3.internal.connection.ConnectionSpecSelector.configureSecureSocket(ConnectionSpecSelector.java:70)\r\n       at okhttp3.internal.connection.RealConnection.connectTls(RealConnection.java:274)\r\n       at okhttp3.internal.connection.RealConnection.establishProtocol(RealConnection.java:251)\r\n       at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:151)\r\n       at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:192)\r\n       at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:121)\r\n       at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:100)\r\n       at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:120)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at com.justdo.logic.network.RestClient$1.intercept(RestClient.java:60)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:92)\r\n       at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:67)\r\n       at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:185)\r\n       at okhttp3.RealCall$AsyncCall.execute(RealCall.java:135)\r\n       at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)\r\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)\r\n       at java.lang.Thread.run(Thread.java:762)`",
        "Mostly fixed in 3.10, but there was a race condition.  Hopefully fixed correctly in 3.11",
        "Also, that stack trace appears to be 3.8.",
        "Is this fixed in 3.11?",
        "Yes, if you see it with 3.11 or it manifests in other similar ways, please open an issue.",
        "@dave-r12 ve\r\nHow do you judge that the issue opened by @vasiledoe happened when using okhttp 3.8 or do I misunderstanding something?",
        "@yschimke \r\n\r\nThanks for your reply. \r\nCould you specify which commit in 3.11 fix that issue?\r\n\r\nI just upgrade to 3.10 to fix another crash (https://github.com/square/okhttp/issues/3438)\r\nCould you explain more about under which rare condition does this crash still happen in 3.10 ?",
        "@gongzelong0718 please give 3.11 a try. The commits in the release are on our git history.",
        "@gongzelong0718 the stack trace includes class names and line numbers. We can correlate that information with git tags to understand possible versions. For example: `okhttp3.ConnectionSpec.tlsVersions(ConnectionSpec.java:113) at `\r\n\r\nIn version 3.8 it contains this line of code:\r\nhttps://github.com/square/okhttp/blob/parent-3.8.0/okhttp/src/main/java/okhttp3/ConnectionSpec.java#L113\r\n\r\nAnd in 3.10:\r\nhttps://github.com/square/okhttp/blob/parent-3.10.0/okhttp/src/main/java/okhttp3/ConnectionSpec.java#L113\r\n\r\nNote that 3.10 has no executable code!",
        "this issue still exists in okhttp3.12.1. \r\nhere is my logs:\r\n![TlsVersion-crash](https://user-images.githubusercontent.com/8335653/54972963-e83ee400-4fc8-11e9-8c8a-0ecbe916448f.png)\r\n\r\n\r\n"
    ],
    "2835": [],
    "385": [],
    "2991": [],
    "4650": [],
    "791": [],
    "845": [],
    "980": [],
    "2432": [],
    "2100": [],
    "487": [],
    "283": [],
    "3218": [],
    "3547": [],
    "3809": [
        "Hi! I started looking at this tonight. The PR looks reasonable but I have no idea how to reproduce it in a test case. In particular, I can\u2019t see how you end up with a 401 response and a null connection.\r\n\r\nIe. where did the 401 response come from if not from a connection? I don\u2019t think we ever cache 401s.",
        "The 401 comes from the Nexus server, the nginx reverse proxy is closing the connection after sending the 401.",
        "I still see that in 3.10.0"
    ],
    "4490": [],
    "1230": [],
    "1645": [],
    "3096": [],
    "1489": [],
    "468": [],
    "2589": [],
    "3834": [
        "Yeah, I think you\u2019re right. Should be `volatile` like `canceled`.",
        "I thought it might be taking advantage of volatile piggybacking of the `canceled` field, but the relationship is backwards, since the writer of `streamAllocation` is reading from `canceled`.",
        "Yeah, reasoning about this hurts my head. In either case, `volatile` here is an easy fix."
    ],
    "327": [],
    "3282": [],
    "1208": [],
    "2088": [],
    "3850": [
        "We've talked about this for a long time. It's caused at least one bug in Retrofit and OkHttp thus far.",
        "Isn't it just `parse(url)!!` ?",
        "Assuming you remember that, yes. In Java you don't. And in Kotlin it's a platform type so you sometimes are forced to.",
        "Another advantage of a throwing version is that it's able to communicate useful information about the reason why it failed.",
        "+1",
        "oops PR hasn't landed yet"
    ],
    "3854": [],
    "58": [],
    "716": [],
    "1171": [],
    "1221": [],
    "3865": [
        "One recommendation from an infosec person at Square:\r\n\r\n> \u201cIf I were picking the ciphers, I would drop the SHA1 ciphers (#6, #7, #10, #11) and the 3DES one too (#12).\u201d\r\n\r\n",
        "Next: https://github.com/square/okhttp/issues/4655"
    ],
    "1003": [],
    "3872": [
        "I am new to open source community. Can I work it ?",
        "@CMahesh Before any PR lands there is a contributor agreement to submit, http://square.github.io/okhttp/#contributing\r\n\r\nAs it's not in scope for 3.10, it seems like a great starter task",
        "@yschimke  Thank you.. \ud83d\udc4d  I have submitted the contributor agreement.  I will clone the repo and push the changes.",
        "okhttp3.internal.http.RetryAndFollowUpInterceptor\r\n\r\n Request followUp = null;\r\n      try{\r\n    \t  followUp=followUpRequest(response, streamAllocation.route());\r\n      }\r\n      catch(IOException e){\r\n    \t  streamAllocation.release();\r\n    \t  throw e;\r\n      }\r\n      \r\nI have made the changes after downloading the repo.\r\n@yschimke  What is the procedure to commit the changes ??",
        "There are a number of tutorials you can read\r\n\r\nhttps://help.github.com/articles/creating-a-pull-request/\r\n\r\nThe goal is to get your changes showing up here https://github.com/square/okhttp/pulls",
        "https://github.com/square/okhttp/pull/3885\r\n\r\nchanges commited and pull request created.",
        "@yschimke as per #3971 this seems to be fixed and released. I guess this can be closed."
    ],
    "4489": [],
    "2356": [],
    "4448": [],
    "3823": [],
    "580": [],
    "4118": [],
    "1497": [],
    "2841": [],
    "535": [],
    "3895": [
        "Just saw this issue. It might be also worth reporting to the conscrypt project. ",
        "cc @nmittler FYI - I assume you don't expected massive differences between the different Conscrypt implementations.",
        "cc @flooey\r\n\r\n@yschimke the FD and engine-based sockets do differ WRT detection of the underlying socket closure. when wrapping another socket.  The FD socket cheats by obtaining the underlying FD for the wrapped socket and detecting when it is closed.  The engine-based socket relies on operations of the wrapped Java socket to fail, which can take a while depending on the configuration."
    ],
    "523": [],
    "932": [],
    "3142": [],
    "2168": [],
    "420": [],
    "4472": [],
    "4095": [],
    "3915": [
        "Thanks @jifang for including the github project to reproduce it.  Not sure who is going to look at this first.  n.b. Have you looked at the Http2 frame logging? \r\n\r\nExcuse the kotlin\r\n\r\n```\r\nval activeLogger = getLogger(okhttp3.internal.http2.Http2::class.java.name)\r\nactiveLogger.level = Level.FINE\r\n```\r\n\r\nShould give output like \r\n\r\n```\r\n>> CONNECTION 505249202a20485454502f322e300d0a0d0a534d0d0a0d0a\r\n>> 0x00000000     6 SETTINGS\r\n>> 0x00000000     4 WINDOW_UPDATE\r\n<< 0x00000000    18 SETTINGS\r\n>> 0x00000000     0 SETTINGS      ACK\r\n>> 0x00000003    65 HEADERS       END_STREAM|END_HEADERS\r\n<< 0x00000000     0 SETTINGS      ACK\r\n<< 0x00000003   209 HEADERS       END_HEADERS\r\n<< 0x00000003 14181 DATA\r\n<< 0x00000003  2829 DATA\r\n<< 0x00000003 16375 DATA\r\n<< 0x00000003  8505 DATA\r\n<< 0x00000003  5667 DATA\r\n<< 0x00000003 16384 DATA\r\n<< 0x00000003 16366 DATA\r\n<< 0x00000003 11343 DATA\r\n<< 0x00000003  5667 DATA\r\n<< 0x00000003  5083 DATA          END_STREAM\r\n>> 0x00000000     8 GOAWAY\r\n```",
        "Thanks @yschimke for the tips. \r\nHere is the [client log](https://gist.github.com/jifang/9df9991e5f8e7f1d979c73a453f7ad67) filtered by Http2\r\nThe test project is also updated.",
        "I have a theory.\r\n\r\nIn our HTTP/2 code we don't ack bytes until they're delivered to the application. It's insufficient to get them to the Http2Stream; they actually need to be read from the stream.\r\n\r\nI'm guessing that when a steam is cancelled we need to do something with the leftover data.",
        "Nice. That theory should be reasonably easy to repro with a test if so.",
        "Tagging for 3.11 as this seems hi-pri",
        "I have been debugging an issue with ExoPlayer and OkHttp Http/2 connections that I now think may be the same underlying issue as this one. I have a test project [attached](https://github.com/google/ExoPlayer/issues/4078#issuecomment-379898195) to the issue that I can get 100% reproduction of the SocketTimeoutException if you run the project on a Genymotion android emulator with the network throttled to GPRS or Edge.\r\n\r\nWould love to have an idea of when I could grab a snapshot to test a potential fix to this. I tried the latest 3.11.0-SNAPSHOT from today (April 11th).",
        "Is there any update on this issue? Thanks!",
        "Also looking for an update, we're still seeing this in production, causing any connection to a domain to fail until the socket gets removed from the connection pool",
        "Can you try the latest SNAPSHOT? Be sure to fully read the response body, that's our signal to notify the peer we are ready for more bytes.\r\n\r\nIf you're still seeing an issue, can you please provide some steps to reproduce? Or ideally a test case if that's possible.",
        "@ojw28 do you think it's feasible to have the loaders in exoplayer clean up cancelled requests by finishing reading the bytes? \r\n\r\nAs an aside @dave-r12, I personally don't know if it's reasonable to ask the application layer to do something like that when you don't need to do this with Http/1.1 connections and it doesn't break all subsequent connections to that domain. I will say that this is a huge issue for our video playback on android right now and I'm open to fixing it in the short term by doing a workaround but this is just my initial reaction. \r\n\r\nIf you're looking to reproduce, I have a test project [attached](https://github.com/google/ExoPlayer/issues/4078#issuecomment-379898195) to the issue that I can get 100% reproduction of the SocketTimeoutException if you run the project on a Genymotion android emulator with the network throttled to GPRS or Edge.\r\n",
        "bump, can I work with someone from square to figure out how to fix this outside of the application layer? this is a huge issue for us right now",
        "I don't think it's reasonable to require the application layer to fully read the response body. What if it's a 2GB video or something?",
        "@natez0r did you try the latest snapshot? If that fixes the problem I can cut a release.",
        "@swankjesse just tried now with (https://oss.sonatype.org/content/repositories/snapshots/com/squareup/okhttp3/okhttp/3.11.0-SNAPSHOT/okhttp-3.11.0-20180522.074215-92.pom) and unfortunately, I was still reproducing the issue in my test app",
        "Are you fully reading the response body for the canceled request? I agree it's a bit of a burden for the application layer but that code should be straightforward to write. Or if you're canceling from a separate thread it should happen naturally. Maybe we can do this differently?\r\n\r\n@natez0r here is a test case showing the original theory: https://github.com/square/okhttp/blob/master/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java#L303\r\n\r\nCould you try to muck with that and get it to fail with what you are seeing?",
        "We're not reading the full response body in the test app (i'm just using exoplayer and the OKHttp extension for it).\r\n\r\nI modified the test in question to stop discarding the bytes on cancel and it fails with the exact error we're seeing in our application:\r\n\r\n`   // Cancel the call and discard what we've buffered for the response body. This should free up\r\n    // the connection flow-control window so new requests can proceed.\r\n    call1.cancel();\r\n//    assertFalse(\"Call should not have completed successfully.\",\r\n//        Util.discard(response1.body().source(), 1, TimeUnit.SECONDS));\r\n`\r\n\r\nand the test seems a SocketTimeoutException, just like in our app code:\r\n\r\n`Tests run: 82, Failures: 0, Errors: 2, Skipped: 5, Time elapsed: 37.908 sec <<< FAILURE! - in okhttp3.internal.http2.HttpOverHttp2Test\r\nconnectionWindowUpdateAfterCanceling[h2_prior_knowledge](okhttp3.internal.http2.HttpOverHttp2Test)  Time elapsed: 10.063 sec  <<< ERROR!\r\njava.net.SocketTimeoutException: timeout\r\n\tat okhttp3.internal.http2.Http2Stream$StreamTimeout.newTimeoutException(Http2Stream.java:602)\r\n\tat okhttp3.internal.http2.Http2Stream$StreamTimeout.exitAndThrowIfTimedOut(Http2Stream.java:610)\r\n\tat okhttp3.internal.http2.Http2Stream.takeResponseHeaders(Http2Stream.java:146)\r\n\tat okhttp3.internal.http2.Http2Codec.readResponseHeaders(Http2Codec.java:127)\r\n\tat okhttp3.internal.http.CallServerInterceptor.intercept(CallServerInterceptor.java:88)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\r\n\tat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:45)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\r\n\tat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\r\n\tat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\r\n\tat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:126)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\r\n\tat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:200)\r\n\tat okhttp3.RealCall.execute(RealCall.java:77)\r\n\tat okhttp3.internal.http2.HttpOverHttp2Test.connectionWindowUpdateAfterCanceling(HttpOverHttp2Test.java:333)\r\n\r\nconnectionWindowUpdateAfterCanceling[h2](okhttp3.internal.http2.HttpOverHttp2Test)  Time elapsed: 10.206 sec  <<< ERROR!\r\njava.net.SocketTimeoutException: timeout\r\n\tat okhttp3.internal.http2.Http2Stream$StreamTimeout.newTimeoutException(Http2Stream.java:602)\r\n\tat okhttp3.internal.http2.Http2Stream$StreamTimeout.exitAndThrowIfTimedOut(Http2Stream.java:610)\r\n\tat okhttp3.internal.http2.Http2Stream.takeResponseHeaders(Http2Stream.java:146)\r\n\tat okhttp3.internal.http2.Http2Codec.readResponseHeaders(Http2Codec.java:127)\r\n\tat okhttp3.internal.http.CallServerInterceptor.intercept(CallServerInterceptor.java:88)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\r\n\tat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:45)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\r\n\tat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\r\n\tat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\r\n\tat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:126)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\r\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\r\n\tat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:200)\r\n\tat okhttp3.RealCall.execute(RealCall.java:77)\r\n\tat okhttp3.internal.http2.HttpOverHttp2Test.connectionWindowUpdateAfterCanceling(HttpOverHttp2Test.java:333)`\r\n\r\nSo, I guess my biggest questions here are:\r\n\r\n1. Since @ojw28 and myself don't believe it's fair to make the application read the rest of the bytes of video content but OKHTTP requires that, where do we go from here? This issue manifests itself as completely breaking any subsequent video playback (on the same domain) within the Twitter app until the socket gets removed from the connectionpool.\r\n2. Separately, why do we have a `cancel()` call if calling it doesn't gracefully cleanup the request?",
        "@natez0r right -- that makes sense because the current fix relies on the app to read the bytes.\r\n\r\nI just consulted the docs on `Call.cancel()`:\r\n> Cancels the request, if possible. Requests that are already complete cannot be canceled.\r\n\r\nThere is no mention of cleaning up resources so I'm unsure if that'd be a behavior change.\r\n\r\nA potential middle ground: require the app layer to close the `Response` or `ResponseBody`? I changed the test to do this and it failed so I think there is a little work to do here. I believe we do this for HTTP/1 (exhaust the response body when closed.)",
        "I think asking the app to close the response body seems like a reasonable middleground from my perspective. Exoplayer already does this in the `closeConnectionQuietly` helper (https://github.com/google/ExoPlayer/blob/release-v2/extensions/okhttp/src/main/java/com/google/android/exoplayer2/ext/okhttp/OkHttpDataSource.java#L389)\r\n\r\nAs an aside, I attempted to drain the buffer in my exoplayer test and it didn't work for me because there was contention between the old datasource attempting to drain the bytes and a new request attempting to use the same socket to fetch another video. It's much easier to reproduce if you have a slow connection",
        "@dave-r12 if we exhaust the responsebody when closing an HTTP/2 stream, does that mean that all other connections to that domain will have to wait for the exhausting of the response to complete before they could be multiplexed over the same socket? Do we only have to read whatever's actually been received, or does that mean we need to read the entire response the server was planning to serve up?\r\n\r\nForgive my ignorance here, is there any other way? With Http/1 it's really no big deal to exhaust the data (since there was no time requirement), but since other connections are waiting on using this same socket, I feel like pulling down the bytes we don't plan to actually read and blocking other connections on it seems unideal.",
        "> Do we only have to read whatever's actually been received, or does that mean we need to read the entire response the server was planning to serve up?\r\n\r\n+1 to this question. The entire response may be very large (e.g. multiple gigabytes for a progressive video stream), so it's an important question to address. Clearly cancelling such a request early shouldn't require the entire response to still be received.",
        "> does that mean that all other connections to that domain will have to wait for the exhausting of the response to complete before they could be multiplexed over the same socket?\r\n\r\nConnections or requests? Assuming you mean requests and the connection flow-control window is full, then yes the server should not send us any more data frames until we free up space.\r\n\r\n> Do we only have to read whatever's actually been received, or does that mean we need to read the entire response the server was planning to serve up?\r\n\r\nShould only be what we have buffered so far, not the entire response. There should be no blocking on IO.",
        "So I think where we are with this is:\r\n\r\n* The application should call `response.body().close()` (we already do this in ExoPlayer).\r\n* OkHttp should do whatever is necessary when that happens (e.g. read and discard any buffered-but-not-yet-consumed data). @dave-r12 - Does the commit referenced above do this, or is there more work to be done?\r\n\r\nThanks!",
        "Yes, I believe the commit above does that (pending code review.)",
        "Awesome, thanks for the fix @dave-r12! much appreciated.  If you'd like, I can run my test project on it once it is in a snapshot.",
        "@natez0r run your test project on latest snapshot?",
        "I tried it, but i am still seeing a socket timeout. I'm trying to investigate a bit further, but wanted to let you know I'm working on it.",
        "Shoot, ok. Let us know if we can help out at all. Ideally we can get an executable test case for this and then fix.",
        "Hey @natez0r let me know if you'd like a second set of hands on this! We're eager to get this resolved.",
        "I am able to verify that calling `response.body().close();` had fixed this issue with the latest snapshot. Thanks!",
        "I got a chance to debug this a bit more today. It looks like my issue can occur when we've 'opened' the connection but have yet to begin reading the response but decide to cancel it. ",
        "@dave-r12 I guess my issue is slightly different than this, but I am trying to figure out what the actual cause could be:\r\n\r\nIf we've opened a connection (gotten the response code), but have yet to start reading the body of the response and decide to cancel the request, does the underlying `Http2Stream` need to write a reset code to the server. I connected the debugger and it appears that the `unacknowledgedBytes` are 0 when closing the stream, which does not fire a windowUpdate (which sounds reasonable), but I still get sockettimeouts when attempting to make a new connection to the same domain after i've closed the response body of my connection that is in the state described in my first message",
        "Alright. I'll continue to stare at it but nothing is jumping out at me yet. If you could grab the HTTP/2 frame logs or can come up with an executable test case that will help as well. I'd really like to get to the root cause of this one \ud83d\ude04.\r\n\r\n> does the underlying Http2Stream need to write a reset code to the server.\r\n\r\nThat should already be happening if we haven't received all the data for the stream or there wasn't an existing error code for the stream.",
        "Hey Dave, I'll try to come up with a test case when I get back from\nvacation late next week.  Thanks for your help on this!\n\nOn Fri, Jun 29, 2018, 8:52 AM Dave Roberge <notifications@github.com> wrote:\n\n> Alright. I'll continue to stare at it but nothing is jumping out at me\n> yet. If you could grab the HTTP/2 frame logs or can come up with an\n> executable test case that will help as well. I'd really like to get to the\n> root cause of this one \ud83d\ude04.\n>\n> does the underlying Http2Stream need to write a reset code to the server.\n>\n> That should already be happening if we haven't received all the data for\n> the stream or there wasn't an existing error code for the stream.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/square/okhttp/issues/3915#issuecomment-401345006>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAlEM-1QbpCAGxzLf1BOb4aLmfu_aHwjks5uBiMpgaJpZM4SfJuX>\n> .\n>\n",
        "@natez0r can you please share your test code that shows this still happens?",
        "> @natez0r can you please share your test code that shows this still happens?\r\n\r\n@noamtamim I was using https://github.com/google/ExoPlayer/issues/4078#issuecomment-379898195 to reproduce it. I haven't used it in awhile, but the basic gist for the test project was to have two connections to the same domain and cancel one mid-request and then try to read the second"
    ],
    "89": [],
    "3921": [
        "You'd also want overloads for the Request.Builder.",
        "Headers.Builder could be fine.\r\n```java\r\nHeaders headers = request.headers();\r\nrequest = request.newBuilder()\r\n    .headers(headers.newBuilder().setDate(new Date()).build())\r\n    .build();\r\n```\r\nor maybe that's too hidden, then?\r\nAgree that it opens up a lot of questions about conveniences.",
        "+1 I think OkHttp could usefully provide constants and formatters for more headers.  Would it be worth a sweep through https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers?\r\n\r\nDate is also pretty common in responses.",
        "So long as we provide a java.time overload to anything we add. Date is bad, bad news.",
        "I thought java.time was Android O?",
        "It was, yes.\n\nOn Tue, Mar 13, 2018 at 11:23 AM Yuri Schimke <notifications@github.com>\nwrote:\n\n> I thought java.time was Android O?\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/square/okhttp/issues/3921#issuecomment-372704310>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEdYK3ZLnKVzXys6S0zUr_XovU4LDks5td-R2gaJpZM4Sn5Dg>\n> .\n>\n",
        "I did a pull request for this but left out the java.time stuff since that is newer and didn't want to break backward compatibility.",
        "I think we\u2019ve opened the door to java.time overloads, kicked off in OkHttpClient.\r\n\r\n@jjshanks if you\u2019d like to add more overloads, please do!"
    ],
    "4666": [],
    "1817": [],
    "1982": [],
    "1245": [],
    "812": [],
    "3934": [
        " * [x] HeldCertificate: promote to `okhttp3.mockwebserver`\r\n * [x] SslClient: new APIs for my certs vs. peer\u2019s certs. Should accept a cert to trust.\r\n * [x] MockWebServer: setWantClientAuth(true) on incoming SSL sockets\r\n * [x] RecordedRequest: expose the server\u2019s handshake as a new field\r\n",
        "Okay, that\u2019s all done.\r\n\r\nNew next steps:\r\n * [x] Be clear in the docs about whether this is for test code, or fix the defaults to be appropriate for production code\r\n * [x] API to add the platform\u2019s default trust roots (possibly opt-in or opt-out)\r\n * [x] Rename `TlsNode` to `HandshakeCertificates`"
    ],
    "1327": [],
    "2818": [],
    "2959": [],
    "3945": [
        "We should probably just mark the thread as interrupted before throwing the `InterruptedIOException`.",
        "@swankjesse, that's another solution, yeah."
    ],
    "4480": [],
    "2343": [],
    "2180": [],
    "4575": [],
    "297": [],
    "2594": [],
    "735": [],
    "188": [],
    "3973": [
        "Any update?",
        "I don't think this is happening with 3.10.0, this was fixed quite a while ago.  Can you double check and re-open if it is in fact with 3.10.0.  The line numbers don't match.\r\n\r\nhttps://github.com/square/okhttp/pull/3721",
        "@yschimke Yes, it really happened with 3.10.0. Unexpected TLS version is not IOException, if execute async, can't catch it and crash will happened",
        "Can you provide a new stacktrace then, I think the current one you provided is from before 3.10.0, based on line numbers\r\n\r\ne.g. line 198 \r\n\r\nhttps://github.com/square/okhttp/blob/parent-3.10.0/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java#L198",
        "@yschimke , It only happened when call enqueue method because I can't catch Exception except IOException\r\n\r\n```\r\njava.lang.IllegalArgumentException: Unexpected TLS version: NONE\r\nat okhttp3.TlsVersion.forJavaName(TlsVersion.java:53)\r\nat okhttp3.Handshake.get(Handshake.java:56)\r\nat okhttp3.internal.connection.RealConnection.connectTls(RealConnection.java:319)\r\nat okhttp3.internal.connection.RealConnection.establishProtocol(RealConnection.java:277)\r\nat okhttp3.internal.connection.RealConnection.connect(RealConnection.java:162)\r\nat okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)\r\nat okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)\r\nat okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)\r\nat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\r\nat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\r\nat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\r\nat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:126)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\r\nat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\r\nat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:200)\r\nat okhttp3.RealCall$AsyncCall.execute(RealCall.java:147)\r\nat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\nat java.lang.Thread.run(Thread.java:745)\r\n```",
        "Your original stack trace looks like it is from 3.4.0 \r\n\r\n3.4.0\r\nhttps://github.com/square/okhttp/blob/parent-3.4.0/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java#L242\r\n\r\nThis new stacktrace is happening after the fix (https://github.com/square/okhttp/pull/3721/files), but also seems to be a build from okhttp master slightly after 3.10.0.\r\n\r\n3.10.0:\r\nhttps://github.com/square/okhttp/blob/parent-3.10.0/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java#L319\r\n\r\n9a6f88dc34cb68d341ec1a7e4c79546fa1c18c96:\r\nhttps://github.com/square/okhttp/blob/9a6f88dc34cb68d341ec1a7e4c79546fa1c18c96/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java#L319  \r\n\r\nSo it looks like two subsequent calls to sslSocketSession.getProtocol() are returning something normal, and then \"NONE\" for the second call.",
        "@yschimke yes , it's built after 3.10.0 on master branch",
        "@lizhangqu can you build against the PR branch from yesterday, see if it fixes things?\r\n\r\nAnd thanks for persevering on this, seems like it can still happen, or rather multiple calls to getProtocol can return different results.",
        "I had the same problem. The probability of this problem crashing is not very high, but it does exist in some devices.\r\n\r\n> String tlsVersionString = session.getProtocol();\r\n> if (tlsVersionString == null) throw new IllegalStateException(\"tlsVersion == null\");\r\n> TlsVersion tlsVersion = TlsVersion.forJavaName(tlsVersionString);\r\n\r\ntlsVersionString in other devices get \"NONE\".\r\n",
        "@yschimke maybe it will fix one scene which can trigger the crash, if the stack not call **public static Handshake get(SSLSession session)**, it will crash too. Maybe this will work fine.\r\n\r\n```\r\n  public static TlsVersion forJavaName(String javaName) {\r\n    switch (javaName) {\r\n      case \"TLSv1.3\":\r\n        return TLS_1_3;\r\n      case \"TLSv1.2\":\r\n        return TLS_1_2;\r\n      case \"TLSv1.1\":\r\n        return TLS_1_1;\r\n      case \"TLSv1\":\r\n        return TLS_1_0;\r\n      case \"SSLv3\":\r\n        return SSL_3_0;\r\n    }\r\n    throw new IOException(\"Unexpected TLS version: \" + javaName);\r\n  }\r\n\r\n```\r\n\r\nAll tlsVersion will call TlsVersion.forJavaName and we can check it in this method. Throwing IOException instead of IllegalArgumentException\r\n\r\nThis is the crash which com from my monitor data. All happened on Android 8.1.0\r\n![](https://si.geilicdn.com/hz_img_356900000163edb800310a028841_1213_853_unadjust.png)",
        "@yschimke \r\n\r\nThe source code:\r\n>    public static TlsVersion forJavaName(String javaName) {\r\n    switch (javaName) {\r\n      case \"TLSv1.3\":\r\n        return TLS_1_3;\r\n      case \"TLSv1.2\":\r\n        return TLS_1_2;\r\n      case \"TLSv1.1\":\r\n        return TLS_1_1;\r\n      case \"TLSv1\":\r\n        return TLS_1_0;\r\n      case \"SSLv3\":\r\n        return SSL_3_0;\r\n    }\r\n    throw new IllegalArgumentException(\"Unexpected TLS version: \" + javaName);\r\n  }\r\n\r\nThe modified\uff1a\r\n\r\n>   public static TlsVersion forJavaName(String javaName) {\r\n    switch (javaName) {\r\n      case \"TLSv1.3\":\r\n        return TLS_1_3;\r\n      case \"TLSv1.2\":\r\n        return TLS_1_2;\r\n      case \"TLSv1.1\":\r\n        return TLS_1_1;\r\n      case \"TLSv1\":\r\n        return TLS_1_0;\r\n      case \"SSLv3\":\r\n      default:\r\n        return SSL_3_0;\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\nIf the system access to the TLS version is NONE, I can assume that the user must use the Android system, but because of the system for less than the corresponding TLS version, can try to return to the oldest SSL_3_0, so mobile phone can compatible with the model, some security handshake rules can't  use, but can ensure the request is success and does not collapse.",
        "3Q",
        "@gdky005  did you solve this on v3.10? I'm same as you",
        "It should be happening at a much reduced rate in 3.10 compared to 3.4, for the same Android version (8.10).  My understanding of this bug is conscrypt (SSL) in 8.1.0 can lose a connection at different points.  And OkHttp needs to handle the responses from SSLSession when it can disconnect asynchronously.  \r\n\r\nAre you seeing this at the same rate with < 3.10 and 3.10?  If so, something else is going on that needs explanation. ",
        "@lizhangqu is the frequency that you see this per device (Android 8.1.0) the same with 3.10 and also with all earlier OkHttp versions?  I didn't follow you previous answer.",
        "@yschimke it's also happened in v3.9.1",
        "@a1018875550 understood, but 3.10.0 includes a fix that should substantially reduce the frequency of this error.  But likely not eliminate it completely as its still a timing issue with an async cause (sslsocket closing).",
        "yeah, but he said it's also happened in v3.10.0 for this issues first commit. And I'm not update this for my users. \r\nso I'm not sure v3.10.0 it's ok.",
        "@a1018875550 the original stack trace wasn't from 3.10.0, but a later one was. I suspect the main change here is Android 8.1.0, rather than OkHttp 3.4.0 vs 3.9.1.  As I said, I believe it should happen *less* frequently with 3.10.0.",
        "@yschimke also with 3.4.1 and 3.9.1, but now the stack trace is missing so I can't provide it.  ",
        "@yschimke but all happened on Android 8.1.0",
        "I fix this problem by modifing async call to sync call and try catch it. The versions I used are 3.4.1, 3.9.1 and 3.10.0. All these versions have happened this problem. But it seems that 3.2.0 is ok. I am sorry that I have not focus on the crash number with different okhttp version. ",
        "@yschimke  We have two android apps, the first one uses 3.4.2, there are about 400+ crashes. And the other one uses 3.10.0, there are about 300+ crashes. I'm not sure whether 3.10.0 reduce crashes or not",
        "@lizhangqu how do you fix this? Thanks",
        "@a1018875550 \r\n\r\nbefore fix\r\n\r\n```\r\nOkHttpClient client = new OkHttpClient();\r\nRequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json);\r\nRequest request = new Request.Builder()\r\n    .url(url)\r\n    .post(body)\r\n    .build();\r\nclient.newCall(request).enqueue(new Callback() {\r\n  @Override\r\n  public void onFailure(Call call, IOException e) {\r\n    //java.lang.IllegalArgumentException: Unexpected TLS version: NONE \r\n    //will not callback on this function and then crash\r\n  }\r\n\r\n  @Override\r\n  public void onResponse(Call call, Response response) throws IOException {\r\n\r\n  }\r\n});\r\n```\r\n\r\nafter fix\r\n```\r\nfinal OkHttpClient client = new OkHttpClient();\r\nfinal RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json);\r\nfinal Request request = new Request.Builder()\r\n        .url(url)\r\n        .post(body)\r\n        .build();\r\nclient.dispatcher().executorService().execute(new Runnable() {\r\n    @Override\r\n    public void run() {\r\n        try {\r\n            client.newCall(request).execute();\r\n        } catch (IllegalArgumentException e) {\r\n            //Unexpected TLS version: NONE will be catch\r\n            //and will not crash\r\n            //but in essence, I have not solved this problem. Just only ignore it\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}); \r\n```",
        "NONE isn't unknown or old.  It's that there is no SSL session anymore, or it failed initially.  So changing TlsVersion lookup doesn't seem right to me.\r\n\r\nThe next usage of that session will fail anyway, we just want it to always be an IOException, e.g. reading from the closed socket instead of failing because of enum values.",
        "@lizhangqu I think it not a good way to slove this. you should try/catch every request. And I'm using rxjava for request.",
        "This should be fixed in 3.11 https://github.com/square/okhttp/pull/4055",
        "@yschimke nice, when is update 3.11?",
        "Not sure, but I suspect soon, it's overdue, and there are enough meaningful bug fixes and some experimental features already in master.",
        "I\u2019m getting ready to cut 3.11."
    ],
    "1254": [],
    "2638": [],
    "1908": [],
    "3031": [],
    "823": [],
    "1526": [],
    "681": [],
    "1516": [],
    "315": [],
    "86": [],
    "2148": [],
    "2094": [],
    "3721": [],
    "537": [],
    "846": [],
    "3692": [],
    "320": [],
    "1829": [],
    "733": [],
    "1501": [],
    "4504": [],
    "1": [],
    "3350": [],
    "1602": [],
    "3836": [],
    "459": [],
    "1448": [],
    "684": [],
    "4331": [],
    "4286": [],
    "2467": [],
    "1808": [],
    "3229": [],
    "639": [],
    "1314": [],
    "4087": [
        "interesting things here are that call is delay started.. so for example, lifecycle would be more foreground with a feature like this.. for example, can you add to the context before the call is executed, or can you only add before it is executed? Is the state immutable after a certain point? If a call is created and enqueued, but doesn't actually end in a network request, does that monkey wrench any assumptions?\r\n\r\nAlso, sometimes folks want property propagation (explicit context), and other times they want implicit context (like MDC hooks). Properties are much easier.\r\n\r\nJust things for teasing out the design.",
        "By the way I hacked thing on friday night. While this work I'm not satisfied by the overall design of my hack as it involves to tweak things at several places.\r\n\r\nRegarding immutability in my hacky design, the object (`RequestMetadata`) set in the `tag` field is _mutable until read_.\r\n\r\nAs both retrofit and okhttp are tied in this here's a verbatim of the https://github.com/square/retrofit/issues/2732#issuecomment-399894314 I just posted.\r\n\r\n----\r\n\r\n@adriancole I took the time to play a bit with the call adapter factory and ok event listener. I have a solution that can capture annotations and store them in the request _tag_, these annotations can be read in the `EventListener`.\r\n\r\n=> https://github.com/bric3/retrofit-okhttp-accounting/\r\n\r\nWhat I don't like with this solution is that, this a quite hacky one\r\n\r\n1. The Call wrapper is relying on the fact that calling `.request()` on the actual `call` before executing or enqueuing the call will return the request that will be used in this operations, it could be a copy for example, since the object is _almost immutable this is probably unlikely but given that _tag_ can be a mutable object I don't know if that is a lasting approach. \r\n\r\n2. The `tag` type is `Object` and has _self_ (the request itself) value by default; so the Call wrapper has to cast the `tag` to the needed type, and the value has to be set at the request creation time because a `Request` is immutable. Currently this is done in the `CallFactory`, where the request is modified with a builder then passed to ok http client. Design wise that's wrong, that's splitting concerns in different places. What if the `tag` has to be used for something else.\r\n\r\n3. OkHttp `Request` builder documents the `tag` as way to cancel the request. I'm not sure how this is used, but using `tag` to achieve accounting or monitoring feels like a misappropriate use of the `tag`.\r\n\r\n   > Attaches {@code tag} to the request. It can be used later to cancel the request. If the tag is unspecified or null, the request is canceled by using the request itself as the tag.\r\n\r\nI think this would be very welcome improvement in both retrofit and okhttp to have this kind of feature.\r\nI would like a simpler approach without having to rely on a `CallAdapterFactory` and a custom `CalFactory`\r\n\r\n1. OkHttp' request could benefit from a field dedicated to contextual information.\r\n2. Retrofit should have a request factory, or some kind of _request customizer_, or _request context customizer_, that could be leveraged with interface methods annotations like `@DELETE`.",
        "Tag javadocs lie: https://github.com/square/okhttp/issues/4039",
        "@yschimke oh interesting. But still I find the `tag` api a bit awkward to use. And one concern is that it is not possible to have different concerns in the tag. Once the tag is set you cannot add a different _set_ of contextual data (symply because the actual type set in the tag maybe another type, set by something else). \r\n\r\nRetrofit call adapters could be leveraged to add various aspects like authentication, accounting, monitoring, etc. If these adapters comme from different _vendors_ / projects they may rely on a different type in the tag which are quite likely incompatible.\r\n\r\nIf those are developed by the same people they of course may use some place holder like a `RequestContext` that can store various kind of data. But I believe this would benefit the whole community if tag has such kind of support.\r\n\r\n\r\n",
        "Idea:\r\nPromote the tag from an `Object` to a `Map<Class<T>, T>`.\r\n```\r\nZipkinTag zipkinTag = request.tag(ZipkinTag.class);\r\nCall<?> retrofitCall = request.tag(retrofit2.Call.class);\r\n...\r\n```\r\n\r\nWe\u2019d be backwards-compatible by storing the current tag under `Object.class`. We could enhance Retrofit to attach its Call to the requests it creates, and possibly also to make Call expose more stuff.\r\n\r\nThoughts?\r\n",
        "I think that's reasonable on the OkHttp side and quite easy to implement. \r\n\r\nRegarding retrofit, I would definitely like a way to access more stuff, especially methods annotation, maybe method name.",
        "Yeah, we have that information but haven\u2019t really had anywhere to expose it. Putting it on the Call is pretty straightforward.\r\n\r\nLets proceed to have typed tags in OkHttp. If anyone is picking this up I\u2019d prefer to _not_ allocate a `LinkedHashMap` until we have multiple tags, since that case should be quite rare. Perhaps something like this:\r\n```\r\nclass Request {\r\n  ...\r\n  private Class<?> onlyTagType; // Object.class, etc.\r\n  private Object onlyTag;\r\n  private Map<Class<?>, Object> tags; // null unless we have multiple tags\r\n}\r\n```"
    ],
    "2182": [],
    "632": [],
    "4106": [
        "Fixed upstream in jnr-unixsocket 0.22."
    ],
    "3845": [],
    "4127": [],
    "1224": [],
    "1759": [],
    "4134": [
        "Perhaps `isRepeatable()` as a method that users can override?"
    ],
    "3701": [],
    "4140": [
        "There are usually 2 requests sent to '/b' during the test:\r\n#1 on the busted connection, attempting reuse\r\n#2 on a new connection\r\n\r\nOn successful runs, the server records #1 and then #2 and adds them to the queue in that order.\r\n\r\nOn failed runs, the server starts reading request #1 before #2, but there is a context switch, and it finishes reading #2 before #1, recording them in that order. Since #1 is the last to be recorded, the test incorrectly uses it to assert that the sequence number is 0. Since #1 was the second to be received on the busted connection, it has a sequence number of 1 so the test fails.\r\n\r\nA simple fix is to assert that either #1 or #2 has a sequence number of 0. I wonder if there is a cleaner way to assert that a new connection was used."
    ],
    "2751": [],
    "1128": [],
    "2935": [],
    "241": [],
    "729": [],
    "248": [],
    "4509": [],
    "1007": [],
    "2067": [],
    "522": [],
    "4175": [
        "Are you shipping an incompatible version of bouncycastle with your project? HeldCertificate depends on bouncycastle 1.50, though perhaps we should update the library to require a newer version.",
        "... or perhaps build our own certificate encoder and avoid the bouncycastle dependency altogether!",
        "@swankjesse  does that mean that including `implementation com.squareup.okhttp3:okhttp-tls:3.11.0` is enough since `org.bouncycastle:bcprov-jdk15on:1.50` is a transitive dependency, right? \r\n\r\nThat's not the case in my project (testet on Android emulator with API 21 - 28) where I do the following to setup https for testing with MockWebServer:\r\n\r\n```kotlin\r\nval localhostCertificate = HeldCertificate.Builder()\r\n    .addSubjectAlternativeName(InetAddress.getByName(\"localhost\").canonicalHostName)\r\n    .build()\r\n```\r\n\r\nIf I don't add additional bouncy castle dependencies I get the following error:\r\n```\r\njava.lang.AssertionError: java.security.NoSuchAlgorithmException: no such algorithm: ECDSA for provider BC\r\nat okhttp3.tls.HeldCertificate$Builder.generateKeyPair(HeldCertificate.java:429)\r\nat okhttp3.tls.HeldCertificate$Builder.build(HeldCertificate.java:353)\r\n...\r\n```\r\n\r\nNevertheless, I can confirm that  you get this error\r\n\r\n```\r\njava.lang.VerifyError: Verifier rejected class okhttp3.internal.tls.HeldCertificate$Builder: \r\nokhttp3.internal.tls.HeldCertificate okhttp3.internal.tls.HeldCertificate$Builder.build() failed to verify: \r\nokhttp3.internal.tls.HeldCertificate okhttp3.internal.tls.HeldCertificate$Builder.build(): [0x9D] register v7 has type Reference: org.bouncycastle.asn1.ASN1ObjectIdentifier but expected Reference: \r\norg.bouncycastle.asn1.DERObjectIdentifier (declaration of 'okhttp3.internal.tls.HeldCertificate$Builder' a\r\n```\r\n\r\nif you use a different version of bouncy castle (like `org.bouncycastle:bctls-jdk15on:1.60`)\r\n",
        "@sockeqwe gotcha. You must be pulling in yet another version somehow. If you explicitly specify 1.50 does it work?\r\n\r\nIn any case we should update our code to 1.60 for the next release.",
        "1. okhttp + bcprov-jdk15on\r\n```\r\njava.lang.AssertionError: java.security.NoSuchAlgorithmException: no such algorithm: ECDSA for provider BC\r\nat okhttp3.tls.HeldCertificate$Builder.generateKeyPair(HeldCertificate.java:429)\r\nat okhttp3.tls.HeldCertificate$Builder.build(HeldCertificate.java:353)\r\n```\r\n\r\n2. okhttp + bcprov-ext-jdk15on\r\n\r\n```\r\nimplementation \"com.squareup.okhttp3:okhttp-tls:3.11.0\"\r\nimplementation \"org.bouncycastle:bcprov-ext-jdk15on:1.50\"\r\n```\r\ncauses aapt2 error at compile time\r\n```\r\nAGPBI: {\"kind\":\"error\",\"text\":\"Program type already present: org.bouncycastle.LICENSE\",\"sources\":[{}],\"tool\":\"D8\"}\r\n```\r\n\r\n3. okhttp (excluding bouncycastle) +  bcprov-ext-jdk15on\r\n```\r\nimplementation (testLibraries.okhttpTls){\r\n  exclude group: 'org.bouncycastle'\r\n}\r\nimplementation \"org.bouncycastle:bcprov-ext-jdk15on:1.50\"\r\n```\r\n\r\ncauses\r\n\r\n```\r\njava.lang.AssertionError: java.security.NoSuchAlgorithmException: no such algorithm: ECDSA for provider BC\r\nat okhttp3.tls.HeldCertificate$Builder.generateKeyPair(HeldCertificate.java:429)\r\nat okhttp3.tls.HeldCertificate$Builder.build(HeldCertificate.java:353)\r\n```\r\n\r\n4. okhttp + bcpkix\r\n```\r\nimplementation \"com.squareup.okhttp3:okhttp-tls:3.11.0\"\r\nimplementation \"org.bouncycastle:bcpkix-jdk15on:1.50\"\r\n```\r\n\r\ncauses\r\n\r\n```\r\njava.lang.AssertionError: java.security.NoSuchAlgorithmException: no such algorithm: ECDSA for provider BC\r\nat okhttp3.tls.HeldCertificate$Builder.generateKeyPair(HeldCertificate.java:429)\r\nat okhttp3.tls.HeldCertificate$Builder.build(HeldCertificate.java:353)\r\n```\r\n\r\nIs there any other bouncy castle dependency that I should use?\r\n\r\nBtw. starting in bouncy castle `1.60` seems to have a dedicated artifact for tls:  `org.bouncycastle:bctls-jdk15on:1.60`\r\n",
        "Our tests pass with `bcprov-jdk15on`.",
        "on my macbook during unit tests it works too, but not on an android\nemulator.\n\nJesse Wilson <notifications@github.com> schrieb am So., 29. Juli 2018,\n23:45:\n\n> Our tests pass with bcprov-jdk15on.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/square/okhttp/issues/4175#issuecomment-408708132>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAjnrlRbIUp3X_dmLvcdEv80MhpydJh0ks5uLizfgaJpZM4Vi8iR>\n> .\n>\n",
        "Hm. Will investigate.",
        "I created a new issue here: #4183 ",
        "Instead of using SslClient.localhost().socketFactory, I create a cert and load to Android Keystore, \r\n\r\n```java\r\nMockWebServer mockWebServer = new MockWebServer();\r\nmockWebServer.useHttps(getSSLSocketFactory(), false);\r\n```\r\n\r\n```java\r\nprivate SSLSocketFactory getSSLSocketFactory() throws Exception {\r\n        char[] password = \"password\".toCharArray();\r\n\r\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\r\n        keyPairGenerator.initialize(1024, new SecureRandom());\r\n        KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n\r\n        Calendar notAfter = Calendar.getInstance();\r\n        notAfter.add(Calendar.DAY_OF_YEAR, 1);\r\n        X509v3CertificateBuilder builder = new JcaX509v3CertificateBuilder(\r\n                new X500Principal(\"CN=localhost\"),\r\n                new BigInteger(\"1\"),\r\n                new Date(),\r\n                notAfter.getTime(),\r\n                new X500Principal(\"CN=localhost\"),\r\n                keyPair.getPublic());\r\n\r\n        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\")\r\n                .build(keyPair.getPrivate());\r\n\r\n        builder.build(contentSigner);\r\n\r\n        X509Certificate certificate = new JcaX509CertificateConverter()\r\n                .getCertificate(builder.build(contentSigner));\r\n\r\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        InputStream in = null;\r\n        keyStore.load(in, password);\r\n        Certificate[] certificateChain = {certificate};\r\n        keyStore.setKeyEntry(\"private\", keyPair.getPrivate(), password, certificateChain);\r\n        keyStore.setCertificateEntry(\"cert\", certificate);\r\n\r\n        KeyManagerFactory keyManagerFactory =\r\n                KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\r\n        keyManagerFactory.init(keyStore, password);\r\n        TrustManagerFactory trustManagerFactory =\r\n                TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\r\n        trustManagerFactory.init(keyStore);\r\n        SSLContext sslContext = SSLContext.getInstance(\"TLS\");\r\n        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(),\r\n                new SecureRandom());\r\n        return sslContext.getSocketFactory();\r\n    }\r\n```",
        "Running it with our current code on Android P:\r\n```\r\nCaused by: java.security.NoSuchAlgorithmException: ECDSA KeyPairGenerator not available\r\n        at java.security.KeyPairGenerator.getInstance(KeyPairGenerator.java:241)\r\n        at okhttp3.tls.HeldCertificate$Builder.generateKeyPair(HeldCertificate.java:426)\r\n```\r\n\r\nThis is fixed by replacing ECDSA with RSA2048\r\n```\r\n    HeldCertificate localhostCertificate = new HeldCertificate.Builder()\r\n        .addSubjectAlternativeName(localhost)\r\n        .rsa2048()\r\n        .build();\r\n```\r\n\r\nBut I\u2019d still like to figure out how to get ECDSA working on Android!"
    ],
    "4183": [
        "Just bumping this issue as it is directly related to the changes in cryptography for Android Pie.\r\n\r\nhttps://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html\r\n\r\nThe problem occurs when generating a `KeyPair` while building a `HeldCertificate` in  [Line 426](https://github.com/square/okhttp/blob/93996d80353fbad0b4dc10b858af5c17382813ae/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java#L426), when we specify the bouncy castle provider.\r\n\r\n>The behavior you get in Android P will depend on what API level your application targets. \r\n> If you don't specify a provider in your getInstance() calls, no changes are required.\r\n\r\n Which equates to a warning log for APIs < 28, and a [NoSuchAlgorithmException](https://developer.android.com/reference/java/security/NoSuchAlgorithmException) in 28+\r\n\r\n> To resolve this, you should stop specifying a provider and use the default implementation.\r\n\r\nI like to recommend we remove the \"BC\" provider to `KeyPairGenerator.getInstance(keyAlgorithm);`\r\nbut due to this being very limited to Android API 28, I'd like to know your opinion on the matter first.\r\n@swankjesse \r\n\r\n\r\n ",
        "Can fix.",
        "Is it fixed?"
    ],
    "2872": [],
    "2042": [],
    "79": [],
    "1631": [],
    "3557": [],
    "2250": [],
    "4218": [
        "2 possible solutions are:\r\n- Add a `Call.wireLevelRequest()` method. This is not strictly backward compatible, but may be acceptable.\r\n- Change `EventListener.requestHeadersStart()`'s signature to `EventListener.requestHeadersStart(Call call, Request wireLevelRequest)`. This is not backward compatible, but there is a disclaimer in https://github.com/square/okhttp/wiki/Events#availability stating that this interface is subject to change.\r\n\r\nIf any of the above works, or if you can suggest a better solution, I can send a PR.\r\n",
        "If you need a quick & dirty fix you can use Call tags and interceptors to hack around this. Here\u2019s a sketch:\r\n\r\n```\r\npublic void callOkHttp() {\r\n  Request request = new Request.Builder()\r\n      .url(...)\r\n      .tag(HackWireLevelRequestHolder.class, new HackWireLevelRequestHolder())\r\n      .build();\r\n  ...\r\n}\r\n\r\n\r\nclass HackWireLevelRequestHolder {\r\n  public static final Interceptor INTERCEPTOR = new Interceptor() {\r\n    public Response intercept(Chain chain) throws IOException {\r\n      Request request = chain.request();\r\n      request.tag(HackWireLevelRequestHolder.class).wireLevelRequest = request;\r\n      return chain.proceed(request);\r\n    }\r\n  }\r\n\r\n  Request wireLevelRequest = null;\r\n}\r\n```",
        "Nice solution. Thanks!",
        "Will this help?\r\nhttps://github.com/square/okhttp/issues/4638",
        "Yes, it can help, assuming that the wire-level request will be reachable from the parameters of the new methods. ",
        "Closing in favour of the request events."
    ],
    "996": [],
    "2852": [],
    "4507": [],
    "4232": [
        "Yep, you\u2019re right. We need a NullProxySelector or something.\r\n\r\nWant to send a PR?",
        "There you have it :-)"
    ],
    "2538": [],
    "4413": [],
    "4249": [
        "It also does not work if the realm is not quoted. The used regex matches it, but the value is in group 4 if there are no quotes and it is always group 3 used, both should be considered.\r\n\r\nBesides that it should probably be group 2 and 3, not 3 and 4.\r\nIn the regex there is `:?` used twice which is an optional colon, while I think this should be `?:` which would then be a non-capturing group which makes more sense here.\r\n\r\nYou chould also use named groups, so that the numbering cannot get confused by newly added parens. The current regex is\r\n` +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)`\r\nor with the optional colons fixed\r\n` +([^ \"=]*)=(?:\"([^\"]*)\"|([^ \"=]*)) *(?:,|$)`\r\nbut instead you could use\r\n` +(?<key>[^ \"=]*)=(?:\"(?<value1>[^\"]*)\"|(?<value2>[^ \"=]*)) *(?:,|$)`\r\nsnd then you can use `matcher.group(\"key\")`, `matcher.group(\"value1\")` and `matcher.group(\"value2\")`.",
        "And also the list of authentication parameters is defined to be comma-separated, not white-space separated or comma-whitespace-separated, but your current regex only matches parameters that follow spaces, that is also not correct.",
        "Yikes. Wanna send a pull request?",
        "I'm currently trying to write a parser that handles the spec as work around, maybe. If I'm successful I maybe also make a PR out of it.",
        "Please do! Ideally you don\u2019t need hundreds of lines of code to get something satisfactory.",
        "Also spaces around the \"=\" in the authentication parameter are not considered correctly.\r\nHere you can find ABNF description of the format of the headers: https://tools.ietf.org/html/rfc7235#appendix-C\r\n\r\nHere a small selection of challenges that should all work, but only the first one is working as exected:\r\n```\r\n ,  , Basic realm=foo\r\nBasic realm=foo\r\nBasic realm=\"foo\"\r\nBasic realm = \"foo\"\r\nDigest,Basic realm=\"foo\"\r\nDigest,Basic ,,realm=\"foo\"\r\nDigest, Basic realm=\"foo\"\r\nDigest, Basic ,,realm=\"foo\"\r\nDigest,,,, Basic ,,realm=\"foo\"\r\nDigest,,,, Basic ,,,realm=\"f\\\"o\\o\"\r\n```",
        "~Oh, it's even worse, even with a space in the header it does not work, as the code depends on a realm being specified, while https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Proxy-Authenticate show that it is optional.~ (For `Basic` auth `realm` indeed is required)\r\n\r\nAnd https://tools.ietf.org/html/rfc7235#section-4.1 defines that `User agents are advised to take special care in parsing the field value, as it might contain more than one challenge, and each challenge can contain a comma-separated list of authentication parameters. Furthermore, the header field itself can occur multiple times.` and the mentioned method cares about multiple headers, but not about mutliple challenges in one header.",
        "76 lines of code and 18 `private static final` fields, so actually not even one hundred. :-D\r\nAnd it works fully compliant to RFC 7235 for any auth scheme.\r\nWell, for the PR I probably have to rewrite it a tiny bit to become 1.7-compatible as it is currently written in 1.8 and throws away anything non-`Basic`.\r\nBut as hundred**s** would imply at least 200, I think I'll stay below that. :-D",
        "Great!"
    ],
    "1584": [],
    "901": [],
    "1445": [],
    "4258": [
        "@swankjesse @JakeWharton @jwendell : Please share your thougthts on this :-)",
        "The scenario:\r\n\r\nThe unit test in question deliberately tries to set up a websocket to a pod that doesn't exist:\r\n\r\nhttps://github.com/fabric8io/kubernetes-client/blob/f7843cff15b239e4466167f63c599fc9ca4e4146/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/internal/PodOperationsImpl.java#L267\r\n\r\nThe connection will obviously return a 404, which will result in a `WebSocketListener` being notified of failure:\r\n\r\nhttps://github.com/fabric8io/kubernetes-client/blob/f7843cff15b239e4466167f63c599fc9ca4e4146/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/internal/ExecWebSocketListener.java#L211-L237\r\n\r\n(In the code as it exists the `Response` supplied to `onFailure` is never closed; there's a [pull request](https://github.com/fabric8io/kubernetes-client/pull/1198) to deal with that, but it's also [an open question](https://stackoverflow.com/questions/52212757/must-an-end-user-close-the-response-object-received-in-various-methods-in-a-webs) as to whether the `Response` should be closed here or if OkHttp will take care of it somewhere else.)\r\n\r\nBy this point, the `ConnectInterceptor` has allocated a new connection:\r\n\r\nhttps://github.com/square/okhttp/blob/0b2486f7f32fbe21c8630f330d240546a15beb66/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java#L42\r\n\r\nHowever, this allocation is never released.  **Specifically, even when all response bodies are closed, those operations can't ever \"get at\" the stream allocation to deallocate it.**  In other words, `ResponseBody#close()` ultimately invokes this:\r\n\r\nhttps://github.com/square/okhttp/blob/0b2486f7f32fbe21c8630f330d240546a15beb66/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java#L421-L430\r\n\r\n\u2026but nothing actually deallocates the stream housed by the `Http1Codec` object referenced by the `FixedLengthSource` object.  As a result, stream allocation references with `null` referents eventually get noticed by the cleanup loop:\r\n\r\nhttps://github.com/square/okhttp/blob/5b37cda9e00626f43acf354df145fd452c3031f1/okhttp/src/main/java/okhttp3/ConnectionPool.java#L266-L271\r\n\r\n",
        "Sounds like a bug we can fix in OkHttp!",
        "Thanks @swankjesse; do bear in mind I'm not deeply familiar with the OkHttp code so my analysis may be lacking.",
        "So I understand correctly, you're saying it's the HttpCodec1 not properly releasing its streamAllocation once the interceptor chain is complete?",
        "I guess so; [my comment above](https://github.com/square/okhttp/issues/4258#issuecomment-420370913) is the best I could do!  Thanks for looking into this.",
        "No problem. It's a blocking issue for us, so I need to resolve. Getting familiar with the okhttp code base. \r\n\r\nI may have found a fix, just running some tests before I submit for review.",
        "Started a pull request for this issue -- hoping to spark a discussion about implementation of this fix.",
        "Thanks a lot @swankjesse , any possible ETA when 3.12 is going to be released",
        "I don\u2019t provide time estimates for open source things. You should build your own snapshot if you need something urgently.\r\n\r\nhttps://github.com/square/okhttp/milestone/28"
    ],
    "4137": [],
    "2139": [],
    "3241": [],
    "4266": [
        "At the moment I feel we\u2019re unprepared to build & test correct behavior on RoboVM. It\u2019s awesome that it has ever worked, and I don\u2019t want to do anything that\u2019ll harm it.\r\n\r\nBut we don\u2019t have the capacity to anticipate or address problems on that platform. Heck, supporting both Android and Java is a headache.\r\n\r\nIf RoboVM users would like to submit small patches or workarounds, I\u2019m receptive. I\u2019m closing this because it isn\u2019t actionable by the OkHttp project team. If there\u2019s another place to track it (RoboVM\u2019s project? A RoboVM fork?) that works for me.",
        "Fair enough. However this should be very easy to fix. Since you say you are receptive to small patches / workarounds, I'll prepare a PR and submit it for review.",
        "@guillerodriguez How does RoboVM run?  Do you want to run as close to Android mode as possible? Or do you want to run using JDK code as much as possible behind the Android APIs?\r\n\r\nI guess I'm asking whether you ideally want to run AndroidPlatform or Java9Platform?\r\n\r\nI'm assuming the former, and a minor fix will get past this issue.",
        "This is also a problem on Multi-OS Engine (similar to RoboVM) when running on iOS and I run into the same problem with the android.os.Build.VERSION class not being found.",
        "@yschimke \r\n\r\n> How does RoboVM run? Do you want to run as close to Android mode as possible? Or do you want to run using JDK code as much as possible behind the Android APIs?\r\n\r\nI believe as close to Android mode as possible. The runtime is based on Android 4.something, it supports conscrypt, and has setUseSessionTickets, setHostname, etc."
    ],
    "4267": [
        "FWIW I've used other http libraries in the past because of the lack of support for the bidirectional streams support.  It's a useful feature but does make it more complicated than the request/response model.\r\n\r\ne.g. https://github.com/rsocket/rsocket-cli/blob/master/src/main/kotlin/io/rsocket/cli/http2/Http2DuplexConnection.kt",
        "Yeah. That rsocket class has both Jetty and Netty. Yipes, I hope we can do smaller.",
        "@yschimke Can I work on this?",
        "@MONIKA-KUMAR-JETHANI nope, this is not appropriate for new contributors.",
        "@swankjesse I hope you can also, I'll happily cleanup and switch to OkHttp if you write this.   :)\r\n\r\nMaybe consider how the approach would fit with https://github.com/square/okhttp/pull/4014, the RFC is now at version 7 and I'd consider very likely to pass since websockets should be capable of going over HTTP/2.  The RFC overall is not WebSockets specific though.",
        "Are there plans to implement this in the near future?",
        "I\u2019ve been working with @oldergod on implementing gRPC on OkHttp. We\u2019ve learned that although the HTTP/2 transport layer permits multiple headers + data frames to be interleaved, the HTTP+HTTP/2 layering permits headers only before the data (headers) and after the data (trailers).\r\n\r\nFor HTTP requests there are no trailers after the request body.\r\n\r\nBecause duplex exists for gRPC and no other reason, we\u2019re going to change our APIs to support that use case only. In particular, we need to:\r\n\r\n1. Add an API for MockWebServer to enqueue the end-of-stream trailers. If trailers are to be provided they must be provided before the call to ResponseBody.close().\r\n2. Add an API for OkHttp to collect the end-of-stream trailers. These may only be collected after the response body stream has been exhausted.\r\n\r\nWe may also want to consider an API for OkHttp to write the request body without our `RequestBody` callback. That API is inconvenient when streaming an arbitrarily-large request.",
        "Almost done. Just need tests to confirm this stuff works:\r\n\r\n * [x] duplex with different kinds of HTTP redirects\r\n * [x] duplex with retries\r\n * [x] duplex with HTTP/1\r\n * [x] duplex with interceptors that access the request body\r\n * [x] interaction between duplex and write timeouts\r\n * [x] interaction between duplex and call timeouts\r\n * [x] duplex where the entire HTTP response is returned before the entire HTTP request is sent\r\n * [x] duplex and EventListener\r\n * [x] Fix HttpLoggingInterceptor to do something reasonable (maybe just don't do anything when isDuplex).\r\n * [x] Get rid of the Duplex interface and add default `isDuplex` to `RequestBody`",
        "# \ud83c\udf89",
        "yooooooooooooo"
    ],
    "2515": [],
    "2994": [],
    "155": [],
    "563": [],
    "307": [],
    "472": [],
    "130": [],
    "4282": [
        "We could union \u2019em. You\u2019re allowed to have multiple `Cookie` headers. Want to submit a pull request?!",
        "My understanding is that you can have multiple values in a single `Cookie` header (i.e. you can't have multiple `Cookie` headers, as per [RFC 6265][0]):\r\n\r\n> When the user agent generates an HTTP request, the user agent MUST\r\n> NOT attach more than one Cookie header\r\n\r\nA union of the cookie values sounds reasonable! There's still the question of which cookie value is authoritative if the cookie value is in the `CookieJar` as well as set on the `Request`. Taking the value set on the `Request` would solve the issue in our case.\r\n\r\n@yschimke - feel free to assign this one to me. I'll submit a patch in the next couple days.\r\n\r\n[0]: https://tools.ietf.org/html/rfc6265#section-5.4",
        "I think @swankjesse is against \"licking the cookie\", If you are worried, then I suggest putting up a PR even if it's still WIP.  Not sure if there is some other process for square employees :)",
        "As mentioned on PR #4490 I think it\u2019s simpler to say \u201ccookie jar _or_ user cookies, not both\u201d.\r\n\r\n@nicktrav if you\u2019ve got insight we\u2019re missing, please let me know!"
    ],
    "4059": [],
    "3451": [],
    "3539": [],
    "2882": [],
    "3510": [],
    "1317": [],
    "4313": [],
    "4376": [],
    "2020": [],
    "2542": [],
    "1391": [],
    "4319": [
        "Why milestone 3.12 based on above comments?",
        "Using \u201cnext release\u201d as a mechanism for \u201cshort list of things to consider for next release\u201d, with the expectation that it\u2019ll slip one or two. Gotta cut a release soon too.",
        "... I created a new milestone \u201cBacklog\u201d for issues that we\u2019ve triaged. ",
        "This step is done. Next step comes in 2020 with #4499! "
    ],
    "2658": [],
    "2905": [],
    "3747": [],
    "2163": [],
    "4329": [],
    "1172": [],
    "1103": [],
    "2385": [],
    "1554": [],
    "935": [],
    "1129": [],
    "2595": [],
    "466": [],
    "897": [],
    "65": [],
    "4360": [
        "HandshakeCertificatesTest.clientAndServer fails regardless of engine/fd socket being configured. Still investigating.",
        "cc @flooey - Any known reasons why a test using self signed certs to do SSL handshake (no http) would regress with conscrypt 1.3? ",
        "@flooey What's the story with logging in JDK builds?  It seems a lot less than the normal OpenJDK SSL logging, or am I missing something?  ",
        "The main thing in 1.3 was TLS 1.3 support, which I wouldn't expect to change much if you're aren't enabling it.  I can't think of anything else we changed in that release that would affect cert validation.\r\n\r\nWe disable logging in our release builds.  If you want to see everything that's happening, you can change `kWithJniTrace` to `true` in https://github.com/google/conscrypt/blob/master/common/src/jni/main/cpp/conscrypt/trace.cc and rebuild, that'll output traces of every JNI call to stdout.",
        "@flooey I'm still hoping for a SSL library that publishes handshake events via an API, and returns introspectible errors...",
        "You probably want to build the AAR (the conscrypt-android:build gradle target) and include that in your app instead of trying to change the platform copy of Conscrypt (which would require building large chunks of AOSP).",
        "@iddoeldor You'd need to change external/conscrypt/common/src/jni/main/cpp/conscrypt/trace.cc in AOSP and then rebuild AOSP and reflash.",
        "@iddoeldor I'm not sure why you can't reflash (or rebuild the OS on the emulator, whatever method you want), but without one of the flags in trace.cc set to true, there aren't any hooks to get debugging information or keys out.",
        "Flagged again in circleci\r\n\r\nhttps://534-5152285-gh.circle-artifacts.com/0/home/circleci/reports/okhttp-tls/build/reports/tests/test/classes/okhttp3.tls.HandshakeCertificatesTest.html#clientAndServer"
    ],
    "1453": [],
    "25": [],
    "3562": [],
    "3810": [],
    "3561": [],
    "4382": [],
    "1236": [],
    "4383": [
        "Write a custom dispatcher? Or use the QueueDispatcher and confirm that peek() returns null?",
        "Doesn't seem like there's any way to access the dispatcher. I get that I can do this with custom queue dispatcher, it just seems like it should be standard practice to check all enqueued responses were used as expected, so I was wondering if there wasn't a simpler way to do it."
    ],
    "4386": [
        "Good find!",
        "This is fixed now:\r\n\r\n```\r\nokcurl -v 'https://nghttp2.org/httpbin/redirect-to?url=https://www.twitter.com/robots.txt'\r\n\r\n[0 ms] callStart: Request{method=GET, url=https://nghttp2.org/httpbin/redirect-to?url=https://www.twitter.com/robots.txt, tags={}}\r\n[16 ms] dnsStart: nghttp2.org\r\n[190 ms] dnsEnd: [nghttp2.org/139.162.123.134, nghttp2.org/2400:8902:0:0:f03c:91ff:fe69:a454]\r\n[301 ms] connectStart: nghttp2.org/139.162.123.134:443 DIRECT\r\n[557 ms] secureConnectStart\r\n[1474 ms] secureConnectEnd: Handshake{tlsVersion=TLS_1_2 cipherSuite=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 peerCertificates=[CN=nghttp2.org, CN=Let's Encrypt Authority X3, O=Let's Encrypt, C=US] localCertificates=[]}\r\n[1474 ms] connectEnd: http/1.1\r\n[1476 ms] connectionAcquired: Connection{nghttp2.org:443, proxy=DIRECT hostAddress=nghttp2.org/139.162.123.134:443 cipherSuite=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 protocol=http/1.1}\r\n[1477 ms] requestHeadersStart\r\n[1479 ms] requestHeadersEnd\r\n[1480 ms] responseHeadersStart\r\n[1755 ms] responseHeadersEnd: Response{protocol=http/1.1, code=302, message=Found, url=https://nghttp2.org/httpbin/redirect-to?url=https://www.twitter.com/robots.txt}\r\n[1755 ms] responseBodyStart\r\n[1757 ms] responseBodyEnd: byteCount=0\r\n[1759 ms] connectionReleased\r\n[1759 ms] dnsStart: www.twitter.com\r\n[1939 ms] dnsEnd: [www.twitter.com/104.244.42.193, www.twitter.com/104.244.42.129]\r\n[1939 ms] connectStart: www.twitter.com/104.244.42.193:443 DIRECT\r\n[2030 ms] secureConnectStart\r\n[2361 ms] secureConnectEnd: Handshake{tlsVersion=TLS_1_2 cipherSuite=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 peerCertificates=[CN=twitter.com, OU=Twitter Security, O=\"Twitter, Inc.\", L=San Francisco, ST=California, C=US, SERIALNUMBER=4337446, OID.1.3.6.1.4.1.311.60.2.1.2=Delaware, OID.1.3.6.1.4.1.311.60.2.1.3=US, OID.2.5.4.15=Private Organization, CN=DigiCert SHA2 Extended Validation Server CA, OU=www.digicert.com, O=DigiCert Inc, C=US] localCertificates=[]}\r\n[2361 ms] connectEnd: http/1.1\r\n[2362 ms] connectionAcquired: Connection{www.twitter.com:443, proxy=DIRECT hostAddress=www.twitter.com/104.244.42.193:443 cipherSuite=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 protocol=http/1.1}\r\n[2362 ms] requestHeadersStart\r\n[2362 ms] requestHeadersEnd\r\n[2363 ms] responseHeadersStart\r\n[2460 ms] responseHeadersEnd: Response{protocol=http/1.1, code=200, message=OK, url=https://www.twitter.com/robots.txt}\r\n[2460 ms] responseBodyStart\r\n[2466 ms] responseBodyEnd: byteCount=52\r\n[2466 ms] connectionReleased\r\n[2466 ms] callEnd\r\nUser-agent: *\r\nDisallow: /\r\n```",
        "Brilliant! Thanks @amirlivneh!"
    ],
    "3210": [],
    "516": [],
    "527": [],
    "2034": [],
    "3843": [],
    "4407": [
        "Let's just abandon the bom. Seems like a lot of trouble for marginal benefit.",
        "IMHO BOMs have a great benefit, should I try provide a Pull request?",
        "@RalphEng Can you point to existing external projects and how they achieve the same?",
        "For example BOMs provided by Spring (org.springframework:spring-framework-bom5.1.2.RELEASE) provide only dependeies for Spring but not for there transitive dependencies. - But Spring uses Gradle for its build, so they used an other solution for this problem.\r\n\r\nAn other example is Hibernate OGM, they use slightly different solution: There Parent pom (org.hibernate.ogm:hibernate-ogm-parent:5.4.0.Final) use there bom (org.hibernate.ogm:hibernate-ogm-bom:5.4.0.Final) as its own parent (So they do not need to add an import of the bom in there normal modules).\r\n\r\nThe solution I described above is used in many of our company's own libaries. So far we have found no disadvantage or problem. Everything works, even maven release,",
        "@RalphEng would this PR above work?",
        "@yschimke at least you would need to add groupId and version to the bom-pom.  ...  I think this way would solve the problem with the inherited dependencies. But I do not know if there is an problem with maven release process.",
        "One more thing that was broken with this: https://github.com/square/okhttp/pull/4589",
        "I abandoned the BOM after it failed in Maven Central: https://github.com/square/okhttp/pull/4590",
        "Having a BOM for this kind of project with several modules is really useful."
    ],
    "370": [],
    "3287": [],
    "4415": [
        "Closing, but keeping around in case it reoccurs.",
        "Same again - https://travis-ci.org/square/okhttp/builds/459407515?utm_source=github_status&utm_medium=notification"
    ],
    "1038": [],
    "4419": [
        "Looks like we might crash trying to figure out what the remote hostname is. We only need this to name threads; we could fall back to something else.\r\n```\r\njava.lang.ClassCastException: jnr.unixsocket.UnixSocketAddress cannot be cast to java.net.InetSocketAddress\r\n    at okhttp3.internal.http2.Http2Connection$Builder.socket(Http2Connection.java:559)\r\n    at okhttp3.mockwebserver.MockWebServer$3.processConnection(MockWebServer.java:501)\r\n```",
        "We are facing numerous crashes related to your comment\r\n```\r\nFatal Exception: java.lang.ClassCastException: android.system.UnixSocketAddress cannot be cast to java.net.InetSocketAddress\r\n       at libcore.io.IoBridge.getLocalInetSocketAddress(IoBridge.java:700)\r\n       at libcore.io.IoBridge.connectDetail(IoBridge.java:197)\r\n       at libcore.io.IoBridge.connectErrno(IoBridge.java:185)\r\n       at libcore.io.IoBridge.connect(IoBridge.java:130)\r\n```\r\n\r\nWe are using version 3.9.0 of the library.\r\nAppears on Android OS 8.0.0 on Samsung and LG devices.",
        "Should `UnixDomainSocketFactory` and `UnixDomainServerSocketFactory` move to a new `okhttp-unixdomainsockets` Maven module to allow using them from both the UNIX domain sockets sample and MockWebServer tests?",
        "@kikin81 please report the bug to the device makers?\r\n\r\n@amirlivneh no. We won't need a dependency from MockWebServer to fix this bug.",
        "@swankjesse, ignore the mention of MockWebServer. But in whatever module this new test will be added, it will need to use `UnixDomainSocketFactory` and `UnixDomainServerSocketFactory` to reproduce the issue, right?",
        "I don't want to test all possible Socket implementations; the UNIX socket sample is just intended to show where OkHttp\u2019s extension points are.",
        "> We should add a test to confirm that it does.\r\n\r\nOK, my understanding of your statement in the issue description was that you\u2019re suggesting to add a unit test that confirms that MockWebServer + HTTP/2 + UNIX sockets works. \r\n"
    ],
    "4493": [],
    "2978": [],
    "2062": [],
    "4529": [],
    "46": [],
    "4427": [
        "Dupe of https://github.com/square/okhttp/issues/4208\r\n\r\nNow tracked in https://github.com/square/okhttp/issues/4178.  Are you using some particular setup e.g. Pre-Shared Keys?",
        "@andylizi it's also only presumably happening when it fails to verify hostname.  Maybe that is what is new, we now don't throw a clean error.\r\n\r\nThe change with 3.12 could be unrelated but causing this symptom e.g. we do something else differently, causing the verification to fail (which doesn't in 3.11), and then the same code fails here.",
        "> Are you using some particular setup e.g. Pre-Shared Keys?\r\n\r\nNo.... I don't think so.\r\n```java\r\nOkHttpClient client = new OkHttpClient.Builder()\r\n        .connectionPool(connectionPool)\r\n        .protocols(Collections.singletonList(Protocol.HTTP_1_1))\r\n        .retryOnConnectionFailure(false)\r\n        .proxySelector(proxySelector)\r\n        .build();\r\n\r\nRequest request = new Request.Builder()\r\n        .url(url)\r\n        .get()\r\n        .header(HttpHeaders.ACCEPT, \"text/html\")\r\n        .build();\r\n\r\ntry (Response response = client.newCall(request).execute()) {\r\n    // ...\r\n}\r\n```\r\n\r\n---\r\n\r\n#### SSL Server Test Report provided by [ssllabs.com](https://www.ssllabs.com/ssltest/index.html)\r\n![cert-chain](https://user-images.githubusercontent.com/12008103/49366179-a6411800-f723-11e8-9f3d-d9616a90132f.png)\r\n![cipher-suites](https://user-images.githubusercontent.com/12008103/49366182-a6d9ae80-f723-11e8-8832-5a079edf9d3e.png)\r\n![protocol-details](https://user-images.githubusercontent.com/12008103/49366464-5f075700-f724-11e8-90f9-614243aa036b.png)",
        "I'm also having this issue pls fix",
        "This seems to be rather potent with version 3.12.0, however that version also contains a fix for an issue of 3.11.0 with proxySelector being null on some JVMs. I'm twisted whether I should be using 3.12.0 with this issue or 3.11.0 with the other. I'd much appreciate a fix for this to void that problem."
    ],
    "801": [],
    "2439": [],
    "3829": [],
    "4443": [
        "@geaden can you check the fix above?",
        "Hi @swankjesse! I did check `okhttp-tls` version from your branch and the test passed. Thanks!"
    ],
    "2760": [],
    "4149": [],
    "3789": [],
    "598": [],
    "4451": [
        "Ugh, OkHttp shouldn't fail like this. It should detect IPv4 mapped addresses and respond accordingly.\r\n\r\nhttps://en.m.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses",
        "yeah, as you say,  \"::ffff:c0a8:1fe\" is a IPv4-mapped IPv6 addresses\r\nbut I'm confused, is OkHttp couldn't  request with IPv4-mapped IPv6 addresses ?\r\nor I was in a incorrect way?\r\n\r\nI also tried \"::ffff:192.0.2.128\"\u3001\"::192.0.2.128\"\u3001\"0000:0000:0000:0000:0000:FFFF:C0A8:01FE\"\r\nthey all throwed java.lang.AssertionError: Invalid IPv6 address\r\n\r\nvery thanks for you replay.",
        "Because it's an IPv4 address OkHttp will only use IPv4 to connect to this host.",
        "oh, thanks very much",
        "Still worth investigation: do we throw an error we shouldn't when attempting to decode something that looks like an IPv6 address?"
    ],
    "3846": [],
    "4456": [
        "Is this a problem in practice? What\u2019s the BOM and the reported charset?",
        "Could you create an executable test case?",
        "I was writing an Interceptor that takes an XML encoding from its pragma and puts it into the Content-Type header. Turns out okhttp is ignoring my Content-Type because the body has a BOM.",
        "You've got a BOM, a content-type header, and a pragma? And they disagree? My advice is to use UTF-8 everywhere and specify it everywhere.",
        "Indeed, that's my advice too.",
        "We should fix the documentation to mention how BOMs are used."
    ],
    "4457": [],
    "3399": [],
    "3857": [],
    "4470": [
        "One scenario where the connection pool is not always cleared in `tearDown()` is after running `recoverFromMultipleCancelReusesConnection()`. This condition fails because `allocations` has 1 element:\r\nhttps://github.com/square/okhttp/blob/5b37cda9e00626f43acf354df145fd452c3031f1/okhttp/src/main/java/okhttp3/ConnectionPool.java#L179\r\nAs a result, the connection is not removed from the pool and the next test starts with 1 connection in the pool."
    ],
    "2070": [],
    "1228": [],
    "3586": [],
    "3756": [],
    "3144": [],
    "4500": [
        "It appears that the problem is more general and happens when the response body has 0 bytes, with some servers:\r\n\r\n```\r\nokcurl -v https://nghttp2.org/httpbin/bytes/0\r\n\r\n[0 ms] callStart: Request{method=GET, url=https://nghttp2.org/httpbin/bytes/0, tags={}}\r\n[21 ms] dnsStart: nghttp2.org\r\n[24 ms] dnsEnd: [nghttp2.org/139.162.123.134, nghttp2.org/2400:8902:0:0:f03c:91ff:fe69:a454]\r\n[29 ms] connectStart: nghttp2.org/139.162.123.134:443 DIRECT\r\n[296 ms] secureConnectStart\r\n[1275 ms] secureConnectEnd: Handshake{tlsVersion=TLS_1_2 cipherSuite=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 peerCertificates=[CN=nghttp2.org, CN=Let's Encrypt Authority X3, O=Let's Encrypt, C=US] localCertificates=[]}\r\n[1275 ms] connectEnd: http/1.1\r\n[1276 ms] connectionAcquired: Connection{nghttp2.org:443, proxy=DIRECT hostAddress=nghttp2.org/139.162.123.134:443 cipherSuite=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 protocol=http/1.1}\r\n[1277 ms] requestHeadersStart\r\n[1278 ms] requestHeadersEnd\r\n[1279 ms] responseHeadersStart\r\n[1543 ms] responseHeadersEnd: Response{protocol=http/1.1, code=200, message=OK, url=https://nghttp2.org/httpbin/bytes/0}\r\n[1543 ms] responseBodyStart\r\n[1545 ms] responseBodyEnd: byteCount=0\r\n[1547 ms] connectionReleased\r\n```",
        "Tempted to change where we trigger the callEnd() event. We could do it by decorating the response body stream before we run the first application interceptor.",
        "Fixed!"
    ],
    "211": [],
    "2502": [],
    "4515": [
        "In some cases there is an actual issue in the code under test. For example, in `throwingOnOpenFailsImmediately`, an exception is thrown from `WebSocketListener.onOpen()`: https://github.com/square/okhttp/blob/32bf2f0fc10cc35e92d70a50436d84ef591a399a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java#L150-L152\r\n\r\nBut `onOpen()` is called and throws before `initReaderAndWriter()`, which updates `this.streams` with the allocated streams, is called:\r\nhttps://github.com/square/okhttp/blob/550afce3f855115bbb7de9b2080684dd8a6e1fe0/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java#L206-L212\r\n\r\nAs a result, the allocated streams are never released in `failWebSocket()`:\r\nhttps://github.com/square/okhttp/blob/550afce3f855115bbb7de9b2080684dd8a6e1fe0/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java#L564-L564\r\n\r\n",
        "Fixed via TaskRunner (we are better at cleanup) and other related changes."
    ],
    "1634": [],
    "2927": [],
    "2713": [],
    "431": [],
    "818": [],
    "255": [],
    "4464": [],
    "3413": [],
    "1248": [],
    "398": [],
    "835": [],
    "940": [],
    "2528": [],
    "1169": [],
    "4564": [
        "@swankjesse ",
        "Related to https://github.com/square/okhttp/issues/3876\r\n\r\nShould confirm we got all cases.",
        "Is it possible to backport this to 3.12.x?",
        "@valepakh pull request?",
        "@swankjesse  my application support android4.x but this bug very critical\r\ncan't send multipart Korean  file name\r\nneed backport this to 3.12.x",
        "@Movill-Tony-p awesome. Please do.",
        "@swankjesse I actually filed pull request #4618 a while back, it works ok, just doesn't pass the build due to the java changes.",
        "Thanks so much for this backport, @valepakh, and for the merge, @swankjesse. You're helping folks collect data in challenging environments (and languages with Unicode characters). \ud83c\udf89"
    ],
    "551": [],
    "4727": [],
    "4569": [
        "Can fix!",
        "@pombredanne thanks for flagging this. Lemme know if I\u2019ve missed anything! #4657",
        "@swankjesse that's good enough... though it would be best if this was surfaced in the generated POM too (such that tools can pick this up upfront and this is more easy to grok such as in https://clearlydefined.io/ and https://github.com/nexB/scancode-toolkit )",
        "Is specifying both licenses in the pom misleading? I wouldn't want someone\nto think the this codebase is entirely dual licensed. Not sure of the\nprecedent for this.\n\nOn Thu, Apr 4, 2019, 6:40 AM Philippe Ombredanne <notifications@github.com>\nwrote:\n\n> @swankjesse <https://github.com/swankjesse> that's good enough... though\n> it would be best if this was surfaced in the generated POM too (such that\n> tools can pick this up upfront and this is more easy to grok such as in\n> https://clearlydefined.io/ and https://github.com/nexB/scancode-toolkit )\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/square/okhttp/issues/4569#issuecomment-479845483>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEESoAnGJYSABGFo7OIrbBSFepHPVWks5vddaQgaJpZM4aLXOa>\n> .\n>\n",
        "@JakeWharton I guess that the license terms to consider for the whole are `Apache-2.0 AND MPL-2.0` yet I reckon your concern that the latter is not the same as the former. The POM is reasonably weak to express such things in general (this is just a list of licenses..) and I am not sure Gradle-generated POMs can do much  in this area.\r\nOne possibly could be to add a <comment> in the <license> tag for the Apache license at least.\r\nATM your POMs seem rather light on the license details side in general :wink:  : http://central.maven.org/maven2/com/squareup/okhttp3/okhttp/3.14.0/okhttp-3.14.0.pom\r\n",
        "Yeah you have to traverse the hierarchy of parent poms to create the\ncanonical pom (I forgot the real term) for each artifact. The immediate\nparent has the <licenses> section:\nhttp://central.maven.org/maven2/com/squareup/okhttp3/parent/3.14.0/parent-3.14.0.pom\n.\n\nOn Thu, Apr 4, 2019 at 11:03 AM Philippe Ombredanne <\nnotifications@github.com> wrote:\n\n> @JakeWharton <https://github.com/JakeWharton> I guess that the license\n> terms to consider for the whole are Apache-2.0 AND MPL-2.0 yet I reckon\n> your concern that the latter is not the same as the former. The POM is\n> reasonably weak to express such things in general (this is just a list of\n> licenses..) and I am not sure Gradle-generated POMs can do much in this\n> area.\n> One possibly could be to add a in the tag for the Apache license at least.\n> ATM your POMs seem rather light on the license details side in general \ud83d\ude09\n> :\n> http://central.maven.org/maven2/com/squareup/okhttp3/okhttp/3.14.0/okhttp-3.14.0.pom\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/square/okhttp/issues/4569#issuecomment-479935273>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEERTBPIbbvo_Bx-x-hcj-8ZJamWtgks5vdhRKgaJpZM4aLXOa>\n> .\n>\n",
        "@JakeWharton re:\r\n\r\n> traverse the hierarchy of parent poms\r\n\r\nThis feels like a rather fragmented path to get the information. This also means that at runtime (where only a JAR and no parent POM is around), there is no license information available inside the JAR",
        "I'm just relaying how the Maven pom works. We didn't invent this system. If\nthis is unsuitable for some reason, please open a separate issue.\n\nOn Fri, Apr 5, 2019 at 5:29 AM Philippe Ombredanne <notifications@github.com>\nwrote:\n\n> @JakeWharton <https://github.com/JakeWharton> re:\n>\n> traverse the hierarchy of parent poms\n>\n> This feels like a rather fragmented path to get the information. This also\n> means that at runtime (where only a JAR and no parent POM is around), there\n> is no license information available inside the JAR\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/square/okhttp/issues/4569#issuecomment-480210470>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEbzGK3k_atjXvV9XJhV-v6aNymInks5vdxdjgaJpZM4aLXOa>\n> .\n>\n"
    ],
    "3288": [],
    "863": [],
    "4583": [
        "Since 3.13 is approaching ultra fast any way to confirm / infirm this please ? :)",
        "I don't think it's going to be the line you referenced; that only occurs if the executor service gets shut down.\r\n\r\nIf you have a lead on the cause we might be able to land something before the release. Otherwise there's always another release around the corner.",
        "Worth a look!",
        "Thanks, and actually my remark about 3.13 was more about the fear that since it's not \"security\" when 3.13 is out such fix would not make it to 3.12.\r\n\r\nFor my knowledge, since race conditions is something I totally fail at reproducing / testing is there some specific things to know / tools to help with that?",
        "@swankjesse The file was modified after the report ;)\r\n\r\nThe line is now https://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/RealCall.java#L209\r\n\r\n```\r\n        Response response = getResponseWithInterceptorChain();\r\n        !!! Possible race condition here !!!!\r\n        if (retryAndFollowUpInterceptor.isCanceled()) {\r\n          signalledCallback = true;\r\n          responseCallback.onFailure(RealCall.this, new IOException(\"Canceled\"));\r\n        } else {\r\n          signalledCallback = true;\r\n          responseCallback.onResponse(RealCall.this, response);\r\n        }\r\n}\r\n```\r\n",
        "@JakeWharton continuing here to try to repro.\r\n\r\nI'm facing an issue as can't get StrictMode to trigger in tests :(\r\nHow can I test if a response / body is closed ? I can't find a way.",
        "You might need to induce garbage collection to trigger the bug.",
        "I recently rearranged a lot of code in RetryAndFollowUpInterceptor, and that _might_ have improved things.",
        "Not sure I'm a fan of might :(\r\n\r\nTook me time to find the 90% sure source, and with that refactor I'm now sure this won't be fixed in 3.12.x\r\nI can't migrate to 3.13 soon so I'm quite stuck.\r\n\r\nWould be nice to help build proper tests for the future to have a way to check that a response was closed can't rely on Android Strict mode to detect leaks for a library that is not only Android even if I can get it work in unit tests.\r\n\r\n@swankjesse  Anyway new code still have the exact same issue:\r\n\r\nhttps://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/RealCall.java#L192\r\n\r\n```\r\nResponse response = getResponseWithInterceptorChain();\r\n!!!! Race condition here another thread can cancel the call exactly here !!!!!\r\nif (transmitter.isCanceled()) throw new IOException(\"Canceled\");\r\n```\r\n\r\nProper code should be\r\n\r\n```\r\nResponse response = getResponseWithInterceptorChain();\r\nif (transmitter.isCanceled()) {\r\n   if (response != null && response.body != null) response.close();\r\n   throw new IOException(\"Canceled\");\r\n}\r\n```\r\n\r\n"
    ],
    "4588": [
        "There are more tests fail on this Java version in the 3.12.x branch as well, see build https://travis-ci.org/square/okhttp/builds/493730185 from the PR #4618 \r\nLooking at the changelog, it's probably [JDK-8211883 : Disable anon and NULL cipher suites](https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8211883)"
    ],
    "4316": [],
    "4592": [
        "Thanks for the thorough bug report. Definitely helps to know that the easy workarounds won't work!",
        "Ick. So the linked PR deleted a bunch of unsafe reflection code to support fetching trust roots on Android 14-16, and your case was exercising that too because the Android APIs were throwing.\r\n\r\nI think the right fix is to just restore this code path and comment it as \u201cfor Android 21-23\u201d instead of \u201c14-16\u201d. We can do this this morning and cut 3.13.1.\r\n\r\nGreat bug reports help us to move fast. Thanks! ",
        "Thanks for your quick response!\r\n\r\nFor what it's worth, I opened up a discussion to get rid of that cert-whitelisting requirement so that could get rid of all this ickiness by removing the feature. Of course that would not help other people trying to use custom trust managers.",
        "@laalto fix is merged. Could you verify quick & I\u2019ll cut an OkHttp 3.13.1 release?",
        "Verified with 3.13.1. No more crashes; connectivity-related tests passing.",
        "Yay, thanks again.",
        "I still see this on 3.13.1",
        "@dj-4war paste a stacktrace in a new issue please."
    ],
    "779": [],
    "4000": [],
    "4603": [
        "The test coverage pre-events and events specific is pretty good, so if you can run that gauntlet, you should be pretty safe.  :)",
        "Happy with where this landed. Thanks @yschimke, @oldergod, and @amirlivneh for quick code reviews!"
    ],
    "1668": [],
    "2540": [],
    "308": [],
    "786": [],
    "4633": [
        "Just [happened](https://travis-ci.org/square/okhttp/jobs/503531285) in one my PRs with openjdk8.",
        "If we looked at circleci, we could use the test metadata collection to spot these sorts of problems sooner.\r\n\r\nhttps://circleci.com/docs/api/v1-reference/#test-metadata\r\nhttps://circleci.com/docs/2.0/insights/\r\n\r\nOn Travis, I think we probably need to rely on junit timeout rules.  I'll put up a PR see if we can pin it down.",
        "Going to hit restart on this a few times\r\n\r\nhttps://travis-ci.org/square/okhttp/builds/503816334?utm_source=github_status&utm_medium=notification",
        "It may be faster to do **More options -> Trigger Build** multiple times until you hit the limit.",
        "Or land as is, and see when it fails in master, and on which tests.  ",
        "The new timeout was triggered for HttpOverHttp2Test.recoverFromCancelReusesConnection() in https://travis-ci.org/square/okhttp/jobs/504609207.",
        "```\r\nokhttp3.internal.http2.HttpOverHttp2Test\r\n10:12:15:907 [ERROR] recoverFromCancelReusesConnection[h2](okhttp3.internal.http2.HttpOverHttp2Test)  Time elapsed: 5.006 s  <<< ERROR!\r\norg.junit.runners.model.TestTimedOutException: test timed out after 5 seconds\r\n\tat okhttp3.internal.http2.HttpOverHttp2Test.callAndCancel(HttpOverHttp2Test.java:909)\r\n\tat okhttp3.internal.http2.HttpOverHttp2Test.recoverFromCancelReusesConnection(HttpOverHttp2Test.java:856)\r\n10:12:15:908 [ERROR] concurrentHttp2ConnectionsDeduplicated[h2](okhttp3.internal.http2.HttpOverHttp2Test)  Time elapsed: 0.215 s  <<< FAILURE!\r\njava.lang.AssertionError: expected:<1> but was:<2>\r\n\tat okhttp3.internal.http2.HttpOverHttp2Test.concurrentHttp2ConnectionsDeduplicated(HttpOverHttp2Test.java:1415)\r\n10:12:15:908 [ERROR] cancelWithStreamNotCompleted[h2](okhttp3.internal.http2.HttpOverHttp2Test)  Time elapsed: 0.167 s  <<< FAILURE!\r\njava.lang.AssertionError: expected:<1> but was:<2>\r\n\tat okhttp3.internal.http2.HttpOverHttp2Test.cancelWithStreamNotCompleted(HttpOverHttp2Test.java:770)\r\n\r\n```",
        "A possible scenario is that https://github.com/square/okhttp/blob/12bc2b7bde7cbf70be932729045120dc021e25e7/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java#L909 waits forever, possibly when we cancel the call in some very specific timing where cancellation doesn't take effect.",
        "There may be multiple failure modes here. This is one of them: While in most runs, the first request is canceled before the client starts to read the response body, in some runs, it's canceled after the client starts to read the response body and the first call doesn't fail as expected.",
        "In another failure mode, the first request is cancelled before the server dispatches the first mocked response from the queue. The first mocked response, which is set to send a body after a 10 second delay, is then used to respond to the second request, which triggers the 5 second test timeout.",
        "Haven't seen this hang recently, closing."
    ],
    "1310": [],
    "1828": [],
    "3839": [],
    "3127": [],
    "2887": [],
    "11": [],
    "670": [],
    "4646": [],
    "299": [],
    "2033": [],
    "1115": [],
    "3330": [],
    "4658": [
        "Nice find. Can fix.",
        "I was playing with this and experimented running websockets calls over our new duplex mechanisms. Seems doable though there are some drawbacks. We\u2019d need `GET` upgrade requests to have a duplex body! But the upside is you\u2019d be able to optimistically send request frames before the response was received.\r\n\r\n",
        "Not sure if strictly related, but I've just seen `WebSocketHttpTest.missingConnectionHeader` fail (see #4695)"
    ],
    "3094": [],
    "4346": [],
    "762": [],
    "3580": [],
    "2692": [],
    "4682": [
        "PR(#4693) sent"
    ],
    "2039": [],
    "4685": [
        "PR: https://github.com/square/okhttp/pull/4686"
    ],
    "941": [],
    "4247": [],
    "391": [],
    "2326": [],
    "545": [],
    "249": [],
    "2647": [],
    "4695": [
        "The stacktrace is a little odd, but managed to get it failing quite quickly via IDE:\r\n\r\n```\r\njava.lang.AssertionError: \r\nExpected :0\r\nActual   :1\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\r\n\tat org.junit.Assert.assertEquals(Assert.java:645)\r\n\tat org.junit.Assert.assertEquals(Assert.java:631)\r\n\tat okhttp3.TestUtil.ensureAllConnectionsReleased(TestUtil.java:91)\r\n\tat okhttp3.internal.ws.WebSocketHttpTest.missingConnectionHeader(WebSocketHttpTest.java:309)\r\n```\r\n\r\nLooking into it",
        "It appears the queued websocket call as result of websocket.connect() is sometimes not consumed by the time the pool is evicted, hence the connection sticks around. Looking into how to guarantee that the call is consumed.",
        "Correction: the call is consumed (since client listener asserts failure), but the transmitter associated with the connection has not been removed by the time evictAll is called.",
        "`exchange.webSocketUpgradeFailed()` call is what triggers transmitters to be removed, so I've moved that up before calling `failWebSocket` and `closeQuietly` and that might do the trick?",
        "PR (#4696)"
    ],
    "3746": [],
    "939": [],
    "312": [],
    "212": [],
    "2790": [],
    "4720": [],
    "4733": [
        "```\r\njava.lang.AssertionError: \r\nExpecting:\r\n  <58.0>\r\nto be close to:\r\n  <60.0>\r\nby less than <1.0> but difference was <2.0>.\r\n(a difference of exactly <1.0> being considered valid)\r\n```"
    ],
    "4734": [],
    "3141": [],
    "2019": [],
    "3481": [],
    "739": [],
    "2806": [],
    "913": [],
    "1004": [],
    "3005": [],
    "4725": [],
    "1725": [],
    "399": [],
    "4397": [],
    "629": [],
    "3718": [],
    "1527": [],
    "3143": [],
    "895": [],
    "3008": [],
    "1984": [],
    "1852": [],
    "1247": [],
    "152": [],
    "668": [],
    "1802": [],
    "609": [],
    "1321": [],
    "3000": [],
    "3505": [],
    "1347": [],
    "2010": [],
    "3877": [],
    "3408": [],
    "2596": [],
    "368": [],
    "3611": [],
    "1302": [],
    "66": [],
    "860": [],
    "4164": [],
    "2445": [],
    "3866": [],
    "1588": [],
    "722": [],
    "3405": [],
    "727": [],
    "165": [],
    "902": [],
    "2307": [],
    "2665": [],
    "2059": [],
    "3901": [],
    "2405": [],
    "4585": [],
    "380": [],
    "1089": [],
    "3262": [],
    "310": [],
    "2868": [],
    "4296": [],
    "1491": [],
    "186": [],
    "1140": [],
    "656": [],
    "1023": [],
    "68": [],
    "2917": [],
    "4444": [],
    "1713": [],
    "3753": [],
    "2284": [],
    "1875": [],
    "2955": [],
    "3332": [],
    "944": [],
    "1765": [],
    "3713": [],
    "381": [],
    "2797": [],
    "1264": [],
    "2006": [],
    "1474": [],
    "1944": [],
    "973": [],
    "3490": [],
    "117": [],
    "52": [],
    "667": [],
    "3952": [],
    "48": [],
    "1177": [],
    "1120": [],
    "4261": [],
    "2819": [],
    "4609": [],
    "4058": [],
    "2140": [],
    "4643": [],
    "1450": [],
    "4503": [],
    "1002": [],
    "4409": [],
    "3134": [],
    "199": [],
    "3558": [],
    "4680": [],
    "4516": [],
    "1783": [],
    "1160": [],
    "3912": [],
    "494": [],
    "4270": [],
    "1238": [],
    "3511": [],
    "2082": [],
    "4189": [],
    "2091": [],
    "602": [],
    "2816": [],
    "4550": [],
    "1104": [],
    "2850": [],
    "2712": [],
    "2366": [],
    "3875": [],
    "3574": [],
    "143": [],
    "1143": [],
    "16": [],
    "2354": [],
    "2129": [],
    "4072": [],
    "741": [],
    "3231": [],
    "3734": [],
    "628": [],
    "1614": [],
    "1320": [],
    "4600": [],
    "3744": [],
    "4613": [],
    "2583": [],
    "3709": [],
    "1214": [],
    "1481": [],
    "217": [],
    "2320": [],
    "1492": [],
    "1107": [],
    "1595": [],
    "170": [],
    "1072": [],
    "4046": [],
    "69": [],
    "4657": [],
    "4136": [],
    "4151": [],
    "4593": [],
    "422": [],
    "1231": [],
    "914": [],
    "2929": [],
    "4705": [],
    "1581": [],
    "3140": [],
    "361": [],
    "1564": [],
    "1122": [],
    "4230": [],
    "4060": [],
    "4381": [],
    "12": [],
    "451": [],
    "1323": [],
    "4498": [],
    "844": [],
    "4262": [],
    "2866": [],
    "997": [],
    "3824": [],
    "1270": [],
    "3398": [],
    "2468": [],
    "1507": [],
    "1851": [],
    "3120": [],
    "738": [],
    "1263": [],
    "3489": [],
    "765": [],
    "858": [],
    "4128": [],
    "4271": [],
    "4242": [],
    "4442": [],
    "2586": [],
    "3567": [],
    "3832": [],
    "2727": [],
    "1633": [],
    "4410": [],
    "2703": [],
    "369": [],
    "3764": [],
    "728": [],
    "1541": [],
    "1478": [],
    "1856": [],
    "3570": [],
    "2444": [],
    "2574": [],
    "3871": [],
    "1312": [],
    "4402": [],
    "2430": [],
    "3311": [],
    "1669": [],
    "1218": [],
    "726": [],
    "4565": [],
    "129": [],
    "1607": [],
    "3283": [],
    "2164": [],
    "1559": [],
    "1268": [],
    "2388": [],
    "574": [],
    "536": [],
    "1012": [],
    "1858": [],
    "2776": [],
    "100": [],
    "1145": [],
    "208": [],
    "1519": [],
    "3563": [],
    "677": [],
    "952": [],
    "3766": [],
    "723": [],
    "3492": [],
    "2666": [],
    "1126": [],
    "2688": [],
    "683": [],
    "3755": [],
    "2118": [],
    "2520": [],
    "2177": [],
    "3544": [],
    "3161": [],
    "643": [],
    "861": [],
    "3972": [],
    "4256": [],
    "55": [],
    "710": [],
    "1273": [],
    "1819": [],
    "2796": [],
    "171": [],
    "425": [],
    "1282": [],
    "383": [],
    "946": [],
    "1449": [],
    "2904": [],
    "427": [],
    "3576": [],
    "2492": [],
    "4549": [],
    "197": [],
    "2485": [],
    "721": [],
    "4234": [],
    "2615": [],
    "4476": [],
    "3026": [],
    "867": [],
    "37": [],
    "2539": [],
    "3543": [],
    "2972": [],
    "4336": [],
    "2030": [],
    "1956": [],
    "2953": [],
    "1618": [],
    "2885": [],
    "1170": [],
    "3001": [],
    "3870": [],
    "4576": [],
    "23": [],
    "4521": [],
    "192": [],
    "3434": [],
    "244": [],
    "2417": [],
    "2026": [],
    "989": [],
    "2702": [],
    "3013": [],
    "882": [],
    "33": [],
    "47": [],
    "2167": [],
    "394": [],
    "524": [],
    "731": [],
    "365": [],
    "4732": [],
    "1174": [],
    "1299": [],
    "3522": [],
    "4130": [],
    "3811": [],
    "1553": [],
    "2072": [],
    "634": [],
    "652": [],
    "2529": [],
    "2332": [],
    "1715": [],
    "1834": [],
    "1010": [],
    "4375": [],
    "30": [],
    "1292": [],
    "5": [],
    "3869": [],
    "547": [],
    "4420": [],
    "1657": [],
    "1662": [],
    "39": [],
    "2110": [],
    "840": [],
    "1267": [],
    "517": [],
    "4956": [],
    "395": [],
    "1293": [],
    "2187": [],
    "2212": [],
    "550": [],
    "1077": [],
    "4153": [],
    "325": [],
    "4479": [],
    "408": [],
    "970": [],
    "2226": [],
    "1977": [],
    "2969": [],
    "2246": [],
    "245": [],
    "4109": [],
    "1957": [],
    "2989": [],
    "3799": [],
    "2043": [],
    "792": [],
    "4157": [],
    "1326": [],
    "4116": [],
    "3476": [],
    "3838": [],
    "804": [],
    "2645": [],
    "2686": [],
    "415": [],
    "94": [],
    "1030": [],
    "4719": [],
    "2614": [],
    "3598": [],
    "2722": [],
    "911": [],
    "392": [],
    "121": [],
    "3696": [],
    "641": [],
    "4581": [],
    "1578": [],
    "2220": [],
    "4088": [],
    "1390": [],
    "2863": [],
    "61": [],
    "1600": [],
    "3885": [],
    "495": [],
    "883": [],
    "3068": [],
    "2741": [],
    "490": [],
    "1006": [],
    "1847": [],
    "1591": [],
    "3284": [],
    "1623": [],
    "2597": [],
    "168": [],
    "3551": [],
    "3293": [],
    "4314": [],
    "1164": [],
    "672": [],
    "2025": [],
    "4511": [],
    "345": [],
    "957": [],
    "250": [],
    "445": [],
    "2162": [],
    "2004": [],
    "862": [],
    "1295": [],
    "2697": [],
    "987": [],
    "2478": [],
    "2732": [],
    "4032": [],
    "3390": [],
    "774": [],
    "1604": [],
    "3232": [],
    "2936": [],
    "2374": [],
    "4416": [],
    "5240": [],
    "500": [],
    "3777": [],
    "235": [],
    "2105": [],
    "709": [],
    "2496": [],
    "622": [],
    "3032": [],
    "302": [],
    "2347": [],
    "4084": [],
    "4590": [],
    "1760": [],
    "166": [],
    "3443": [],
    "985": [],
    "3139": [],
    "1488": [],
    "785": [],
    "4394": [],
    "3700": [],
    "509": [],
    "994": [],
    "2086": [],
    "4491": [],
    "2155": [],
    "808": [],
    "467": [],
    "4167": [],
    "161": [],
    "2128": [],
    "1272": [],
    "150": [],
    "2085": [],
    "1896": [],
    "429": [],
    "134": [],
    "201": [],
    "1196": [],
    "98": [],
    "1794": [],
    "1288": [],
    "4285": [],
    "2563": [],
    "1176": [],
    "2661": [],
    "489": [],
    "384": [],
    "3285": [],
    "3516": [],
    "92": [],
    "3237": [],
    "4237": [],
    "24": [],
    "1286": [],
    "4388": [],
    "1529": [],
    "1528": [],
    "601": [],
    "323": [],
    "231": [],
    "2992": [],
    "3852": [],
    "209": [],
    "1848": [],
    "620": [],
    "1232": [],
    "1663": [],
    "1506": [],
    "1674": [],
    "96": [],
    "4217": [],
    "2758": [],
    "3540": [],
    "1204": [],
    "471": [],
    "4074": [],
    "2789": [],
    "375": [],
    "556": [],
    "4628": [],
    "558": [],
    "1202": [],
    "3960": [],
    "4660": [],
    "2087": [],
    "4280": [],
    "3977": [],
    "4089": [],
    "3888": [],
    "544": [],
    "301": [],
    "561": [],
    "826": [],
    "418": [],
    "2711": [],
    "140": [],
    "520": [],
    "438": [],
    "26": [],
    "3456": [],
    "4": [],
    "4656": [],
    "289": [],
    "1960": [],
    "953": [],
    "1580": [],
    "697": [],
    "693": [],
    "645": [],
    "172": [],
    "4617": [],
    "615": [],
    "813": [],
    "4620": [],
    "1939": [],
    "453": [],
    "1113": [],
    "573": [],
    "712": [],
    "4659": [],
    "1855": [],
    "1249": [],
    "928": [],
    "3462": [],
    "955": [],
    "3414": [],
    "295": [],
    "976": [],
    "492": [],
    "1229": [],
    "3853": [],
    "3359": [],
    "1665": [],
    "4129": [],
    "2325": [],
    "2174": [],
    "3743": [],
    "834": [],
    "2285": [],
    "355": [],
    "4676": [],
    "972": [],
    "3286": [],
    "1226": [],
    "1101": [],
    "3444": [],
    "1485": [],
    "2111": [],
    "2907": [],
    "603": [],
    "4307": [],
    "4123": [],
    "4373": [],
    "4639": [],
    "5004": [],
    "3668": [],
    "1473": [],
    "3186": [],
    "1117": [],
    "2183": [],
    "2569": [],
    "2": [],
    "2617": [],
    "1086": [],
    "3591": [],
    "267": [],
    "3752": [],
    "3208": [],
    "1881": [],
    "4148": [],
    "3432": [],
    "3835": [],
    "3089": [],
    "3776": [],
    "2668": [],
    "2113": [],
    "2360": [],
    "3018": [],
    "2941": [],
    "872": [],
    "71": [],
    "4641": [],
    "3961": [],
    "3905": [],
    "3990": [],
    "439": [],
    "475": [],
    "1079": [],
    "4165": [],
    "1181": [],
    "1252": [],
    "981": [],
    "4635": [],
    "4483": [],
    "715": [],
    "316": [],
    "1022": [],
    "2804": [],
    "2055": [],
    "597": [],
    "743": [],
    "2572": [],
    "2197": [],
    "3976": [],
    "126": [],
    "4482": [],
    "362": [],
    "91": [],
    "1619": [],
    "3508": [],
    "2135": [],
    "2479": [],
    "4708": [],
    "719": [],
    "2126": [],
    "1980": [],
    "4368": [],
    "62": [],
    "133": [],
    "4522": [],
    "1227": [],
    "3352": [],
    "2373": [],
    "3647": [],
    "2639": [],
    "1547": [],
    "2695": [],
    "4349": [],
    "4540": [],
    "3549": [],
    "1076": [],
    "1720": [],
    "3837": [],
    "3781": [],
    "4478": [],
    "611": [],
    "794": [],
    "1708": [],
    "1341": [],
    "3999": [],
    "534": [],
    "3123": [],
    "2838": [],
    "4554": [],
    "612": [],
    "1603": [],
    "14": [],
    "2181": [],
    "4715": [],
    "3335": [],
    "1601": [],
    "263": [],
    "922": [],
    "513": [],
    "984": [],
    "2715": [],
    "2800": [],
    "3189": [],
    "504": [],
    "592": [],
    "3015": [],
    "3571": [],
    "1274": [],
    "4763": [],
    "2547": [],
    "107": [],
    "3206": [],
    "1702": [],
    "4363": [],
    "2188": [],
    "3449": [],
    "1627": [],
    "3602": [],
    "3067": [],
    "760": [],
    "4518": [],
    "88": [],
    "3291": [],
    "2685": [],
    "564": [],
    "2544": [],
    "748": [],
    "3014": [],
    "3881": [],
    "1008": [],
    "2921": [],
    "2996": [],
    "3066": [],
    "540": [],
    "1283": [],
    "456": [],
    "1271": [],
    "340": [],
    "4288": [],
    "3748": [],
    "3159": [],
    "3788": [],
    "476": [],
    "2097": [],
    "3475": [],
    "3095": [],
    "2659": [],
    "434": [],
    "698": [],
    "53": [],
    "4400": [],
    "4568": [],
    "455": [],
    "4672": [],
    "54": [],
    "1168": [],
    "2873": [],
    "1570": [],
    "2914": [],
    "2255": [],
    "917": [],
    "2146": [],
    "2657": [],
    "2831": [],
    "3377": [],
    "3525": [],
    "4052": [],
    "501": [],
    "1880": [],
    "75": [],
    "414": [],
    "2833": [],
    "174": [],
    "452": [],
    "4215": [],
    "402": [],
    "1649": [],
    "4365": [],
    "2141": [],
    "1510": [],
    "1499": [],
    "4453": [],
    "4502": [],
    "674": [],
    "3137": [],
    "1861": [],
    "387": [],
    "1464": [],
    "4517": [],
    "4519": [],
    "3502": [],
    "514": [],
    "59": [],
    "613": [],
    "3370": [],
    "4735": [],
    "1548": [],
    "569": [],
    "458": [],
    "4398": [],
    "877": [],
    "4213": [],
    "266": [],
    "1756": [],
    "2494": [],
    "649": [],
    "132": [],
    "4466": [],
    "178": [],
    "836": [],
    "538": [],
    "125": [],
    "961": [],
    "4627": [],
    "4654": [],
    "4068": [],
    "454": [],
    "2979": [],
    "529": [],
    "583": [],
    "4432": [],
    "72": [],
    "153": [],
    "2864": [],
    "1219": [],
    "3480": [],
    "920": [],
    "2077": [],
    "1970": [],
    "3886": [],
    "4452": [],
    "31": [],
    "4449": [],
    "213": [],
    "279": [],
    "4372": [],
    "625": [],
    "859": [],
    "4700": [],
    "3949": [],
    "4014": [],
    "122": [],
    "1565": [],
    "1162": [],
    "747": [],
    "1758": [],
    "2013": [],
    "788": [],
    "2169": [],
    "4090": [],
    "4463": [],
    "42": [],
    "4374": [],
    "10": [],
    "2956": [],
    "2302": [],
    "1291": [],
    "908": [],
    "969": [],
    "1178": [],
    "4246": [],
    "1087": [],
    "1626": [],
    "1118": [],
    "734": [],
    "783": []
}