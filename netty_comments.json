{
    "8416": [],
    "3644": [],
    "2224": [],
    "6691": [],
    "2555": [],
    "8201": [
        "Method handles works just fine in Java 11, see https://github.com/apache/lucene-solr/blob/master/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java#L339",
        "@jprante can you provide a PR ?\r\n\r\n",
        "@johnou @jprante I think we should look into using handles... Can you open an issue ?",
        "Fixed in https://github.com/netty/netty/pull/8204. @jprante PTAL",
        "@jprante this will allow to use the native transports without unsafe:\r\n\r\nhttps://github.com/netty/netty/pull/8231"
    ],
    "8593": [],
    "5666": [],
    "1699": [],
    "8208": [
        "@ramtech123 thanks.. Check https://github.com/netty/netty/pull/8211. This allows you to specify the charset to use while decoding. ",
        "@ejona86 I mean what we could do is test UTF-8, ASCII, Unicode (in this order) until we were able to parse something when on windows... WDYT ?",
        "@ramtech123 I never heard of using something linux unicode for `/etc/hosts`.",
        "@ejona86 PTAL https://github.com/netty/netty/pull/8211 again"
    ],
    "8209": [
        "@Scottmitch thoughts ?",
        "@rschmitt sorry I don't get it... can you give some more details ?",
        "@rschmitt I just checked and your fix makes a lot of sense. Are you interested in proving a PR with a fix? Just one nit... I would use `queue.isEmpty()`.",
        "@rschmitt ah sorry.. seems I misunderstood you. I will try to have a look soon if you not beat me here.",
        "@rschmitt working on it... ",
        "@rschmitt PTAL https://github.com/netty/netty/pull/8617"
    ],
    "6362": [],
    "3421": [],
    "8764": [],
    "8214": [
        "Use `MaxMessagesRecvByteBufAllocator#maxMessagesPerRead`"
    ],
    "9": [],
    "6389": [],
    "8217": [
        "@jerrinot can you show me the stack trace please ?",
        "@jerrinot could you validate https://github.com/netty/netty/pull/8239 ?",
        "@jerrinot https://github.com/netty/netty/pull/8240 this one is better.",
        "@ejona86 WDYT ?"
    ],
    "5746": [],
    "2698": [],
    "2535": [],
    "6478": [],
    "4896": [],
    "2481": [],
    "8229": [],
    "5849": [],
    "8230": [],
    "2860": [],
    "4601": [],
    "6836": [],
    "2458": [],
    "8733": [],
    "3694": [],
    "8242": [
        "@monkey1993 please share the code that you used.",
        "@monkey1993 sure but why you even access this `SelectedSelectionKeySet` ? I mean its internal and we not expose it at all.",
        "@monkey1993 I still dont get why you need this... just take an heap-dump and use a heap-dump analyser. I mean I can implement `iterator` but I am really not sure why you try to hand-roll this stuff. ",
        "yeah and this is exactly what a heap-dump will give you and can be accessed via a heap-dump analyser like eclipse mat.",
        "@monkey1993 while I still not understand why you bother handrolling a memory profiler I did the changes as it was trivial to fix:\r\n\r\nhttps://github.com/netty/netty/pull/8244\r\n\r\nPTAL"
    ],
    "4631": [],
    "3267": [],
    "9101": [],
    "1215": [],
    "9093": [],
    "2791": [],
    "1250": [],
    "9644": [],
    "6801": [],
    "2825": [],
    "3716": [],
    "8256": [
        "@stateIs0 thanks for reporting :) Fixed in https://github.com/netty/netty/pull/8257."
    ],
    "3791": [],
    "7866": [],
    "2820": [],
    "8261": [
        "@johnjaylward\r\n\r\nI would reopen this issue. Issue appeared once Redisson switched to netty based resolver from JDK's `InetAddress.getByName` method.",
        "@normanmaurer \r\n\r\nCould this error https://github.com/redisson/redisson/issues/1646 related to this issue either?",
        "@normanmaurer \r\n\r\nHere is yet another case with AWS https://github.com/redisson/redisson/issues/1486#issuecomment-426783405",
        "@normanmaurer @johnjaylward\r\n\r\nBingo! Finally managed to reproduce the issue. Below is the test code:\r\n```java\r\n        NioEventLoopGroup niogroup = new NioEventLoopGroup();\r\n        \r\n        DnsAddressResolverGroup group = new DnsAddressResolverGroup(NioDatagramChannel.class, DnsServerAddressStreamProviders.platformDefault());\r\n        ExecutorService es = Executors.newFixedThreadPool(2);\r\n        CountDownLatch latch = new CountDownLatch(100);\r\n        for (int i = 0; i < 100; i++) {\r\n            es.execute(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    AddressResolver<InetSocketAddress> resolver = group.getResolver(niogroup.next());\r\n                    try {\r\n                        URI uri = new URI(\"redis://dev.myredis.com:6379\");\r\n                        Future<List<InetSocketAddress>> allNodes = resolver.resolveAll(InetSocketAddress.createUnresolved(uri.getHost(), uri.getPort()));\r\n                        List<InetSocketAddress> list = allNodes.syncUninterruptibly().getNow();\r\n                        System.out.println(list);\r\n                    } catch (URISyntaxException e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    } finally {\r\n                        latch.countDown();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        latch.await();\r\n        group.close();\r\n        es.shutdown();\r\n        niogroup.shutdownGracefully();\r\n```\r\n\r\nMaraDNS (http://maradns.samiam.org/) running on 127.0.0.1:53\r\nHere is the config for it https://github.com/netty/netty/files/1941275/maradns-config.zip\r\n\r\nIf server stands first in list of dns then all works fine:\r\n\r\nDefault DNS servers: [/127.0.0.1:53, /8.8.8.8:53, /87.98.175.85:53, /51.254.25.115:53]\r\nLog without errors: https://gist.github.com/mrniko/8ea3153888aa3dd8315b4549a77c34bb\r\n\r\nBut if it's not, then lot of errors arise:\r\n\r\nDefault DNS servers: [/8.8.8.8:53, /127.0.0.1:53, /87.98.175.85:53, /51.254.25.115:53]\r\nLog with errors: https://gist.github.com/mrniko/59529c03450c69094d7b379515919ea2\r\n\r\nNetty 4.1.30.Final\r\nJDK 11",
        "@normanmaurer \r\n\r\nHere is workaround I implemented in Redisson\r\nhttps://github.com/redisson/redisson/commit/14eeed15f6b7b508dd206d40dec7c80377e6c9db",
        "@normanmaurer \r\n\r\nThat's correct",
        "Is it possible to add custom implementation to netty for this case like I did in Redisson?",
        "@fmazoyer \r\n\r\nThe problem is that `io.netty.resolver.DefaultNameResolver` executes name lookup and blocks the caller thread",
        "@normanmaurer \r\n\r\nThanks for taking the time!\r\n\r\nCould you try exactly the same code I use? without using DnsNameResolverBuilder. ",
        "@normanmaurer \r\n\r\nI run it on windows 10",
        "@normanmaurer\r\n\r\nI'm testing with Netty 4.1.32 and 64-bit JDK 1.8.0_191 on win 10 and noticed strange behaviour:\r\n\r\nMy previous test **doesn't work** with:\r\n\r\n```java\r\nDnsAddressResolverGroup group = new DnsAddressResolverGroup(NioDatagramChannel.class,\r\n                DnsServerAddressStreamProviders.platformDefault());\r\n```\r\nand dns sequence got from `DnsServerAddressStreamProviders.platformDefault().nameServerAddressStream(\"\")` is \r\n`/51.254.25.115:53, /127.0.0.1:53, /8.8.8.8:53, dns: /87.98.175.85:53`\r\n\r\n**But it works** if I create group object like in your test with the same dns sequence:\r\n\r\n```java\r\nfinal DnsNameResolverBuilder builder = new DnsNameResolverBuilder();\r\nbuilder.channelType(NioDatagramChannel.class).nameServerProvider(\r\n                new SequentialDnsServerAddressStreamProvider(new InetSocketAddress(\"51.254.25.115\", 53),\r\n                        new InetSocketAddress(\"127.0.0.1\", 53), new InetSocketAddress(\"8.8.8.8\", 53), new InetSocketAddress(\"87.98.175.85\", 53)))\r\n                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_ONLY);\r\n\r\nfinal DnsAddressResolverGroup group = new DnsAddressResolverGroup(builder);\r\n```\r\n\r\nHow it could be?",
        "@normanmaurer \r\n\r\nIssue came back if I comment out this code `.resolvedAddressTypes(ResolvedAddressTypes.IPV4_ONLY);`",
        "@normanmaurer \r\nEverything works fine with group object:\r\n\r\n```java\r\nDnsAddressResolverGroup group = new DnsAddressResolverGroup(new DnsNameResolverBuilder()\r\n                .channelType(NioDatagramChannel.class)\r\n                .nameServerProvider(DnsServerAddressStreamProviders.platformDefault())\r\n                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_ONLY));\r\n```\r\nand doesn't work if group object is follow:\r\n\r\n```java\r\nDnsAddressResolverGroup group = new DnsAddressResolverGroup(new DnsNameResolverBuilder()\r\n                .channelType(NioDatagramChannel.class)\r\n                .nameServerProvider(DnsServerAddressStreamProviders.platformDefault()));\r\n```",
        "@normanmaurer\r\nDo you have netty-all.jar for the latest version?",
        "@normanmaurer \r\n\r\nThis page by this link reports 404",
        "@normanmaurer \r\n\r\nNow it works. Thank you!",
        "@normanmaurer \r\n\r\nBoth :) ",
        "@johnjaylward would it be possible to try different netty versions and see at which point it breaks ? This would help me a lot. ",
        "@johnjaylward as the dns resolver is marked as unstable there were a few, but I think most people should not be affected as the scope is small. So I would give it a try.",
        "@johnjaylward sure thats possible... I dont know enough about Redission to tell you what they do.",
        "@johnjaylward please let me know how it goes :)",
        "Can we somehow have a testcase to reproduce which does not involve setup an own dnsserver etc?\n\n> Am 10.09.2018 um 17:17 schrieb johnjaylward <notifications@github.com>:\n> \n> Reopened #8261.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
        "So you say it only happens for custom TLDs?\n\n> Am 10.09.2018 um 17:31 schrieb johnjaylward <notifications@github.com>:\n> \n> Maybe you can test against a public TLD like .amazon or .google or something? I'm not sure if there would be a difference there though as I have 3 resolvers configured, but only 1 will return a valid result for the custom TLD.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
        "@johnjaylward could you test to only include the dnsserver that handles the custom domainname and see if it resolves in this case ? \r\n\r\nAlso would it be possible to run the following command against each of the servers (using the domain you want to resolve) and add the output here:\r\n\r\n```\r\ndig @dnsserverip host.toplevel A\r\n```",
        "@johnjaylward interesting so at least one server returns `NXDOMAIN`. This is on what OS ? Can you also show me the contents of /etc/resolv.conf",
        "@johnjaylward @utsavchanda any more details ?",
        "Sorry but without more infos I suspect I will not be able to help :(",
        "Will check once back at work\n\n> Am 05.10.2018 um 20:35 schrieb Nikita Koksharov <notifications@github.com>:\n> \n> @normanmaurer @johnjaylward\n> \n> Bingo! Finally managed to reproduce the issue. Below is the test code:\n> \n>         NioEventLoopGroup niogroup = new NioEventLoopGroup();\n>         \n>         DnsAddressResolverGroup group = new DnsAddressResolverGroup(NioDatagramChannel.class, DnsServerAddressStreamProviders.platformDefault());\n>         ExecutorService es = Executors.newFixedThreadPool(2);\n>         CountDownLatch latch = new CountDownLatch(100);\n>         for (int i = 0; i < 100; i++) {\n>             es.execute(new Runnable() {\n>                 @Override\n>                 public void run() {\n>                     AddressResolver<InetSocketAddress> resolver = group.getResolver(niogroup.next());\n>                     try {\n>                         URI uri = new URI(\"redis://dev.myredis.com:6379\");\n>                         Future<List<InetSocketAddress>> allNodes = resolver.resolveAll(InetSocketAddress.createUnresolved(uri.getHost(), uri.getPort()));\n>                         List<InetSocketAddress> list = allNodes.syncUninterruptibly().getNow();\n>                         System.out.println(list);\n>                     } catch (URISyntaxException e) {\n>                         // TODO Auto-generated catch block\n>                         e.printStackTrace();\n>                     } finally {\n>                         latch.countDown();\n>                     }\n>                 }\n>             });\n>         }\n>         latch.await();\n>         group.close();\n>         es.shutdown();\n>         niogroup.shutdownGracefully();\n> MaraDNS (http://maradns.samiam.org/) running on 127.0.0.1:53\n> Here is the config for it https://github.com/netty/netty/files/1941275/maradns-config.zip\n> \n> If server stands first in list of dns then all works fine:\n> \n> Default DNS servers: [/127.0.0.1:53, /8.8.8.8:53, /87.98.175.85:53, /51.254.25.115:53]\n> Log without errors: https://gist.github.com/mrniko/8ea3153888aa3dd8315b4549a77c34bb\n> \n> But if it's not, then lot of errors arise:\n> \n> Default DNS servers: [/8.8.8.8:53, /127.0.0.1:53, /87.98.175.85:53, /51.254.25.115:53]\n> Log with errors: https://gist.github.com/mrniko/59529c03450c69094d7b379515919ea2\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
        "So you basically create one resolver per dns server address and try all of them before fail the query ?\n\n> Am 06.10.2018 um 16:05 schrieb Nikita Koksharov <notifications@github.com>:\n> \n> @normanmaurer\n> \n> Here is workaround I implemented in Redisson\n> redisson/redisson@14eeed1\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
        "@mrniko ok I just returned from vacation and looking at this again... I am still trying to wrap my head around this. \r\n\r\nFrom my understanding of the logs what we do is correct. The nameservers we query first returns `NXDOMAIN` which indicates that the domain does not exist and so we bail out. I need to check what exactly the JDK implementation does tho. But from my understanding this is a \"sane thing\" to do.",
        "@trustin I did not find anything in the RFC that said I agree with you but I will need to do some more research tomorrow. ",
        "@mrniko sure we could but I would first like to better understand the whole thing before adding anything. Thats why I want to do more research here before taking any action",
        "@trustin thanks for digging these up...  This is also interesting : https://bugzilla.redhat.com/show_bug.cgi?id=162625\r\n \r\n@johnjaylward just to confirm all works when you use the JDK based resolver with netty tho ?",
        "@trustin yeah I wonder if the problem is that we not \"watch\" for updates of resolve.conf and so may get into trouble when it is altered afterwards. ",
        "@trustin as far as I know the JDK implementation does have a background thread that takes care of taking updates into account.",
        "@johnjaylward you should be able to verify by using Wireshark here and see what resolvers it uses. ",
        "Also I checked the JDK impl again and it reloads the dns server config from time to time. We may should do the same...\n\n> Am 11.10.2018 um 19:45 schrieb Trustin Lee <notifications@github.com>:\n> \n> This comment explains the difference between glibc and Windows resolver: https://bugzilla.redhat.com/show_bug.cgi?id=160914#c5\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
        "@trustin I am still not 100 % sure what to do about this in general but that said what you think about refresh the DNS servers / search domains on regular basis just as the JDK is doing:\r\n\r\nhttp://hg.openjdk.java.net/jdk/jdk11/file/76072a077ee1/src/java.base/unix/classes/sun/net/dns/ResolverConfigurationImpl.java#l124 \r\n\r\n ?",
        "Ok let me do a pr for the refresh in the meantime\n\n> Am 14.10.2018 um 09:01 schrieb Trustin Lee <notifications@github.com>:\n> \n> I think there are two action items:\n> \n> Refreshing the System DNS resolver configuration periodically\n> This may or may not be relevant to this issue, but we should fix this.\n> Changing the behavior of our DNS resolver so that it's behavior is on par with that of the host OS.\n> This probably will fix this issue but I'm not 100% sure if it's worth fixing it given the complexity and its platform-dependent nature. It'd be natural to behave in the same way with host OS's behavior from Windows users' standpoint, though. Would love to listen to what other folks think about this.\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
        "I will have a look again this week. Sorry been super busy lately. ",
        "@mrniko sorry it took me so long to come back to you. I just tried to reproduce it with the code and config you provided but no luck :(\r\n\r\n```java\r\n    @Test\r\n    public void test() throws Throwable {\r\n        final NioEventLoopGroup niogroup = new NioEventLoopGroup();\r\n\r\n        final DnsNameResolverBuilder builder = new DnsNameResolverBuilder();\r\n        builder.channelType(NioDatagramChannel.class).nameServerProvider(\r\n                new SequentialDnsServerAddressStreamProvider(new InetSocketAddress(\"8.8.8.8\", 53),\r\n                        new InetSocketAddress(\"127.0.0.1\", 53), new InetSocketAddress(\"87.98.175.85\", 53), new InetSocketAddress(\"51.254.25.115\", 53)))\r\n                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_ONLY);\r\n\r\n        final DnsAddressResolverGroup group = new DnsAddressResolverGroup(builder);\r\n        ExecutorService es = Executors.newFixedThreadPool(2);\r\n        final CountDownLatch latch = new CountDownLatch(100);\r\n        final Queue<Object> results = new ConcurrentLinkedQueue<Object>();\r\n        for (int i = 0; i < 100; i++) {\r\n            es.execute(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    AddressResolver<InetSocketAddress> resolver = group.getResolver(niogroup.next());\r\n                    try {\r\n                        URI uri = new URI(\"redis://dev.myredis.com:6379\");\r\n                        Future<List<InetSocketAddress>> allNodes = resolver.resolveAll(InetSocketAddress.createUnresolved(uri.getHost(), uri.getPort()));\r\n                        //Thread.sleep(100);\r\n                        List<InetSocketAddress> list = allNodes.syncUninterruptibly().getNow();\r\n                        results.offer(list);\r\n                    } catch (URISyntaxException e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    } catch (Throwable cause) {\r\n                        results.offer(cause);\r\n                    } finally {\r\n                        latch.countDown();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        latch.await();\r\n        group.close();\r\n        es.shutdown();\r\n        niogroup.shutdownGracefully();\r\n\r\n        for (;;) {\r\n            Object o = results.poll();\r\n            if (o == null) {\r\n                break;\r\n            }\r\n            if (o instanceof Throwable) {\r\n                throw (Throwable) o;\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nI used the same dns config that you attached. This in on Xubuntu. Any idea ?",
        "Also @johnjaylward ",
        "This was on latest 4.1 branch btw.",
        "@mrniko I did... same result :/",
        "@mrniko unfortunately I have no access to windows. Can you try to reproduce on a linux vm ?",
        "@mrniko maybe you could capture a dump with Wireshark that includes the queries ? Best would be if you adjust it to only to one resolveAll(...) call.",
        "@mrniko also even if I can not reproduce by now I would be happy to review a PR that fix the problem for you. ",
        "@johnjaylward @mrniko after re-reading the RFC closely and inspecting our code again I think I found the bug. Can you please check if https://github.com/netty/netty/pull/8731 works for you ?\r\n\r\nAlso thanks to @Lukasa to discuss this with me :)",
        "@mrniko also can you test removing `                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_ONLY);` ?",
        "@mrniko ok cool... With #8731 the problem is gone also when `.resolvedAddressTypes(ResolvedAddressTypes.IPV4_ONLY)` is NOT used (at least for me). Can you try it out ?",
        "@mrniko let me build one for you with the pr included... one sec",
        "@mrniko https://drive.google.com/open?id=11pNwvCkl3ECB3CpjlUzDnuG0m3Td27yg  please try with this jar and report back.",
        "@mrniko just fixed the link... please try again",
        "@mrniko the code or the link, or both ? ;)",
        "Yeah :) ... Please note in the PR as well... ",
        "@hlms I have no idea how exactly redission uses it so you will need to ask there."
    ],
    "7567": [],
    "6130": [],
    "5578": [],
    "6011": [],
    "7429": [],
    "927": [],
    "3272": [],
    "5815": [],
    "8273": [],
    "5249": [],
    "5454": [],
    "8964": [],
    "3851": [],
    "851": [],
    "8715": [],
    "6006": [],
    "8168": [],
    "5776": [],
    "8277": [
        "I might definitely miss some context around HWT, but to me it sounds like it doesn't necessarily have to provide sub-millisecond granularity. It's good for what's it's designed for - high throughput at the cost of certain precision.\r\n\r\nThe only problem with the HWT (in my minds eyes) is that it accepts pretty much anything in its constructor despite rounding up the tick interval to 1ms. ",
        "@normanmaurer What do you think about having a N5 ticket about either throwing an exception or accepting `tickDurationMs` param?",
        "@normanmaurer I think the primary difference between the two is that sleep() is not subject to spurious wakeups."
    ],
    "6401": [],
    "6582": [],
    "7542": [],
    "6475": [],
    "6964": [],
    "7004": [],
    "3578": [],
    "8295": [],
    "7420": [],
    "6817": [],
    "4440": [],
    "1768": [],
    "4582": [],
    "57": [],
    "982": [],
    "6148": [],
    "7587": [],
    "9224": [],
    "481": [],
    "7989": [],
    "5270": [],
    "8645": [],
    "8197": [],
    "4653": [],
    "9891": [],
    "1403": [],
    "8318": [],
    "7535": [],
    "5427": [],
    "7784": [],
    "8331": [
        "@rkapsi doh... Want to send over a pr ?"
    ],
    "5884": [],
    "6400": [],
    "6236": [],
    "7637": [],
    "8990": [],
    "4703": [],
    "5006": [],
    "3329": [],
    "419": [],
    "3354": [],
    "8343": [],
    "8473": [],
    "3593": [],
    "7215": [],
    "4269": [],
    "8386": [],
    "1882": [],
    "7547": [],
    "1365": [],
    "4144": [],
    "8062": [],
    "348": [],
    "926": [],
    "7728": [],
    "4675": [],
    "318": [],
    "1717": [],
    "8202": [],
    "584": [],
    "5846": [],
    "7338": [],
    "8671": [],
    "4485": [],
    "8106": [],
    "7427": [],
    "7619": [],
    "7451": [],
    "2452": [],
    "6294": [],
    "6868": [],
    "5817": [],
    "2787": [],
    "8384": [
        "@normanmaurer please let me know if I can send a PR",
        "Oh right, I didn't notice you were keeping the `JdkSslContext` constructor public.\r\nYes, that would work for me, thanks!",
        "Actually, the \"full\" constructor is package protected, so there's no way to force the enabled protocols.",
        "PR sent: #8389"
    ],
    "764": [],
    "2403": [],
    "4731": [],
    "3759": [],
    "5624": [],
    "9202": [],
    "956": [],
    "4250": [],
    "8221": [],
    "4629": [],
    "7228": [],
    "8965": [],
    "8398": [],
    "8400": [],
    "4175": [],
    "5488": [],
    "4928": [],
    "1017": [],
    "2124": [],
    "1001": [],
    "7397": [],
    "5710": [],
    "5130": [],
    "7304": [],
    "2877": [],
    "3750": [],
    "8429": [],
    "8430": [
        "For the reference, this is us unsetting the limit in Finagle: https://github.com/twitter/finagle/commit/990c8650366e5374ea062c753a4628c5971fc40e"
    ],
    "5001": [],
    "4883": [],
    "1963": [],
    "838": [],
    "6366": [],
    "566": [],
    "7652": [],
    "772": [],
    "8442": [],
    "6137": [],
    "8444": [
        "I'm as sure as I can be, but there must be something strange going on as I've been unable to reproduce the problem whenever I try to isolate it. I've got things set up in my Ubuntu VM so that I can build Netty, including the epoll transport, from source. I'm going to try and add some caveman debugging to see if I can figure out what's going on. I haven't been able to glean much via gdb.",
        "Well, this is embarrassing. Your suspicion that there was a different native lib on the class path was exactly right.  Sorry. Micrometer's Statd module shades Netty but leaves the native `/META-INF/native/libnetty_transport_native_epoll_x86_64.so` in its default location. That one's first on the classpath so it's found and loaded by `NativeLibraryLoader`."
    ],
    "3078": [],
    "5929": [],
    "8617": [],
    "5365": [],
    "8963": [],
    "4158": [],
    "5341": [],
    "9043": [],
    "7181": [],
    "9118": [],
    "8463": [
        "@JStroom I think we should also keep the old `contains` check but also add the new one.\r\n\r\nAre you interested in doing a PR ?",
        "@JStroom thanks!"
    ],
    "6432": [],
    "2099": [],
    "4255": [],
    "448": [],
    "2772": [],
    "8626": [],
    "5461": [],
    "9066": [],
    "1049": [],
    "4422": [],
    "1723": [],
    "4378": [],
    "8479": [
        "I might have time tomorrow to put together a PR. I'll let you know.",
        "@tbrooks8 thanks... I will try to find some time to fix this or if you are interested in providing a PR I am happy to review as well :)",
        "@tbrooks8 don't worry I am able to reproduce with a unit test... Seems to only happen on Java11 tho :) Should have a fix soon.",
        "Should be fixed by https://github.com/netty/netty/pull/8486"
    ],
    "8480": [
        "@bryce-anderson ouch... yes this is not good :( That said I suspect there will most likely not a lot of problems in real world use-cases as you either use SSL or not for all Channel (sharing between different parent Channels seems very unlikely).\r\n\r\nThat said we should fix. I guess an attribute on the parent channel should do. "
    ],
    "4618": [],
    "9145": [],
    "8483": [
        "Should be fixed by #8595"
    ],
    "8475": [
        "@vietj thanks! Will provide a fix soon. "
    ],
    "8477": [
        "@rkapsi which netty-tcnative artifact ?",
        "@rkapsi against openssl or BoringSSL ?",
        "hmm interesting ",
        "@rkapsi what exact openssl version this is ?",
        "Will check\n\n> Am 08.11.2018 um 16:39 schrieb Roger <notifications@github.com>:\n> \n> Here's a repro...\n> \n> import java.net.InetSocketAddress;\n> \n> import javax.net.ssl.SSLEngine;\n> import javax.net.ssl.SSLSession;\n> \n> import io.netty.bootstrap.ServerBootstrap;\n> import io.netty.channel.Channel;\n> import io.netty.channel.ChannelInitializer;\n> import io.netty.channel.ChannelPipeline;\n> import io.netty.channel.nio.NioEventLoopGroup;\n> import io.netty.channel.socket.nio.NioServerSocketChannel;\n> import io.netty.handler.ssl.OpenSsl;\n> import io.netty.handler.ssl.SslContext;\n> import io.netty.handler.ssl.SslContextBuilder;\n> import io.netty.handler.ssl.SslHandler;\n> import io.netty.handler.ssl.SslProvider;\n> import io.netty.handler.ssl.util.SelfSignedCertificate;\n> import io.netty.util.concurrent.Future;\n> import io.netty.util.concurrent.FutureListener;\n> \n> public class NullCipher {\n> \n>   public static void main(String[] args) throws Exception {\n>     System.out.println(\"OpenSSL: available=\" + OpenSsl.isAvailable() + \", version=\" + OpenSsl.versionString());\n>     \n>     SelfSignedCertificate cert = new SelfSignedCertificate();\n>     \n>     SslContext sslContext = SslContextBuilder.forServer(cert.certificate(), cert.privateKey())\n>         .sslProvider(SslProvider.OPENSSL)\n>         .protocols(\"TLSv1.3\", \"TLSv1.2\")\n>         .build();\n>     \n>     ChannelInitializer<Channel> handler = new ChannelInitializer<Channel>() {\n>       @Override\n>       protected void initChannel(Channel ch) throws Exception {\n>         SslHandler handler = sslContext.newHandler(ch.alloc());\n>         \n>         Future<Channel> handshakeFuture = handler.handshakeFuture();\n>         handshakeFuture.addListener(new FutureListener<Channel>() {\n>           @Override\n>           public void operationComplete(Future<Channel> future) throws Exception {\n>             if (!future.isSuccess()) {\n>               throw new IllegalStateException(future.cause());\n>             }\n>             \n>             Channel channel = future.getNow();\n>             \n>             SSLEngine engine = handler.engine();\n>             SSLSession session = engine.getSession();\n>             \n>             System.out.println(\"channel=\" + channel \n>                 + \", protocol=\" + session.getProtocol() \n>                 + \", cipher=\" + session.getCipherSuite());\n>             \n>             channel.close();\n>           }\n>         });\n>         \n>         ChannelPipeline pipeline = ch.pipeline();\n>         pipeline.addLast(handler);\n>       }\n>     };\n>     \n>     ServerBootstrap bootstrap = new ServerBootstrap()\n>         .channel(NioServerSocketChannel.class)\n>         .group(new NioEventLoopGroup())\n>         .childHandler(handler);\n>     \n>     Channel server = bootstrap.bind(0)\n>         .sync().channel();\n>     \n>     int port = ((InetSocketAddress)server.localAddress()).getPort();\n>     \n>     System.out.println(\"Try...\" \n>         + \"\\n openssl s_client -connect localhost:\" + port + \" --tls1_3\"\n>         + \"\\n openssl s_client -connect localhost:\" + port + \" --tls1_2\");\n>   }\n> }\n> OpenSSL: available=true, version=OpenSSL 1.1.1  11 Sep 2018\n> Try...\n>  openssl s_client -connect localhost:33267 --tls1_3\n>  openssl s_client -connect localhost:33267 --tls1_2\n> channel=[id: 0x6a8d1105, L:/0:0:0:0:0:0:0:1:33267 - R:/0:0:0:0:0:0:0:1:15134], protocol=TLSv1.3, cipher=SSL_NULL_WITH_NULL_NULL\n> channel=[id: 0xb94fab15, L:/0:0:0:0:0:0:0:1:33267 - R:/0:0:0:0:0:0:0:1:15306], protocol=TLSv1.2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
        "@rkapsi ok I found the problem... let me work on a fix. ",
        "@rkapsi thanks again for the reproducer... Please check https://github.com/netty/netty/pull/8485 for a fix"
    ],
    "6827": [],
    "4062": [],
    "4538": [],
    "8489": [],
    "8486": [],
    "4360": [],
    "3200": [],
    "8493": [],
    "8495": [
        "There's also https://github.com/netty/netty/commit/28f9136824499d7bca318f4496339d82fb42c46a"
    ],
    "6910": [],
    "4525": [],
    "8747": [],
    "4278": [],
    "8501": [
        "This is not actually a bug, because the spec states that the method returns `null` if the channel is not connected:\r\n\r\n> {@code null} if this channel is not connected.\r\n\r\nBut could be an improvement because it is useful to have this information in some error handlers."
    ],
    "508": [],
    "4814": [],
    "8504": [],
    "6024": [],
    "5025": [],
    "1929": [],
    "8508": [
        "I use both approaches, channel attributes, and `ChannelHandler` state. Attributes are more user-friendly and simpler in terms of usage and implementation (but could be simplified too I think). However, when I need maximum performance, I chose `ChannelHandler`. I vote for @rkapsi proposal. Less inheritance - less footprint for every channel object, while API is still there.",
        "I find the ability to attach an arbitrary object to a `Channel` very useful in practice, especially when I do not wish to introduce tight coupling between handlers or when there's stateful information that do not belong to any handlers. The `AttributeMap` API is somewhat ugly although it serves my needs well.",
        "@normanmaurer we use it to store the SNI host name on the server with an SNI handler override, so it is attached to the channel",
        "@normanmaurer you don't foresee any performance hit with `Map<ChannelId, Whatever>` vs a session object stored directly in the channel which can easily be referenced every read?",
        "@normanmaurer now I'm wondering why I didn't implement it with a ChannelHandler in the first place :wink: ",
        "@slandelle the API is sometimes hard to use and not really gives a lot of advantages over just store the state in the ChannelHandler itself or use a `Map<ChannelId, Whatever>`.\r\n\r\n",
        "@slandelle thats a good feedback :) What about providing something like `ChannelLocal` that we had in Netty 3 ?https://github.com/netty/netty/blob/3.10/src/main/java/org/jboss/netty/channel/ChannelLocal.java",
        "@slandelle yep it was... The reason was basically be cause @trustin and myself felt that it should be part of the `Channel` itself. That said I am not convinced of it anymore and it comes with a cost. ",
        "@johnou I am not convinced that this is the right thing to use for every read. For every read you should store the state directly in the ChannelHandler IMHO.",
        "@vietj can you show me the code ?",
        "@Bennett-Lynch @vietj thanks for your suggestions so far.",
        "Ok let's close this as it seems the community would like to keep it. "
    ],
    "8629": [],
    "8510": [],
    "432": [],
    "5405": [],
    "8513": [
        "Starting to work on this as other tasks depend on this as.well. "
    ],
    "8514": [
        "This is particularly interesting to me, I have gone to a great deal of effort to lower overhead (writing only from the correct eventloop) with our server application, I wrote up a small explanation here https://github.com/netty/netty/issues/7020#issuecomment-388007409 \r\n\r\nHappy to go into more depth on the subject if required.",
        "This should be complete"
    ],
    "5978": [],
    "2294": [],
    "8253": [],
    "4843": [],
    "8517": [
        "It'd still be nice if we provide a way to suspend a channel from being handled by its event loop temporarily, so that a user can take the full control of the channel when he or she wants to do something really low-level.",
        "This depends on #8513 ",
        "@trustin yep that is the plan... It should just be impossible to change the `EventLoop` but register / deregister / register on the same EventLoop should be possible.  When saying register / deregister I am talking about handling IO, `eventLoop()` should always return the `EventLoop` tho."
    ],
    "5086": [],
    "8521": [
        "Let me work on this and throw `CompletionException` as `CompletableFuture` does. "
    ],
    "6861": [],
    "8523": [
        "My experience with `CompletionStage` was pretty good. How about implementing `CompletionStage`  with strict execution guarantee, rather than maintaining a large set of methods by ourselves?"
    ],
    "5518": [],
    "8525": [],
    "3265": [],
    "4456": [],
    "1050": [],
    "5343": [],
    "7786": [],
    "6972": [],
    "8022": [],
    "4501": [],
    "8527": [],
    "8535": [
        "@normanmaurer so if you had some code like this that reads ahead when decoding\r\n\r\n```java\r\n      case READ_SENDER_IP:\r\n        if (buffer.readableBytes() < BYTE_SIZE) {\r\n          return;\r\n        }\r\n        buffer.markReaderIndex();\r\n        int octetsLength = buffer.readByte();\r\n        if (buffer.readableBytes() < octetsLength) {\r\n          buffer.resetReaderIndex();\r\n          return;\r\n        }\r\n\r\n        byte[] octets = new byte[octetsLength];\r\n        buffer.readBytes(octets);\r\n        senderIp = InetAddress.getByAddress(octets);\r\n```\r\n\r\nI guess one could do something like this..\r\n\r\n```java\r\n      case READ_SENDER_IP:\r\n        if (buffer.readableBytes() < BYTE_SIZE) {\r\n          return;\r\n        }\r\n        //buffer.markReaderIndex();\r\n        int octetsLength = buffer.getByte(buffer.readerIndex()); // get instead of read to avoid moving the reader index\r\n        if (buffer.readableBytes() < octetsLength) {\r\n          //buffer.resetReaderIndex();\r\n          return;\r\n        }\r\n\r\n        byte[] octets = new byte[octetsLength];\r\n        buffer.readBytes(octets);\r\n        senderIp = InetAddress.getByAddress(octets);\r\n        currentState = DecoderState.READ_SENDER_PORT;\r\n```"
    ],
    "5187": [],
    "2817": [],
    "2112": [],
    "2229": [],
    "8536": [
        "\ud83d\udc4d \r\n\r\nWe [override these in Finagle](https://github.com/twitter/finagle/blob/develop/finagle-netty4/src/main/scala/com/twitter/finagle/netty4/Netty4Init.scala#L30-L60) for the very same reason."
    ],
    "2870": [],
    "6589": [],
    "2710": [],
    "2171": [],
    "3684": [],
    "8549": [],
    "5820": [],
    "3609": [],
    "139": [],
    "5207": [],
    "286": [],
    "8563": [],
    "4870": [],
    "6252": [],
    "3029": [],
    "8566": [],
    "8571": [],
    "6943": [],
    "7890": [],
    "8575": [],
    "4975": [],
    "4243": [],
    "3685": [],
    "5880": [],
    "4594": [],
    "2242": [],
    "8471": [],
    "708": [],
    "99": [],
    "4884": [],
    "8903": [],
    "5204": [],
    "9044": [],
    "8333": [],
    "8613": [],
    "5327": [],
    "8616": [],
    "5934": [],
    "8713": [],
    "6131": [],
    "5211": [],
    "7480": [],
    "6382": [],
    "2674": [],
    "6848": [],
    "3244": [],
    "6003": [],
    "5579": [],
    "5305": [],
    "2551": [],
    "9039": [],
    "4233": [],
    "8641": [],
    "4414": [],
    "95": [],
    "4701": [],
    "2153": [],
    "5700": [],
    "6480": [],
    "8654": [],
    "4380": [],
    "2211": [],
    "5055": [],
    "436": [],
    "2911": [],
    "5333": [],
    "3792": [],
    "8307": [],
    "8677": [],
    "8283": [],
    "5273": [],
    "4078": [],
    "8491": [],
    "8676": [
        "@mingyu89 I wonder how this can happen... `handlerRemoved0` should never be called until `handlerAdded` was called. Do you call these methods by yourself ? how do you add the SslHandler to the pipeline ? Can you show the code how you bootstrap it ?",
        "It should not... is this called from outside the EventLoop ?",
        "@mingyu89 actually I think I know what happens here... Let me come up with a fix.",
        "@mingyu89 https://github.com/netty/netty/pull/8684 PTAL"
    ],
    "3197": [],
    "3980": [],
    "4159": [],
    "8687": [],
    "4634": [],
    "9186": [],
    "2999": [],
    "8692": [],
    "6200": [],
    "8748": [],
    "2107": [],
    "8700": [
        "Another somewhat related question.\r\n\r\nWhen using `HttpChunkedInput` with `ChunkedWriteHandler`, `lastHttpContent` would be written/flushed even in case write promise is already reported as a failed one. We rely on `endOfInput` [being](https://github.com/netty/netty/blob/fa84e2b3af45ec7fd47909eff0aa7d2be5a54972/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java#L222) `true` after `closeInput` was called [here](https://github.com/netty/netty/blob/fa84e2b3af45ec7fd47909eff0aa7d2be5a54972/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java#L277) or [here](https://github.com/netty/netty/blob/fa84e2b3af45ec7fd47909eff0aa7d2be5a54972/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java#L289), which [doesn't work](https://github.com/netty/netty/blob/00afb19d7a37de21b35ce4f6cb3fa7f74809f2ab/codec-http/src/main/java/io/netty/handler/codec/http/HttpChunkedInput.java#L72-L74) for  `HttpChunkedInput`.",
        "@normanmaurer Sure! Will do shortly.",
        "@kachayev yes this is a bug... would you mind open a PR with a fix ?"
    ],
    "4821": [],
    "1209": [],
    "8683": [],
    "8707": [
        "@rkapsi thanks ... looking into it as we speak.",
        "@ejona86 please have a look as well. ",
        "@rkapsi I think you are on something here... I think what happens here is that `FlowControlledData.write(...)` returns early as `queuedData` is `0` and its not `endOfStream` while `size()` still returns a positive value and so `write(...)` will be called forever. WDYT ?",
        "@rkapsi now I just need to understand how this happens \ud83d\ude22 ",
        "And @carl-mastrangelo ",
        "Still not sure yet how this happens :/",
        "@rkapsi ok I think I found the problem... writing a reproducer now. ",
        "@rkapsi PTAL https://github.com/netty/netty/pull/8726"
    ],
    "2899": [],
    "5613": [],
    "9423": [],
    "2214": [],
    "9108": [],
    "261": [],
    "5747": [],
    "9114": [],
    "7494": [],
    "8409": [],
    "6119": [],
    "7559": [],
    "4733": [],
    "5167": [],
    "8727": [],
    "3929": [],
    "4717": [],
    "8736": [],
    "8612": [],
    "7939": [],
    "6446": [],
    "3678": [],
    "6858": [],
    "56": [],
    "2501": [],
    "5561": [],
    "4772": [],
    "4192": [],
    "7332": [],
    "1233": [],
    "6233": [],
    "8856": [],
    "2603": [],
    "4287": [],
    "6280": [],
    "8790": [],
    "2579": [],
    "8763": [],
    "5505": [],
    "1235": [],
    "4324": [],
    "8765": [],
    "2541": [],
    "5403": [],
    "3942": [],
    "8770": [],
    "3996": [],
    "7217": [],
    "4523": [],
    "6242": [],
    "8647": [],
    "8772": [],
    "3281": [],
    "6458": [],
    "8594": [],
    "8997": [],
    "2296": [],
    "7035": [],
    "5637": [],
    "3425": [],
    "41": [],
    "5623": [],
    "6924": [],
    "8795": [
        "@zhengdehui sounds like something we could optimize... I will try to have a look or if you have a fix in mind please let me know and submit a PR :)",
        "@zhengdehui thanks for the report :) Can you check https://github.com/netty/netty/pull/8797 and see if it fixes the problem ?",
        "@zhengdehui from what I see there can't be any concurrency issue here as listeners is only invoked from within the `synchronized` block and if another thread will add a listener in the meantime it will schedule a task if needed. ",
        "@zhengdehui huh ? The whole method os synchronised so why you think it is outside of the scope here ?",
        "@zhengdehui thanks... please let me know once you had a chance "
    ],
    "4984": [],
    "8796": [
        "@aimozg sounds like a bug... Can you submit a PR with a test and fix ?",
        "@aimozg please check https://github.com/netty/netty/pull/8798 ... That said you should not use this class as its in the \"internal\" package and so may be removed / changed etc without notice."
    ],
    "3342": [],
    "6102": [],
    "2591": [],
    "4268": [],
    "5047": [],
    "6862": [],
    "3828": [],
    "3767": [],
    "3043": [],
    "3681": [],
    "6918": [],
    "6188": [],
    "572": [],
    "8814": [
        "@johnou \r\n\r\nSame for 4.1.33.Final?"
    ],
    "6721": [],
    "9133": [],
    "1872": [],
    "6953": [],
    "8598": [],
    "5961": [],
    "2276": [],
    "9086": [],
    "8841": [
        "@kachayev sounds like a good idea... :)"
    ],
    "1251": [],
    "4652": [],
    "353": [],
    "5737": [],
    "7623": [],
    "6441": [],
    "8846": [],
    "8849": [
        "I'm working on introducing KQueue transport support to the Aleph library, and I can confirm that with `4.1.33.Final` such warnings happen pretty randomly, hard to tell what is the root cause.\r\n\r\n```\r\nuser=> [aleph-netty-client-event-pool-1] WARN io.netty.channel.kqueue.KQueueEventLoop - events[1]=[69, -1] had no channel!\r\nuser=> [aleph-netty-client-event-pool-2] WARN io.netty.channel.kqueue.KQueueEventLoop - events[1]=[71, -1] had no channel!\r\n```",
        "@normanmaurer I'll check in a couple of hours. \r\n\r\np.s. One small thing, I think `test.log` was added by mistake.",
        "@normanmaurer Nice! Works on my end. I didn't have a strong reproducer but I saw quite a few WARN messages while running my tests. No I don't see any of those. Thanks."
    ],
    "7303": [],
    "4025": [],
    "8855": [
        "\ud83d\udc4d I've been parsing URIs this way (HTML5's form-url-encoded) for many years in both AHC and Gatling and I don't recall anyone ever complaining that semi-colon wasn't interpreted as a parameter separator.",
        "> Note also that when encoding an URL with java URI.tostring(), semicolons are _not_ encoded, so the client has extra replaces to do before sending the request\r\n\r\nI suppose you mean: if my server is Netty and uses `QueryStringDecoder`, I have to encode semicolons manually so `QueryStringDecoder` doesn't mess up with parsing, as URI.toString() won't encode them (which is expected).\r\n\r\n> For me the correction would only be to delete the `case \u2018;\u2019 :` on line 230 of QueryStringDecoder.java. But maybe there are tests to correct also. Never done a PR but I can try...\r\n\r\nThis is a low hanging fruit so it would be a perfect ft for a first PR indeed :)"
    ],
    "3834": [],
    "4532": [],
    "8862": [
        "+1"
    ],
    "5481": [],
    "9198": [],
    "6339": [],
    "8868": [
        "@georgeOsdDev what you suggest we should do here ? You are saying we should check in the constructor that you do not construct something \"invalid\" ?",
        "Looking into it",
        "@georgeOsdDev PTAL https://github.com/netty/netty/pull/8885"
    ],
    "6886": [],
    "8651": [],
    "6032": [],
    "5830": [],
    "8875": [
        "@lutovich fix looks good. Please submit a PR :)"
    ],
    "5515": [],
    "4831": [],
    "4259": [],
    "8883": [
        "@normanmaurer I'll do a PR for WebSockets first, as I know this code quite well. Will check `SslHandler` later ;) ",
        "Ah, okay! Now it's clear. I thought you meant that we need to do the same for SSL. Thanks! ",
        "@kachayev this sounds good... Its also inline with what we do in SslHandler. ",
        "Sorry maybe I was not clear here... we have this kind of code already in SslHandler. I just wanted to mention it as it may gives you some good examples "
    ],
    "8870": [],
    "7165": [],
    "4535": [],
    "9011": [],
    "6639": [],
    "3803": [],
    "8892": [],
    "3527": [],
    "4737": [],
    "6101": [],
    "4417": [],
    "5794": [],
    "7920": [],
    "6568": [],
    "8829": [],
    "8808": [],
    "8636": [],
    "3666": [],
    "7234": [],
    "40": [],
    "3472": [],
    "359": [],
    "6088": [],
    "2773": [],
    "3055": [],
    "2621": [],
    "8915": [],
    "8916": [],
    "2897": [],
    "9068": [],
    "8912": [],
    "7348": [],
    "7342": [],
    "3465": [],
    "8124": [],
    "8315": [],
    "3727": [],
    "7476": [],
    "5814": [],
    "2425": [],
    "6175": [],
    "5143": [],
    "5502": [],
    "7180": [],
    "4215": [],
    "390": [],
    "7141": [],
    "4140": [],
    "8940": [],
    "7926": [],
    "8942": [],
    "3389": [],
    "5329": [],
    "8953": [],
    "5790": [],
    "8959": [
        "The bare minimum 3 needed for any vertx app or the netty examples is here: https://github.com/pmlopes/vertx-starter/blob/develop/templates/graal-nativeimage/src/main/java/SVMSubstitutions.java \r\n\r\nIf you want I can help with this, just let me know which package would best and module.",
        "@olpaw yes the link I posted was an example, the vertx one should not be in netty of course, but in vert.x. Basically they are the same you also use on netty plot demo.",
        "@olpaw could you review this before I open a pull request? https://github.com/pmlopes/netty/commit/26b8a14cfa61d9ae33f31a80beda8be8a685536d \r\n\r\n@normanmaurer I am facing an issue with check style that does not recognize the copyright comment on the property files, could you peek at the commit above and let me know how I should format it? or just point me to some example (which i could not find on my own, sorry).",
        "Are you interested in providing a PR?\n\n> Am 20.03.2019 um 15:31 schrieb Paul Woegerer <notifications@github.com>:\n> \n> As described in https://medium.com/graalvm/simplifying-native-image-generation-with-maven-plugin-and-embeddable-configuration-d5b283b92f57 (see Composable native-image.properties) GraalVM native-image building supports embedding native-image configuration options and substitutions right into jar-files.\n> \n> Currently when Netty is used in the context of building an image, configuration options and substitutions need to be provided from the outside. Please add the required substitutions and build options right into Netty as described in the article. This will allow Netty to be used in image builds without requiring any external configuration.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n"
    ],
    "8272": [],
    "8839": [],
    "3299": [],
    "8968": [
        "working on it"
    ],
    "3795": [],
    "585": [],
    "4845": [],
    "4119": [],
    "3626": [],
    "5897": [],
    "5108": [],
    "5166": [],
    "8034": [],
    "7975": [],
    "8983": [
        "I think this is expected and by design... that said I think we could deprecate it as we also dont use it at all in Netty... @trustin thoughts ?"
    ],
    "4548": [],
    "3038": [],
    "6629": [],
    "2578": [],
    "8405": [],
    "3045": [],
    "3893": [],
    "5063": [],
    "6147": [],
    "7124": [],
    "6025": [],
    "6751": [],
    "2172": [],
    "1334": [],
    "8998": [
        "@SplotyCode thanks a lot... will review once done",
        "@bergerst if you think there is a bug or there is something that can be improved please provide a pr."
    ],
    "4101": [],
    "5406": [],
    "9007": [],
    "3175": [],
    "198": [],
    "5628": [],
    "6354": [],
    "4408": [],
    "9013": [],
    "5258": [],
    "6149": [],
    "5957": [],
    "3401": [],
    "9018": [],
    "5018": [],
    "4560": [],
    "9048": [],
    "6970": [],
    "8919": [],
    "9026": [
        "Thanks for reporting... This is a bug and should be fixed here: https://github.com/netty/netty/pull/9030"
    ],
    "2299": [],
    "4190": [],
    "2734": [],
    "5337": [],
    "9031": [
        "@Mr00Anderson ca. == approximately  . So yep PRs welcome "
    ],
    "9032": [
        "Sorry but you will have to provide more details. ",
        "@sureshkrishnamoorthy this is not a \"valid report\" as this is only used to test if a wrapper is applied and is never used to actual verify certificates at the end.\r\n\r\nThat said I can make this go away easily. Let me do this to make things \"easier\" for you.",
        "@sureshkrishnamoorthy fixed by https://github.com/netty/netty/pull/9041"
    ],
    "664": [],
    "8435": [],
    "9035": [
        "Hi @vikashsingh009, I don't have a windows environment to test this with. IKVM has had issues with JCTools before, e.g.: \r\nhttps://sourceforge.net/p/ikvm/mailman/message/35520859/\r\n\r\nI understand the error you see is in the process using the dll produced by IKVM, I am not familiar with the IKVM project, you may need to seek help there. @normanmaurer perhaps we can add some JVM detection to use the atomic queues on IKVM JVMs?",
        "@nitsanw any idea ?",
        "@nitsanw sounds like an idea... \r\n\r\n@vikashsingh009 can you tell me what `java.vm.name` system property tell you on this system ? ",
        "So looks like this:\r\n\r\n```\r\n\"java.vm.name\", \"IKVM.NET\"\r\n```\r\nhttps://sourceforge.net/p/ikvm/mailman/message/19032390/\r\n\r\nMaybe we should just \"disable\" sun.misc.Unsafe usage all together",
        "Should be fixed by https://github.com/netty/netty/pull/9042",
        "It must be the 4.1 branch\n\n> Am 13.04.2019 um 09:10 schrieb vikashsingh009 <notifications@github.com>:\n> \n> Thanks for info but i am still getting Error here is the  steps i did\n> \n> Build netty Master branch\n> \n> used this to put in Maven Local repo\n> mvn install:install-file -Dfile=netty-all-4.1.35.Final.jar -DgroupId=io.netty -DartifactId=netty-all -Dversion=4.1.35.Final -Dpackaging=jar -DgeneratePom=true\n> \n> changed RocketMq Netty Jar from here https://github.com/apache/rocketmq/blob/master/pom.xml\n> \n> io.netty netty-all 4.1.35.Final 4) after that build RocketMq and copy rocketmq jars to IKVM and build it 5) start rocket mq with source build 6) now used in C# Producer Consumer App ,but still getting  Error\n> here is Complete Logs\n> rocketmq_client.log\n> \n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
        "Seems so... can you print out system properties and include them here ?\n\n> Am 13.04.2019 um 09:53 schrieb vikashsingh009 <notifications@github.com>:\n> \n> yes my mistake yes i have used 4.1 branch Only, if i see above attached log i am not getting any Logs Realted to IKVM like this line on PlatformDependent\n> \n> logger.debug(\"sun.misc.Unsafe: unavailable (IKVM.NET)\");\n> \n> is somewhere ikVM envirnament not detected\n> \n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
        "So my change did work at the end ?\n\n> Am 13.04.2019 um 14:44 schrieb vikashsingh009 <notifications@github.com>:\n> \n> @normanmaurer @nitsanw thanks for your great support now i can able to send and recieve Message without intruption its great help in hunting down issue\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n"
    ],
    "2071": [],
    "6725": [],
    "9196": [],
    "2521": [],
    "7865": [],
    "4603": [],
    "3315": [],
    "7466": [],
    "6408": [],
    "6670": [],
    "5000": [],
    "6955": [],
    "3239": [],
    "4963": [],
    "3627": [],
    "7661": [],
    "1999": [],
    "2704": [],
    "8157": [],
    "8058": [],
    "1843": [],
    "1854": [],
    "8864": [],
    "9064": [],
    "2783": [],
    "9218": [],
    "2383": [],
    "4083": [],
    "4751": [],
    "594": [],
    "8845": [],
    "4141": [],
    "5778": [],
    "7283": [],
    "2217": [],
    "38": [],
    "9092": [],
    "8876": [],
    "4396": [],
    "6908": [],
    "9042": [],
    "7151": [],
    "9099": [],
    "7861": [],
    "7507": [],
    "2215": [],
    "7460": [],
    "8922": [],
    "5834": [],
    "2101": [],
    "6967": [],
    "9115": [],
    "5742": [],
    "8815": [],
    "9129": [],
    "2618": [],
    "8699": [],
    "7090": [],
    "1555": [],
    "7972": [],
    "5625": [],
    "3046": [],
    "9131": [],
    "7580": [],
    "3365": [],
    "9134": [
        "Use websocket client in netty in any way and it\u2019s very easily reproduced code is wrong in handshaker\n\nSent from my iPhone\n\n> On May 8, 2019, at 3:12 AM, Norman Maurer <notifications@github.com> wrote:\n> \n> @davydotcom do you have a reproducer ?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n"
    ],
    "7564": [],
    "9146": [],
    "8577": [],
    "7493": [],
    "4569": [],
    "9147": [],
    "7381": [],
    "9151": [
        "Ah, sorry. I was wrong. OS version is this.\r\n\r\n```\r\nLinux xxxxxx 3.10.0-862.9.1.el7.x86_64 #1 SMP Mon Jul 16 16:29:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\r\n```",
        "@normanmaurer \r\nThank you for your quick response. :)"
    ],
    "7680": [],
    "8758": [],
    "159": [],
    "9159": [],
    "3316": [],
    "1484": [],
    "410": [],
    "4102": [],
    "6171": [],
    "4875": [],
    "7618": [],
    "6731": [],
    "9173": [],
    "4785": [],
    "4991": [],
    "3163": [],
    "5659": [],
    "5373": [],
    "6517": [],
    "8973": [],
    "905": [],
    "8844": [],
    "9197": [],
    "7824": [],
    "6477": [],
    "4492": [],
    "9199": [],
    "9205": [
        "FYI, it's currently very hard to workaround this issue by subclassing WebSocketClientHandshaker13: `expectedChallengeResponseString` is private, `WebSocketUtil` is package private.\r\n\r\nI would love to contribute a fix but I'd like your opinion:\r\n\r\n* is this too much of a corner case so we should move WebSocketClientHandshaker13's url computation into a protected method so user can subclass?\r\n* or should we add yet another constructor with a new boolean parameter to all WebSocketClientHandshakerXX classes and another factory method in WebSocketClientHandshakerFactory?",
        "@normanmaurer Absolutely, most server implementations will rightfully blow up because of the malformed request. The only case you use absolute urls is with HTTP proxy over clear HTTP.",
        "I'd say to go with the additional parameter/constructors/factory for Netty 4.1.\r\n\r\nBut this really needs to be cleaned up for Netty 5: drop early specs, make single constructor package protected and introduce a Builder a la `DnsNameResolverBuilder`.\r\n\r\nWDYT?"
    ],
    "1329": [],
    "6701": [],
    "8468": [],
    "9212": [],
    "5321": [],
    "4319": [],
    "6985": [],
    "8115": [],
    "5163": [],
    "105": [],
    "461": [],
    "5482": [],
    "7597": [],
    "8070": [],
    "878": [],
    "7060": [],
    "8464": [],
    "3617": [],
    "2581": [],
    "4477": [],
    "6397": [],
    "8835": [],
    "4294": [],
    "3640": [],
    "4370": [],
    "6994": [],
    "8634": [],
    "5443": [],
    "8428": [],
    "7258": [],
    "5002": [],
    "5484": [],
    "7438": [],
    "7780": [],
    "800": [],
    "3555": [],
    "865": [],
    "8781": [],
    "3407": [],
    "70": [],
    "8980": [],
    "7041": [],
    "2123": [],
    "2834": [],
    "6822": [],
    "8591": [],
    "7674": [],
    "2967": [],
    "4623": [],
    "5309": [],
    "6308": [],
    "2063": [],
    "6123": [],
    "6530": [],
    "4684": [],
    "6145": [],
    "2208": [],
    "421": [],
    "5826": [],
    "21": [],
    "1762": [],
    "3624": [],
    "6792": [],
    "5193": [],
    "2149": [],
    "6552": [],
    "1901": [],
    "2225": [],
    "6856": [],
    "6889": [],
    "3757": [],
    "2413": [],
    "3117": [],
    "3116": [],
    "8096": [],
    "7698": [],
    "6744": [],
    "7263": [],
    "6018": [],
    "73": [],
    "9211": [],
    "4579": [],
    "5318": [],
    "4097": [],
    "7656": [],
    "5348": [],
    "7203": [],
    "4419": [],
    "6828": [],
    "590": [],
    "5056": [],
    "2213": [],
    "6913": [],
    "4933": [],
    "912": [],
    "1330": [],
    "3957": [],
    "4791": [],
    "7048": [],
    "5731": [],
    "2707": [],
    "8738": [],
    "1888": [],
    "1009": [],
    "5564": [],
    "498": [],
    "7158": [],
    "5233": [],
    "7382": [],
    "4352": [],
    "6512": [],
    "5898": [],
    "6081": [],
    "4616": [],
    "8967": [],
    "34": [],
    "5219": [],
    "4619": [],
    "6599": [],
    "2531": [],
    "5017": [],
    "8987": [],
    "518": [],
    "5367": [],
    "4513": [],
    "45": [],
    "1033": [],
    "4919": [],
    "4697": [],
    "8454": [],
    "6273": [],
    "1037": [],
    "5128": [],
    "5804": [],
    "1577": [],
    "5610": [],
    "4219": [],
    "5503": [],
    "7008": [],
    "6484": [],
    "4341": [],
    "7308": [],
    "7667": [],
    "6299": [],
    "224": [],
    "4494": [],
    "3": [],
    "6059": [],
    "2406": [],
    "637": [],
    "28": [],
    "8852": [],
    "7284": [],
    "5538": [],
    "5750": [],
    "6239": [],
    "4815": [],
    "3615": [],
    "5641": [],
    "7000": [],
    "5200": [],
    "4389": [],
    "6403": [],
    "9025": [],
    "4214": [],
    "6696": [],
    "7726": [],
    "4900": [],
    "5178": [],
    "5911": [],
    "3842": [],
    "185": [],
    "4819": [],
    "6764": [],
    "1011": [],
    "6713": [],
    "4804": [],
    "5015": [],
    "280": [],
    "2184": [],
    "13": [],
    "5252": [],
    "8667": [],
    "7424": [],
    "1146": [],
    "7872": [],
    "3729": [],
    "8611": [],
    "1151": [],
    "5107": [],
    "4369": [],
    "2499": [],
    "5451": [],
    "4649": [],
    "2678": [],
    "5476": [],
    "6809": [],
    "5843": [],
    "2593": [],
    "3691": [],
    "2456": [],
    "7457": [],
    "3622": [],
    "5468": [],
    "5445": [],
    "8597": [],
    "465": [],
    "253": [],
    "236": [],
    "4512": [],
    "9096": [],
    "824": [],
    "7096": [],
    "8958": [],
    "3058": [],
    "3276": [],
    "8492": [],
    "8241": [],
    "7633": [],
    "3628": [],
    "553": [],
    "8560": [],
    "3695": [],
    "6214": [],
    "5869": [],
    "4320": [],
    "6199": [],
    "7999": [],
    "8939": [],
    "9390": [],
    "5873": [],
    "4291": [],
    "460": [],
    "6110": [],
    "4759": [],
    "3148": [],
    "5798": [],
    "6420": [],
    "2364": [],
    "2634": [],
    "3674": [],
    "7632": [],
    "7095": [],
    "3581": [],
    "2974": [],
    "1130": [],
    "6974": [],
    "5260": [],
    "1680": [],
    "4098": [],
    "499": [],
    "8351": [],
    "1081": [],
    "6543": [],
    "176": [],
    "2865": [],
    "5672": [],
    "2378": [],
    "6728": [],
    "3874": [],
    "430": [],
    "4431": [],
    "3088": [],
    "742": [],
    "2640": [],
    "127": [],
    "3400": [],
    "967": [],
    "4117": [],
    "4139": [],
    "6409": [],
    "8896": [],
    "4257": [],
    "555": [],
    "3506": [],
    "8858": [],
    "5558": [],
    "8966": [],
    "8050": [],
    "1757": [],
    "4946": [],
    "6887": [],
    "4837": [],
    "5089": [],
    "8457": [],
    "8819": [],
    "2690": [],
    "4674": [],
    "7801": [],
    "8799": [],
    "8262": [],
    "5547": [],
    "7737": [],
    "8128": [],
    "8225": [],
    "6850": [],
    "1617": [],
    "6187": [],
    "6915": [],
    "482": [],
    "1386": [],
    "3514": [],
    "6337": [],
    "8237": [],
    "9006": [],
    "7624": [],
    "8590": [],
    "5656": [],
    "2784": [],
    "8380": [],
    "1125": [],
    "7622": [],
    "1279": [],
    "7966": [],
    "2601": [],
    "5438": [],
    "5743": [],
    "5051": [],
    "7333": [],
    "2533": [],
    "8847": [],
    "2274": [],
    "793": [],
    "3733": [],
    "220": [],
    "4968": [],
    "2210": [],
    "1000": [],
    "7322": [],
    "1549": [],
    "1871": [],
    "2966": [],
    "379": [],
    "8046": [],
    "8397": [],
    "8264": [],
    "3253": [],
    "6895": [],
    "1961": [],
    "2437": [],
    "1567": [],
    "6829": [],
    "7241": [],
    "9167": [],
    "4606": [],
    "7700": [],
    "8437": [],
    "5771": [],
    "6885": [],
    "29": [],
    "6667": [],
    "5437": [],
    "4423": [],
    "5532": [],
    "6197": [],
    "7492": [],
    "119": [],
    "7093": [],
    "7183": [],
    "7584": [],
    "7345": [],
    "6300": [],
    "5195": [],
    "1678": [],
    "3951": [],
    "3771": [],
    "7084": [],
    "8895": [],
    "752": [],
    "8784": [],
    "9149": [],
    "8502": [],
    "6558": [],
    "8672": [],
    "7649": [],
    "6643": [],
    "1653": [],
    "4645": [],
    "7554": [],
    "1223": [],
    "8991": [],
    "6826": [],
    "2037": [],
    "5883": [],
    "8620": [],
    "9075": [],
    "3556": [],
    "4728": [],
    "9179": [],
    "8321": [],
    "6291": [],
    "8614": [],
    "5808": [],
    "4912": [],
    "2928": [],
    "254": [],
    "6462": [],
    "4428": [],
    "2076": [],
    "5429": [],
    "417": [],
    "2968": [],
    "5105": [],
    "4580": [],
    "115": [],
    "5797": [],
    "7046": [],
    "118": [],
    "7114": [],
    "6251": [],
    "548": [],
    "3532": [],
    "2176": [],
    "1867": [],
    "6396": [],
    "8154": [],
    "3167": [],
    "4112": [],
    "8739": [],
    "3537": [],
    "4605": [],
    "5569": [],
    "3187": [],
    "6376": [],
    "6091": [],
    "5691": [],
    "3327": [],
    "6876": [],
    "7007": [],
    "8186": [],
    "243": [],
    "7813": [],
    "7023": [],
    "5935": [],
    "5878": [],
    "7816": [],
    "7827": [],
    "2920": [],
    "1446": [],
    "8": [],
    "2673": [],
    "4786": [],
    "4712": [],
    "9063": [],
    "6623": [],
    "9404": [],
    "6344": [],
    "5494": [],
    "6515": [],
    "4783": [],
    "6500": [],
    "2286": [],
    "2922": [],
    "3119": [],
    "7224": [],
    "4340": [],
    "4391": [],
    "3723": [],
    "8126": [],
    "2553": [],
    "7276": [],
    "6075": [],
    "5067": [],
    "8232": [],
    "6118": [],
    "8091": [],
    "776": [],
    "3086": [],
    "6142": [],
    "8412": [],
    "7878": [],
    "1144": [],
    "4798": [],
    "2150": [],
    "1536": [],
    "1660": [],
    "2256": [],
    "2721": [],
    "7678": [],
    "8661": [],
    "8606": [],
    "6013": [],
    "496": [],
    "6529": [],
    "4236": [],
    "4611": [],
    "177": [],
    "4826": [],
    "4729": [],
    "8842": [],
    "6043": [],
    "8837": [],
    "4488": [],
    "6090": [],
    "2965": [],
    "5612": [],
    "7086": [],
    "2890": [],
    "4688": [],
    "4714": [],
    "5381": [],
    "7594": [],
    "2788": [],
    "1558": [],
    "20": [],
    "5587": [],
    "9004": [],
    "8347": [],
    "409": [],
    "8564": [],
    "5242": [],
    "5369": [],
    "6911": [],
    "2724": [],
    "714": [],
    "5291": [],
    "5585": [],
    "1121": [],
    "6107": [],
    "1194": [],
    "5795": [],
    "3118": [],
    "352": [],
    "7612": [],
    "6616": [],
    "5345": [],
    "7738": [],
    "3583": [],
    "3642": [],
    "3512": [],
    "5395": [],
    "5622": [],
    "5340": [],
    "7163": [],
    "1421": [],
    "7267": [],
    "2460": [],
    "1849": [],
    "9162": [],
    "5390": [],
    "8406": [],
    "2570": [],
    "1787": [],
    "5780": [],
    "4405": [],
    "6845": [],
    "9921": [],
    "8274": [],
    "7043": [],
    "6965": [],
    "3730": [],
    "4013": [],
    "2754": [],
    "5389": [],
    "5832": [],
    "7951": [],
    "3050": [],
    "5725": [],
    "1746": [],
    "5546": [],
    "2365": [],
    "5788": [],
    "7510": [],
    "1462": [],
    "196": [],
    "4104": [],
    "3385": [],
    "5662": [],
    "2394": [],
    "949": [],
    "4782": [],
    "8996": [],
    "5114": [],
    "5942": [],
    "7198": [],
    "8047": [],
    "1930": [],
    "923": [],
    "8074": [],
    "9081": [],
    "1102": [],
    "7608": [],
    "8976": [],
    "3491": [],
    "5012": [],
    "2015": [],
    "3616": [],
    "7182": [],
    "9090": [],
    "4825": [],
    "704": [],
    "1883": [],
    "1032": [],
    "630": [],
    "5749": [],
    "7562": [],
    "4740": [],
    "4166": [],
    "7108": [],
    "2470": [],
    "3864": [],
    "8410": [],
    "5792": [],
    "1156": [],
    "8443": [],
    "2391": [],
    "1646": [],
    "9074": [],
    "4366": [],
    "7446": [],
    "6940": [],
    "648": [],
    "3151": [],
    "7830": [],
    "5251": [],
    "162": [],
    "2473": [],
    "4035": [],
    "4047": [],
    "7701": [],
    "5214": [],
    "285": [],
    "347": [],
    "8459": [],
    "7734": [],
    "3712": [],
    "8812": [],
    "3069": [],
    "633": [],
    "4411": [],
    "5603": [],
    "4626": [],
    "2714": [],
    "8052": [],
    "8797": [],
    "9021": [],
    "6912": [],
    "8204": [],
    "3865": [],
    "7168": [],
    "7690": [],
    "7598": [],
    "3128": [],
    "1839": [],
    "6787": [],
    "4542": [],
    "5467": [],
    "1043": [],
    "6386": [],
    "8778": [],
    "5314": [],
    "4784": [],
    "2739": [],
    "7601": [],
    "5286": [],
    "1457": [],
    "6295": [],
    "7416": [],
    "5169": [],
    "4076": [],
    "8555": [],
    "8568": [],
    "4455": [],
    "5049": [],
    "4790": [],
    "5302": [],
    "6310": [],
    "3309": [],
    "9126": [],
    "8580": [],
    "2901": [],
    "8189": [],
    "759": [],
    "4039": [],
    "6430": [],
    "8981": [],
    "1206": [],
    "2962": [],
    "9189": [],
    "2908": [],
    "7066": [],
    "745": [],
    "4335": [],
    "1276": [],
    "2898": [],
    "8767": [],
    "376": [],
    "6453": [],
    "8389": [],
    "6363": [],
    "4976": [],
    "7948": [],
    "4038": [],
    "6087": [],
    "8487": [],
    "2313": [],
    "6235": [],
    "7": [],
    "8909": [],
    "1419": [],
    "2235": [
        "@ngocdaothanh I'm right ?\n",
        "You're right.\n\nThe source code of RandomAccessFile says that `RandomAccessFile#close` simply calls `FileChannel#close`:\nhttp://developer.classpath.org/doc/java/io/RandomAccessFile-source.html\n\nAthough the Javadoc doesn't say that, I'm closing this issue for now.\n",
        "But actually, FileRegions are not used with SSL, does the RandomAccessFile still get closed when HttpChunkedInput is used instead?\n\n```\n    if (ctx.pipeline().get(SslHandler.class) == null) {\n        sendFileFuture =\n                ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise());\n        // Write the end marker.\n        lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);\n    } else {\n        sendFileFuture =\n                ctx.write(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),\n                        ctx.newProgressivePromise());\n        // HttpChunkedInput will write the end marker (LastHttpContent) for us.\n        lastContentFuture = sendFileFuture;\n    }\n```\n",
        "@lukehutch It should be closed automatically when the write attempt is done (either success or failure). If not, please let us know.\n"
    ],
    "4173": [],
    "4160": [],
    "3145": [],
    "5872": [],
    "1738": [],
    "2655": [],
    "2048": [],
    "6237": [],
    "6045": [],
    "5071": [],
    "5915": [],
    "3260": [],
    "2078": [],
    "749": [],
    "5285": [],
    "7544": [],
    "8832": [],
    "8156": [],
    "8029": [],
    "1791": [],
    "5542": [],
    "2304": [],
    "7884": [],
    "5688": [],
    "8681": [],
    "2660": [],
    "5140": [],
    "324": [],
    "135": [],
    "2138": [],
    "8227": [],
    "3225": [],
    "2429": [],
    "6777": [],
    "1190": [],
    "2399": [],
    "2335": [],
    "542": [],
    "3658": [],
    "8415": [],
    "887": [],
    "2556": [],
    "6575": [],
    "4651": [],
    "6427": [],
    "8470": [],
    "4308": [],
    "9020": [],
    "4103": [],
    "627": [],
    "3064": [],
    "3497": [],
    "4940": [],
    "784": [],
    "5153": [],
    "5658": [],
    "9071": [],
    "586": [],
    "5917": [],
    "2652": [],
    "3473": [],
    "2115": [],
    "6726": [],
    "5281": [],
    "2576": [],
    "2805": [],
    "8240": [],
    "4646": [],
    "2689": [],
    "6498": [],
    "8320": [],
    "8316": [],
    "8059": [],
    "4599": [],
    "3873": [],
    "2511": [],
    "8383": [],
    "1106": [],
    "3979": [],
    "3909": [],
    "6772": [],
    "4949": [],
    "7531": [],
    "4474": [],
    "7037": [],
    "8304": [],
    "4086": [],
    "5326": [],
    "7127": [],
    "3876": [],
    "5209": [],
    "619": [],
    "4524": [],
    "1257": [],
    "4345": [],
    "3277": [],
    "8193": [],
    "732": [],
    "7604": [],
    "6619": [],
    "1137": [],
    "9551": [],
    "5418": [],
    "7440": [],
    "2329": [],
    "6448": [],
    "8385": [],
    "8289": [],
    "8828": [],
    "2527": [],
    "2389": [],
    "918": [],
    "5495": [],
    "5714": [],
    "4222": [],
    "618": [],
    "7573": [],
    "9203": [],
    "5724": [],
    "1349": [],
    "6103": [],
    "124": [],
    "4267": [],
    "3325": [],
    "5634": [],
    "1866": [],
    "8985": [],
    "6355": [],
    "1287": [],
    "22": [],
    "3541": [],
    "2089": [],
    "8425": [],
    "954": [],
    "3009": [],
    "8759": [],
    "4343": [],
    "5823": [],
    "5359": [],
    "6656": [],
    "3520": [],
    "5550": [],
    "6314": [],
    "5109": [],
    "5523": [],
    "3906": [],
    "3348": [],
    "4880": [],
    "8680": [],
    "4663": [],
    "3923": [],
    "9015": [],
    "8054": [],
    "6196": [],
    "3793": [],
    "750": [],
    "2069": [],
    "6033": [],
    "2080": [],
    "6250": [],
    "8723": [],
    "4337": [],
    "7213": [],
    "3969": [],
    "4864": [],
    "3149": [],
    "2493": [],
    "8136": [],
    "4803": [],
    "3395": [],
    "3579": [],
    "9156": [],
    "4860": [],
    "4330": [],
    "2218": [],
    "6331": [],
    "5245": [],
    "284": [],
    "5649": [],
    "8039": [],
    "4589": [],
    "3109": [],
    "3741": [],
    "6603": [],
    "3821": [],
    "4475": [],
    "8890": [],
    "6245": [],
    "7461": [],
    "3867": [],
    "8388": [],
    "4817": [],
    "4011": [],
    "4566": [],
    "158": [],
    "7297": [],
    "3471": [],
    "6719": [],
    "7922": [],
    "2585": [],
    "5426": [],
    "6971": [],
    "5905": [],
    "5083": [],
    "8694": [],
    "5377": [],
    "8777": [],
    "2241": [],
    "4033": [],
    "3584": [],
    "4926": [],
    "7765": [],
    "210": [],
    "8599": [],
    "194": [],
    "4252": [],
    "2725": [],
    "5415": [],
    "5073": [],
    "7755": [],
    "8750": [],
    "3959": [],
    "9017": [],
    "3313": [],
    "4776": [],
    "2375": [],
    "2552": [],
    "3153": [],
    "6082": [],
    "4176": [],
    "5231": [],
    "4624": [],
    "6451": [],
    "8830": [],
    "1173": [],
    "3794": [],
    "5636": [],
    "5690": [],
    "2646": [
        "FYI, there's a ongoing discussion about introducing non shared caching in AHC: https://github.com/AsyncHttpClient/async-http-client/issues/1427\r\n\r\nThere's a lot of material in Play! to pick ideas from.",
        "@cskinfill we love contributions. And yeah using a ChannelHandler for this sounds about right.\n",
        "Am interested in this having done a lot of HTTP caching RFC-reading and cursing at Apache HC lately; I'm guessing sharing between channels is probably desirable, e.g. for connection-pooling?",
        "@madgnome happy to pick up the branch you were working on if you don't have any capacity? Seems like a good approach"
    ],
    "4792": [],
    "3833": [],
    "1803": [],
    "5907": [],
    "8592": [],
    "6851": [],
    "3878": [],
    "5206": [],
    "4810": [],
    "3242": [],
    "7334": [],
    "3802": [],
    "4364": [],
    "9029": [],
    "7011": [],
    "1040": [],
    "2858": [],
    "4577": [],
    "7279": [],
    "1217": [],
    "6293": [],
    "8207": [],
    "3879": [],
    "4342": [],
    "2409": [],
    "4723": [],
    "746": [],
    "5011": [],
    "2317": [],
    "4486": [],
    "8684": [],
    "3566": [],
    "3889": [],
    "6112": [],
    "8414": [],
    "4681": [],
    "4661": [],
    "7326": [],
    "790": [],
    "7731": [],
    "2265": [],
    "3725": [],
    "8001": [],
    "3091": [],
    "400": [],
    "3353": [],
    "6085": [],
    "3763": [],
    "225": [],
    "8026": [],
    "6106": [],
    "4910": [],
    "3577": [],
    "9045": [],
    "7889": [],
    "4195": [],
    "5425": [],
    "4326": [],
    "565": [],
    "5392": [],
    "5241": [],
    "8431": [],
    "136": [],
    "3396": [],
    "5730": [],
    "2393": [],
    "2259": [],
    "3280": [],
    "5081": [],
    "8952": [],
    "1781": [],
    "3386": [],
    "4359": [],
    "6496": [],
    "27": [],
    "5668": [],
    "6447": [],
    "4871": [],
    "2045": [],
    "4702": [],
    "4983": [],
    "7519": [],
    "6392": [],
    "7098": [],
    "5131": [],
    "4113": [],
    "5284": [],
    "4687": [],
    "2988": [],
    "8297": [],
    "2038": [],
    "5728": [],
    "7539": [],
    "7161": [],
    "3268": [],
    "6835": [],
    "4781": [],
    "5246": [],
    "631": [],
    "6380": [],
    "1255": [],
    "3010": [],
    "464": [],
    "8314": [],
    "2912": [],
    "7658": [],
    "9001": [],
    "7685": [],
    "4775": [],
    "1931": [],
    "6089": [],
    "5289": [],
    "3545": [],
    "3975": [],
    "6987": [],
    "8500": [],
    "5886": [],
    "5298": [],
    "8270": [],
    "5142": [],
    "512": [],
    "6830": [],
    "4115": [],
    "7886": [],
    "9078": [],
    "1891": [],
    "7450": [],
    "1974": [],
    "7003": [],
    "3111": [],
    "80": [],
    "9008": [],
    "3092": [],
    "5399": [],
    "7746": [],
    "1981": [],
    "4614": [],
    "3948": [],
    "8325": [],
    "4387": [],
    "1028": [],
    "4520": [],
    "346": [],
    "6935": [],
    "5529": [],
    "1418": [],
    "3185": [],
    "5664": [],
    "339": [],
    "8344": [],
    "1305": [],
    "5644": [],
    "2012": [],
    "6838": [],
    "947": [],
    "446": [],
    "5339": [],
    "8691": [],
    "849": [],
    "3132": [],
    "7521": [],
    "3524": [],
    "6811": [],
    "8210": [],
    "755": [],
    "780": [],
    "2608": [],
    "5048": [],
    "5844": [],
    "5409": [],
    "8806": [],
    "4412": [],
    "7533": [],
    "8031": [],
    "7153": [],
    "3898": [],
    "7415": [],
    "9405": [],
    "5324": [],
    "2945": [],
    "4178": [],
    "899": [],
    "260": [],
    "9191": [],
    "7376": [],
    "5557": [],
    "4621": [],
    "7441": [],
    "3346": [],
    "6814": [],
    "4747": [],
    "2122": [],
    "4297": [],
    "5992": [],
    "589": [],
    "8881": [],
    "6439": [],
    "7356": [],
    "8902": [],
    "6391": [],
    "5138": [],
    "9169": [],
    "8891": [],
    "8177": [],
    "5867": [],
    "6492": [],
    "44": [],
    "2007": [],
    "49": [],
    "6086": [],
    "4003": [],
    "526": [],
    "4584": [],
    "2245": [],
    "7858": [],
    "7366": [],
    "6302": [],
    "8378": [],
    "2802": [],
    "5444": [],
    "8183": [],
    "5465": [],
    "5172": [],
    "4711": [],
    "692": [],
    "7797": [],
    "4695": [],
    "2781": [],
    "6424": [],
    "7197": [],
    "5394": [],
    "796": [],
    "4390": [],
    "2495": [],
    "2871": [],
    "8391": [],
    "8755": [],
    "4642": [],
    "3263": [],
    "3918": [],
    "2278": [],
    "1779": [],
    "3428": [],
    "7739": [],
    "7666": [],
    "7227": [],
    "7540": [],
    "4434": [],
    "1354": [],
    "4263": [],
    "3170": [],
    "6676": [],
    "6488": [],
    "7703": [],
    "423": [],
    "7088": [],
    "4696": [],
    "6853": [],
    "3240": [],
    "3612": [],
    "6781": [],
    "3183": [],
    "8731": [],
    "5845": [],
    "662": [],
    "7422": [],
    "8181": [],
    "5640": [],
    "4788": [],
    "6644": [],
    "6780": [],
    "5940": [],
    "2990": [],
    "9139": [],
    "703": [],
    "5997": [],
    "2619": [],
    "151": [],
    "7761": [],
    "6201": [],
    "3243": [],
    "8394": [],
    "5698": [],
    "154": [],
    "8851": [],
    "4015": [],
    "1345": [],
    "1504": [],
    "6474": [],
    "4216": [],
    "36": [],
    "6638": [],
    "416": [],
    "798": [],
    "8448": [],
    "9060": [],
    "3224": [],
    "1371": [],
    "6866": [],
    "8110": [],
    "270": [],
    "5932": [],
    "9027": [],
    "3790": [],
    "350": [],
    "2592": [],
    "9046": [],
    "5441": [],
    "8436": [],
    "8711": [],
    "7918": [],
    "7057": [],
    "3651": [],
    "6444": [],
    "8224": [],
    "109": [],
    "9331": [],
    "4515": [],
    "2611": [],
    "617": [],
    "6": [],
    "1737": [],
    "8648": [],
    "6388": [],
    "1673": [],
    "8886": [],
    "3582": [],
    "886": [],
    "8292": [],
    "3255": [],
    "3021": [],
    "5134": [],
    "8485": [],
    "6259": [],
    "8118": [],
    "6854": [],
    "7648": [],
    "1383": [],
    "5991": [],
    "6506": [],
    "4094": [],
    "5145": [],
    "3037": [],
    "8877": [],
    "5852": [],
    "5398": [],
    "2293": [],
    "8780": [],
    "1456": [],
    "7770": [],
    "3751": [],
    "3384": [],
    "6939": [],
    "5729": [],
    "4339": [],
    "3844": [],
    "247": [],
    "6204": [],
    "7664": [],
    "1566": [],
    "6859": [],
    "4138": [],
    "6879": [],
    "3890": [],
    "7144": [],
    "554": [],
    "5768": [],
    "334": [],
    "4461": [],
    "7575": [],
    "4879": [],
    "463": [],
    "5479": [],
    "3264": [],
    "4745": [],
    "7916": [],
    "3254": [],
    "2842": [],
    "8762": [],
    "7026": [],
    "2602": [],
    "6928": [],
    "2277": [],
    "6697": [],
    "3441": [],
    "1495": [],
    "3269": [],
    "5504": [],
    "8783": [],
    "5346": [],
    "3494": [],
    "4678": [],
    "1670": [],
    "8231": [],
    "9221": [],
    "6803": [],
    "1119": [],
    "4716": [],
    "6806": [],
    "6962": [],
    "2549": [],
    "7339": [],
    "8407": [],
    "3174": [],
    "7600": [],
    "2319": [],
    "6077": [],
    "363": [],
    "8827": [],
    "3841": [],
    "1947": [],
    "3341": [],
    "388": [],
    "2641": [],
    "8099": [],
    "754": [],
    "3542": [],
    "5117": [],
    "1018": [],
    "979": [],
    "1868": [],
    "4099": [],
    "7143": [],
    "6425": [],
    "9109": [],
    "5512": [],
    "9166": [],
    "2635": [],
    "3271": [],
    "7606": [],
    "8709": [],
    "8291": [],
    "6954": [],
    "4977": [],
    "6254": [],
    "5459": [],
    "3995": [],
    "7232": [],
    "1995": [],
    "9000": [],
    "4443": [],
    "7157": [],
    "6241": [],
    "6411": [],
    "8260": [],
    "7958": [],
    "6463": [],
    "3868": [],
    "8843": [],
    "8725": [],
    "6904": [],
    "4309": [],
    "8809": [],
    "7844": [],
    "5674": [],
    "5075": [],
    "3493": [],
    "9214": [],
    "8490": [],
    "8324": [],
    "4988": [],
    "5584": [],
    "1915": [],
    "4739": [],
    "5393": [],
    "5400": [],
    "8794": [],
    "7653": [],
    "85": [],
    "8290": [],
    "5262": [],
    "6727": [],
    "2803": [],
    "6243": [],
    "3808": [],
    "8646": [],
    "4362": [],
    "9059": [],
    "7822": [],
    "5312": [],
    "4445": [],
    "9100": [],
    "7976": [],
    "4990": [],
    "9219": [],
    "9122": [],
    "2475": [],
    "5716": [],
    "4877": [],
    "900": [],
    "2729": [],
    "123": [],
    "6586": [],
    "6374": [],
    "1552": [],
    "4196": [],
    "7414": [],
    "6253": [],
    "1716": [],
    "4334": [],
    "2559": [],
    "7016": [],
    "3728": [],
    "6631": [],
    "1778": [],
    "8005": [],
    "3202": [],
    "8924": [],
    "8086": [],
    "7904": [],
    "8840": [],
    "3011": [],
    "833": [],
    "3252": [],
    "7277": [],
    "9177": [],
    "7051": [],
    "1655": [],
    "5983": [],
    "6215": [],
    "8191": [],
    "5567": [],
    "1333": [],
    "7579": [],
    "7328": [],
    "6775": [],
    "5677": [],
    "5588": [],
    "8923": [],
    "1735": [],
    "7953": [],
    "7049": [],
    "2353": [],
    "3603": [],
    "6553": [],
    "8761": [],
    "3693": [],
    "1546": [],
    "6113": [],
    "3933": [],
    "2893": [],
    "8813": [],
    "5422": [],
    "4597": [],
    "6952": [],
    "1767": [],
    "4304": [],
    "43": [],
    "7763": [],
    "5311": [],
    "2482": [],
    "7121": [],
    "6327": [],
    "6996": [],
    "3305": [],
    "7265": [],
    "6084": [],
    "1182": [],
    "9123": [],
    "6884": [],
    "2344": [],
    "2457": [],
    "8069": [],
    "4965": [],
    "3336": [],
    "1786": [],
    "2763": [],
    "1021": [],
    "6601": [],
    "5654": [],
    "587": [],
    "6598": [],
    "5378": [],
    "593": [],
    "2564": [],
    "4122": [],
    "6990": [],
    "8218": [],
    "4383": [],
    "3030": [],
    "6195": [],
    "1479": [],
    "758": [],
    "4901": [],
    "3430": [],
    "1877": [],
    "5126": [],
    "3273": [],
    "7805": [],
    "6760": [],
    "5767": [],
    "2995": [],
    "2387": [],
    "8822": [],
    "2440": [],
    "3433": [],
    "4767": [],
    "730": [],
    "802": [],
    "2186": [],
    "7038": [],
    "4955": [],
    "6360": [],
    "4142": [],
    "5020": [],
    "7499": [],
    "9143": [],
    "4578": [],
    "8451": [],
    "8484": [],
    "7512": [],
    "4761": [],
    "4082": [],
    "4253": [],
    "3012": [],
    "4706": [],
    "7248": [],
    "2699": [],
    "1207": [],
    "4436": [],
    "4592": [],
    "7373": [],
    "4406": [],
    "5080": [],
    "5606": [],
    "7022": [],
    "4873": [],
    "8595": [],
    "9171": [],
    "3601": [],
    "8402": [],
    "2462": [],
    "9192": [],
    "4945": [],
    "4630": [],
    "1563": [],
    "2892": [],
    "6662": [],
    "6370": [],
    "6570": [],
    "7138": [],
    "411": [],
    "4043": [],
    "8885": [],
    "5685": [],
    "3509": [],
    "3819": [],
    "3110": [],
    "4939": [],
    "4487": [],
    "7268": [],
    "6263": [],
    "5967": [],
    "6491": [],
    "8395": [],
    "8807": [],
    "6614": [],
    "7927": [],
    "4437": [],
    "6271": [],
    "7536": [],
    "5786": [],
    "7940": [],
    "2835": [],
    "8171": [],
    "4007": [],
    "2991": [],
    "4650": [],
    "1751": [],
    "791": [],
    "7980": [],
    "8167": [],
    "6039": [],
    "5250": [],
    "6483": [],
    "8308": [],
    "6322": [],
    "6941": [],
    "8905": [],
    "7986": [],
    "2271": [],
    "3554": [],
    "3786": [],
    "3629": [],
    "6367": [],
    "6079": [],
    "4329": [],
    "2537": [],
    "7134": [],
    "2100": [],
    "3392": [],
    "2367": [],
    "8779": [],
    "3495": [],
    "3735": [],
    "7032": [],
    "9103": [],
    "4749": [],
    "9047": [],
    "7543": [],
    "6704": [],
    "6329": [],
    "682": [],
    "4774": [],
    "7979": [],
    "2881": [],
    "3547": [],
    "8760": [],
    "4490": [],
    "5900": [],
    "1382": [],
    "9019": [],
    "3124": [],
    "3096": [],
    "6504": [],
    "468": [],
    "4689": [],
    "6634": [],
    "6991": [],
    "4322": [],
    "8178": [],
    "8943": [],
    "7402": [],
    "6892": [],
    "6988": [],
    "5177": [],
    "4998": [],
    "3282": [],
    "1635": [],
    "5077": [],
    "1216": [],
    "7176": [],
    "1755": [],
    "3083": [],
    "7212": [],
    "4300": [],
    "7879": [],
    "7331": [],
    "6774": [],
    "7696": [],
    "8836": [],
    "7895": [],
    "1184": [],
    "5562": [],
    "4026": [],
    "580": [],
    "6655": [],
    "3663": [],
    "8472": [],
    "3442": [],
    "6041": [],
    "4865": [],
    "523": [],
    "7019": [],
    "3142": [],
    "932": [],
    "4995": [],
    "420": [],
    "4806": [],
    "5164": [],
    "4765": [],
    "7191": [],
    "4948": [],
    "8969": [],
    "5306": [],
    "2489": [],
    "6359": [],
    "6198": [],
    "3894": [],
    "7782": [],
    "4666": [],
    "4382": [],
    "7885": [],
    "7596": [],
    "5135": [],
    "1179": [],
    "9184": [],
    "2780": [],
    "8578": [],
    "2818": [],
    "8296": [],
    "1537": [],
    "2453": [],
    "7745": [],
    "6527": [],
    "2959": [],
    "6734": [],
    "6469": [],
    "7106": [],
    "2147": [],
    "2343": [],
    "6284": [],
    "7421": [],
    "7650": [],
    "4888": [],
    "191": [],
    "4575": [],
    "9136": [],
    "8603": [],
    "2808": [],
    "8945": [],
    "8064": [],
    "3606": [],
    "2681": [],
    "7967": [],
    "1254": [],
    "1111": [],
    "1983": [],
    "114": [],
    "8744": [],
    "7932": [],
    "2638": [],
    "4683": [],
    "7945": [],
    "3343": [],
    "823": [],
    "6821": [],
    "4997": [],
    "6313": [],
    "2148": [],
    "1342": [],
    "5349": [],
    "5914": [],
    "537": [],
    "2054": [],
    "9187": [],
    "1954": [],
    "7470": [],
    "1973": [],
    "5949": [],
    "320": [],
    "3356": [],
    "7725": [],
    "4404": [],
    "4111": [],
    "4552": [],
    "2411": [],
    "9010": [],
    "1": [],
    "1932": [],
    "7702": [],
    "8145": [],
    "3350": [],
    "6490": [],
    "5022": [],
    "8946": [],
    "1463": [],
    "5112": [],
    "7525": [],
    "5829": [],
    "4051": [],
    "684": [],
    "1016": [],
    "5533": [],
    "4016": [],
    "8824": [],
    "6368": [],
    "5875": [],
    "2676": [],
    "1496": [],
    "4907": [],
    "2625": [],
    "9195": [],
    "1188": [],
    "6402": [],
    "8811": [],
    "7050": [],
    "8888": [],
    "7357": [],
    "3714": [],
    "4857": [],
    "8235": [],
    "5188": [],
    "5440": [],
    "5203": [],
    "3845": [],
    "8113": [],
    "2314": [],
    "5783": [],
    "2053": [],
    "6277": [],
    "1199": [],
    "8705": [],
    "3701": [],
    "6748": [],
    "7875": [],
    "3452": [],
    "1155": [],
    "8803": [],
    "4162": [],
    "2751": [],
    "8988": [],
    "1128": [],
    "3051": [],
    "7640": [],
    "2935": [],
    "6257": [],
    "241": [],
    "8587": [],
    "5939": [],
    "8335": [],
    "4863": [],
    "248": [],
    "5189": [],
    "8200": [],
    "3521": [],
    "646": [],
    "522": [],
    "7735": [],
    "8914": [],
    "3036": [],
    "2872": [],
    "5923": [],
    "7149": [],
    "5293": [],
    "5791": [],
    "3710": [],
    "3216": [],
    "9168": [],
    "2269": [],
    "7479": [],
    "3994": [],
    "3953": [],
    "8267": [],
    "5417": [],
    "996": [],
    "6358": [],
    "4507": [],
    "5754": [],
    "8618": [],
    "1917": [],
    "6753": [],
    "4260": [],
    "2538": [],
    "7097": [],
    "4413": [],
    "2337": [],
    "3649": [],
    "830": [],
    "9085": [],
    "6279": [],
    "3203": [],
    "5968": [],
    "6867": [],
    "901": [],
    "7631": [],
    "5499": [],
    "4137": [],
    "2139": [],
    "3241": [],
    "2994": [],
    "155": [],
    "5726": [],
    "4753": [],
    "3816": [],
    "4283": [
        "@nmittler - So you are thinking that each stream's `pendingBytes` should be of data type `long` (and then what ever else needs to change to accommodate this)?\n",
        "@Scottmitch yeah that's basically it (for now). The `writableBytes` would still be an int, but streams may have more than `MAX_INT` to send.  \n"
    ],
    "9175": [],
    "4284": [
        "@ninja- Feel free to add more description.\n",
        "looks good to me. I could clarify that in my use case (a proxy) it wouldn't change the behaviour without the message squasher so it completes what squasher does rel #4285.\nunless @normanmaurer has something against it we could set a default to \"call when out.size() > 16, after each call to decode(...)\" and add a setter so for example setFireMessageCount(1) and it seems like 10 minutes to implement.\n",
        "done @ PR #4288 \n"
    ],
    "5516": [],
    "4744": [],
    "5471": [],
    "8678": [],
    "9024": [],
    "5236": [],
    "7811": [],
    "3510": [],
    "1556": [],
    "6900": [],
    "6438": [],
    "7899": [],
    "9053": [],
    "6390": [],
    "6703": [],
    "2504": [],
    "4556": [],
    "6449": [],
    "2157": [],
    "2459": [],
    "1172": [],
    "2700": [],
    "3101": [],
    "3984": [],
    "4106": [],
    "3245": [],
    "8452": [],
    "2385": [],
    "7028": [],
    "8804": [],
    "1554": [],
    "935": [],
    "8619": [],
    "6708": [],
    "6155": [],
    "1453": [],
    "6292": [],
    "7434": [],
    "5424": [],
    "25": [],
    "8119": [],
    "3720": [],
    "8929": [],
    "6873": [],
    "5096": [],
    "3682": [],
    "9438": [],
    "2561": [],
    "3210": [],
    "7478": [],
    "4306": [],
    "6521": [],
    "6417": [],
    "6275": [],
    "4602": [],
    "5574": [],
    "7105": [],
    "8021": [],
    "6493": [],
    "1666": [],
    "3843": [],
    "5230": [],
    "7671": [],
    "7111": [],
    "6675": [],
    "8666": [],
    "370": [],
    "3287": [],
    "8740": [],
    "7994": [],
    "2298": [],
    "3991": [],
    "2978": [],
    "6117": [],
    "8971": [],
    "46": [],
    "801": [],
    "6395": [],
    "5702": [],
    "5501": [],
    "7246": [],
    "3227": [],
    "6720": [],
    "4742": [],
    "6301": [],
    "4177": [],
    "3829": [],
    "6733": [],
    "6135": [],
    "7806": [],
    "2760": [],
    "3789": [],
    "4149": [],
    "2757": [],
    "6234": [],
    "3846": [],
    "3298": [],
    "4673": [],
    "8339": [],
    "3399": [],
    "5448": [],
    "4938": [],
    "3042": [],
    "2070": [],
    "5300": [],
    "6916": [],
    "6099": [],
    "6000": [],
    "7406": [],
    "4685": [],
    "7140": [],
    "3528": [],
    "7425": [],
    "6518": [],
    "5972": [],
    "3144": [],
    "15": [],
    "7503": [],
    "5531": [],
    "8995": [],
    "211": [],
    "7341": [],
    "6394": [],
    "4820": [],
    "5192": [],
    "5413": [],
    "2927": [],
    "3440": [],
    "7909": [],
    "5269": [],
    "4527": [
        "@ejona86 @normanmaurer  What do you think about my initial commit? It still doesn't cover MultiplexCodec that I am going to fix as well",
        "@jprante @cy6erGn0m Will take a look today.",
        "@cy6erGn0m can you open this as a PR as it will make review a lot easier.",
        "`h2childchan` :)\n\n> If the client does not support PUSH_PROMISEs the frame is simply thrown away.\n\nShould the server application have some way of knowing that the `PUSH_PROMISE` was not sent (e.g. a promise failure)?\n\n> If the client supports PUSH_PROMISEs, then when the http2 codec is able to create a new stream it emulates a request (on a new stream) containing the same headers sent in the PUSH_PROMISE (such that it appears the client actually sent those headers)\n\nSo delaying sending of the `PUSH_PROMISE` until we can create the new stream.  I suspect this might cause issues if the state of the parent stream changes. It might be better to just send the `PUSH_PROMISE` immediately, but delay \"creation\" of the new stream channel until `MAX_CONCURRENT_STREAMS` permits.\n",
        "> Should the server application have some way of knowing that the PUSH_PROMISE was not sent (e.g. a promise failure)?\n\nI'm not sure if it is _necessary_ to inform the server application. I feel that we could eventually just have a way for the application to query whether PUSH_PROMISES are supported before \"wasting the CPU\" to produce headers for a client that prohibits PUSH_PROMISES.\n\nFailing the write promise sounded like a good idea at first (upon reading it right now), but now I'm thinking that will interact poorly with voidPromises, because failures for those are treated as errors in the pipeline. So right now I'm thinking the application won't be informed if the promise is thrown away.\n\n> So delaying sending of the PUSH_PROMISE until we can create the new stream.\n\nNot actually. I didn't specify when it would be sent on the wire. If the PUSH_PROMISE is to be sent (because the client supports them), then it will be sent \"immediately\" (I'm not specifying if it is flow controlled or not; just the intent is that it is not delayed for PUSH_PROMISE-specific reasons).\n\n> The server SHOULD send PUSH_PROMISE (Section 6.6) frames prior to sending any frames that reference the promised responses.\n\nPUSH_PROMISES are a little interesting because you should sent them before the DATA frame that contains the reference to the other resource (so before a DATA frame that has a URL to the resource). They are easily reordered before other frames, but shouldn't be reordered after DATA frames for the stream they are in (they can be sent after DATA frames though if that is what the application did).\n\nBecause of this though, we are required to sent the PUSH_PROMISE sooner than later.\n\n> It might be better to just send the PUSH_PROMISE immediately, but delay \"creation\" of the new stream channel until MAX_CONCURRENT_STREAMS permits.\n\nYes. That is how I was envisioning it working. The stream id will be reserved immediately but the fake request HEADERS (which \"creates\" the stream for the application to see) will be delayed.\n\nNote that this part of the spec is important, in that it means we _don't_ have to buffer the _response_ in order to make sure HEADERS are sent stream-id-ascending-order:\n\n> Promised streams are not required to be used in the order they are promised.\n",
        "> The stream id will be reserved immediately but the fake request HEADERS (which \"creates\" the stream for the application to see) will be delayed.\n\n@ejona86 OK I think I understand ... it seems that there's a subtle point you're making that wasn't obvious at first. IIUC you're suggesting that we send an \"empty\" `PUSH_PROMISE` immediately, but defer sending the separated headers until the stream is actually created (i.e. send a `HEADERS` frame). Did I get that right?\n",
        "@ejona86 - Will the \"promised stream\" id be exposed to the user when created, and would it be useful to have this? For example this may allow the user to take action on the stream if necessary (reset/cancel it, prioritize it (if this makes sense), etc...), and also maybe give better situational awareness.\n"
    ],
    "4973": [],
    "8643": [],
    "789": [],
    "4464": [],
    "7206": [],
    "4384": [],
    "7796": [],
    "7500": [],
    "5139": [],
    "2318": [],
    "4021": [],
    "835": [],
    "940": [],
    "5024": [],
    "7642": [],
    "2528": [],
    "1169": [],
    "8956": [],
    "8859": [],
    "4727": [],
    "6718": [],
    "7688": [],
    "3288": [],
    "6907": [],
    "4344": [],
    "3774": [],
    "5433": [],
    "6351": [],
    "7697": [],
    "2749": [],
    "4000": [],
    "7645": [],
    "5042": [],
    "5735": [],
    "2540": [],
    "8038": [],
    "8015": [],
    "4537": [],
    "5026": [],
    "6056": [],
    "3754": [],
    "4885": [],
    "9172": [],
    "5575": [],
    "7903": [],
    "4114": [],
    "6311": [],
    "5035": [],
    "3839": [],
    "5675": [],
    "11": [],
    "7894": [],
    "7914": [],
    "6945": [],
    "5350": [],
    "7955": [],
    "7747": [],
    "3826": [],
    "5593": [],
    "4769": [],
    "6937": [],
    "7388": [],
    "4822": [],
    "299": [],
    "7984": [],
    "5355": [],
    "3094": [],
    "3330": [],
    "4495": [],
    "3162": [],
    "3580": [],
    "5319": [],
    "9180": [],
    "7027": [],
    "5667": [],
    "6975": [],
    "8053": [],
    "4194": [],
    "5473": [],
    "6268": [],
    "7432": [],
    "6094": [],
    "8850": [],
    "4633": [],
    "545": [],
    "8413": [],
    "8417": [],
    "4029": [],
    "8379": [],
    "4813": [],
    "8396": [],
    "9069": [],
    "2790": [],
    "6890": [],
    "8889": [],
    "5669": [],
    "6976": [],
    "7621": [],
    "8972": [],
    "4447": [],
    "9117": [],
    "3621": [],
    "7270": [],
    "3141": [],
    "7018": [],
    "4980": [],
    "3481": [],
    "5221": [],
    "739": [],
    "6642": [],
    "5617": [],
    "5385": [],
    "6189": [],
    "3371": [],
    "9121": [],
    "7646": [],
    "6544": [],
    "6567": [],
    "399": [],
    "7300": [],
    "4851": [],
    "2370": [],
    "6584": [],
    "5144": [],
    "9003": [],
    "3143": [],
    "5528": [],
    "895": [],
    "7327": [],
    "3217": [],
    "7883": [],
    "7961": [],
    "1724": [],
    "8085": [],
    "2027": [],
    "3081": [],
    "152": [],
    "6429": [],
    "4944": [],
    "9055": [],
    "7110": [],
    "6636": [],
    "4842": [],
    "7679": [],
    "5379": [],
    "3903": [],
    "5527": [],
    "8773": [],
    "6888": [],
    "3000": [],
    "3505": [],
    "1740": [],
    "1429": [],
    "3409": [],
    "7399": [],
    "8638": [],
    "6816": [],
    "7615": [],
    "6247": [],
    "9120": [],
    "5611": [],
    "8826": [],
    "4858": [],
    "4277": [],
    "8818": [],
    "3993": [],
    "6050": [],
    "9022": [],
    "4371": [],
    "3877": [],
    "3958": [],
    "5661": [],
    "3408": [],
    "221": [],
    "368": [],
    "1336": [],
    "5687": [],
    "3611": [],
    "4164": [],
    "5336": [],
    "50": [],
    "3866": [],
    "1588": [],
    "6377": [],
    "7727": [],
    "4258": [],
    "8036": [],
    "727": [],
    "6180": [],
    "4931": [],
    "6080": [],
    "7475": [],
    "2386": [],
    "3412": [],
    "6434": [],
    "1928": [],
    "7791": [],
    "2691": [],
    "6140": [],
    "5474": [],
    "6083": [],
    "2913": [],
    "5496": [],
    "5689": [],
    "8562": [],
    "3901": [],
    "6369": [],
    "5098": [],
    "5133": [],
    "7919": [],
    "7981": [],
    "8040": [],
    "8301": [],
    "5825": [],
    "7435": [],
    "5594": [],
    "9038": [],
    "6009": [],
    "7965": [],
    "3262": [],
    "380": [],
    "2868": [],
    "5642": [],
    "1491": [],
    "5259": [],
    "6232": [],
    "2679": [],
    "8222": [],
    "6840": [],
    "6315": [],
    "8286": [],
    "5552": [],
    "7152": [],
    "3672": [],
    "2917": [],
    "6404": [],
    "7800": [],
    "5876": [],
    "6957": [],
    "6494": [],
    "5412": [],
    "4500": [],
    "7433": [],
    "2108": [],
    "2486": [],
    "4054": [],
    "511": [],
    "3753": [],
    "6973": [],
    "2284": [],
    "5165": [],
    "9125": [],
    "5068": [],
    "5620": [],
    "2955": [],
    "9058": [],
    "8076": [],
    "5146": [],
    "944": [],
    "1531": [],
    "4795": [],
    "381": [],
    "7315": [],
    "7039": [],
    "3713": [],
    "4847": [],
    "1776": [],
    "6942": [],
    "3740": [],
    "7853": [],
    "4154": [],
    "117": [],
    "52": [],
    "5996": [],
    "4816": [],
    "8037": [],
    "2035": [],
    "8569": [],
    "6869": [],
    "3952": [],
    "48": [],
    "8123": [],
    "4132": [],
    "1622": [],
    "6162": [],
    "8907": [],
    "4261": [],
    "1337": [],
    "8633": [],
    "5633": [],
    "8116": [],
    "5605": [],
    "6807": [],
    "2819": [],
    "2970": [],
    "3620": [],
    "4227": [],
    "4979": [],
    "5453": [],
    "2140": [],
    "3773": [],
    "4643": [],
    "8326": [],
    "404": [],
    "4179": [],
    "4281": [],
    "2477": [],
    "4503": [],
    "7030": [],
    "7184": [],
    "199": [],
    "3134": [],
    "4516": [],
    "6240": [],
    "3028": [],
    "5243": [],
    "1783": [],
    "5288": [],
    "2287": [],
    "3912": [],
    "6338": [],
    "7743": [],
    "8719": [],
    "1918": [],
    "7107": [],
    "9659": [],
    "2696": [],
    "6514": [],
    "6244": [],
    "8721": [],
    "8960": [],
    "4709": [],
    "8947": [],
    "3155": [],
    "5205": [],
    "6959": [],
    "8949": [],
    "3107": [],
    "4567": [],
    "6927": [],
    "5244": [],
    "7278": [],
    "4358": [],
    "9835": [],
    "4189": [],
    "8332": [],
    "5003": [],
    "4967": [],
    "1490": [],
    "7846": [],
    "4550": [],
    "4541": [],
    "2850": [],
    "5727": [],
    "6158": [],
    "8732": [],
    "2712": [],
    "3875": [],
    "3574": [],
    "931": [],
    "4049": [],
    "6069": [],
    "7867": [],
    "16": [],
    "6825": [],
    "6040": [],
    "5282": [],
    "8476": [],
    "5732": [],
    "4072": [],
    "6262": [],
    "4374": [],
    "3734": [],
    "8955": [],
    "4726": [],
    "3745": [],
    "7363": [],
    "5226": [],
    "9084": [],
    "7148": [],
    "6342": [],
    "8153": [],
    "7577": [],
    "543": [],
    "821": [],
    "7375": [],
    "1320": [],
    "8338": [],
    "2683": [],
    "7119": [],
    "7052": [],
    "2954": [],
    "6672": [],
    "3394": [],
    "7684": [],
    "3744": [],
    "2548": [],
    "2051": [],
    "4613": [],
    "5958": [],
    "6170": [],
    "2846": [],
    "1806": [],
    "7468": [],
    "3956": [],
    "4006": [],
    "5103": [],
    "3211": [],
    "6903": [],
    "1214": [],
    "9106": [],
    "2320": [],
    "4766": [],
    "1795": [],
    "6650": [],
    "5265": [],
    "8751": [],
    "6766": [],
    "6412": [],
    "8219": [],
    "6793": [],
    "4874": [],
    "6735": [],
    "5619": [],
    "4046": [],
    "6590": [],
    "7044": [],
    "8756": [],
    "4657": [],
    "6455": [],
    "4361": [],
    "4136": [],
    "4595": [],
    "5064": [],
    "4593": [],
    "7187": [],
    "3226": [],
    "422": [],
    "2461": [],
    "1356": [],
    "6381": [],
    "4610": [],
    "6456": [],
    "7900": [],
    "8752": [],
    "7113": [],
    "2929": [],
    "6190": [],
    "5283": [],
    "1581": [],
    "7233": [],
    "7911": [],
    "3635": [],
    "6323": [],
    "361": [],
    "1564": [],
    "6981": [],
    "1122": [],
    "8718": [],
    "2654": [],
    "6581": [],
    "8658": [],
    "4920": [],
    "1935": [],
    "3931": [],
    "7330": [],
    "2449": [],
    "3553": [],
    "3934": [],
    "4381": [],
    "7968": [],
    "5906": [],
    "2295": [],
    "5129": [],
    "2031": [],
    "8258": [],
    "3830": [],
    "3106": [],
    "3769": [],
    "2880": [],
    "4964": [],
    "4279": [],
    "3340": [],
    "2976": [],
    "12": [],
    "6238": [],
    "9160": [],
    "5410": [],
    "8867": [],
    "4986": [],
    "4498": [],
    "2748": [],
    "7288": [],
    "8579": [],
    "8067": [],
    "5423": [],
    "2472": [],
    "4262": [],
    "2682": [],
    "5665": [],
    "8051": [],
    "2866": [],
    "9217": [],
    "3739": [],
    "5463": [],
    "5416": [],
    "7286": [],
    "1270": [],
    "4551": [],
    "6399": [],
    "3498": [],
    "1949": [],
    "4367": [],
    "3398": [],
    "7185": [],
    "4768": [],
    "6992": [],
    "7400": [],
    "7773": [],
    "8244": [],
    "2468": [],
    "3489": [],
    "9040": [],
    "765": [],
    "903": [],
    "3073": [],
    "8556": [],
    "7033": [],
    "3928": [],
    "4128": [],
    "7368": [],
    "5500": [],
    "5072": [],
    "5608": [],
    "8957": [],
    "7091": [],
    "3860": [],
    "6995": [],
    "5782": [],
    "4598": [],
    "7709": [],
    "4299": [],
    "2416": [],
    "3832": [],
    "5705": [],
    "5589": [],
    "4853": [],
    "7395": [],
    "4410": [],
    "7950": [],
    "3935": [],
    "933": [],
    "5191": [],
    "6747": [],
    "1859": [],
    "7974": [],
    "3764": [],
    "964": [],
    "7135": [],
    "3661": [],
    "8421": [],
    "4338": [],
    "728": [],
    "753": [],
    "1541": [],
    "1856": [],
    "6823": [],
    "7384": [],
    "4911": [],
    "6513": [],
    "1476": [],
    "8233": [],
    "4325": [],
    "4080": [],
    "2753": [],
    "6875": [],
    "2574": [],
    "2730": [],
    "4612": [],
    "4762": [],
    "8423": [],
    "6723": [],
    "5414": [],
    "8239": [],
    "8467": [],
    "6587": [],
    "5019": [],
    "2420": [],
    "8469": [],
    "1318": [],
    "7160": [],
    "1218": [],
    "2566": [],
    "6749": [],
    "4565": [],
    "2283": [],
    "6122": [],
    "9095": [],
    "5268": [],
    "7361": [],
    "3289": [],
    "6896": [],
    "5267": [],
    "5036": [],
    "1916": [],
    "6230": [],
    "2117": [],
    "3283": [],
    "8900": [],
    "4295": [],
    "8033": [],
    "4989": [],
    "5057": [],
    "6416": [],
    "6334": [],
    "2388": [],
    "1268": [],
    "3706": [],
    "6224": [],
    "7005": [],
    "7201": [],
    "3041": [],
    "4934": [],
    "8933": [],
    "6688": [],
    "4640": [],
    "4797": [],
    "5044": [],
    "8582": [],
    "4092": [],
    "8596": [],
    "5008": [],
    "3154": [],
    "3638": [],
    "8600": [],
    "7344": [],
    "5580": [],
    "7826": [],
    "7638": [
        "@bryce-anderson thanks a lot! I will fix it :)",
        "@bryce-anderson PTAL https://github.com/netty/netty/pull/7640",
        "Fixed"
    ],
    "1858": [],
    "8293": [],
    "6002": [],
    "2776": [],
    "8910": [],
    "3563": [],
    "5255": [],
    "3098": [],
    "8111": [],
    "8319": [],
    "7815": [],
    "3766": [],
    "6501": [],
    "6078": [],
    "7306": [],
    "3492": [],
    "1126": [],
    "6715": [],
    "5384": [],
    "2688": [],
    "683": [],
    "6771": [],
    "2118": [],
    "2520": [],
    "8574": [],
    "8014": [],
    "7200": [],
    "3544": [],
    "6028": [],
    "8863": [],
    "2340": [],
    "4969": [],
    "9843": [],
    "3296": [],
    "6654": [],
    "2392": [],
    "4256": [],
    "3460": [],
    "3483": [],
    "7683": [],
    "55": [],
    "8734": [],
    "4974": [],
    "5609": [],
    "6534": [],
    "5751": [],
    "2740": [],
    "8176": [],
    "4812": [],
    "2849": [],
    "5761": [
        "Running `h2spec` now:  70 tests, 48 passed, 1 skipped, 21 failed\n\nWhen increasing the `DEFAULT_MAX_HEADER_SIZE` to 64KiB, 6 fewer tests fail. Specfically those in `6.10 CONTINUATION`, as this test sends large HEADERS / CONTINUATION frames. It's totally legit for a HTTP/2 implementation to not support such large HEADERS though https://github.com/netty/netty/issues/5774#issuecomment-243618794 ...\n",
        "May I ask that if I could help on this issue?\r\nI will pick up some simple case to fix and create issue and PR for that.\r\nIt seems that most failed test are occurred at http2 validation.\r\nThanks!",
        "@chhsiao90 sure just open PRs, we love contributions "
    ],
    "6978": [],
    "7907": [],
    "4298": [],
    "6707": [],
    "425": [],
    "946": [],
    "7411": [],
    "7718": [],
    "4908": [],
    "6067": [],
    "427": [],
    "7404": [],
    "3576": [],
    "6194": [],
    "8482": [],
    "7774": [],
    "4549": [],
    "197": [],
    "7036": [],
    "6563": [],
    "5635": [],
    "8174": [],
    "5758": [],
    "7448": [],
    "721": [],
    "5279": [],
    "5380": [],
    "7996": [],
    "3026": [],
    "4476": [],
    "4245": [],
    "6364": [],
    "7912": [],
    "3103": [],
    "3461": [],
    "867": [],
    "37": [],
    "3024": [],
    "7271": [],
    "2001": [],
    "9130": [],
    "6231": [],
    "5801": [],
    "1615": [],
    "2539": [],
    "7634": [],
    "5094": [],
    "8160": [],
    "8305": [],
    "3543": [],
    "7704": [],
    "1132": [],
    "3947": [],
    "6539": [],
    "2981": [],
    "4336": [],
    "2972": [],
    "4424": [],
    "2030": [],
    "1956": [],
    "2328": [],
    "3304": [],
    "2156": [],
    "1618": [],
    "9041": [],
    "6554": [],
    "7513": [],
    "1170": [],
    "3001": [],
    "7291": [],
    "3870": [],
    "2885": [],
    "8757": [],
    "6191": [],
    "4075": [],
    "6379": [],
    "5506": [],
    "4576": [],
    "23": [],
    "5966": [],
    "2755": [],
    "9070": [],
    "7799": [],
    "8009": [],
    "6414": [],
    "4952": [],
    "1919": [],
    "51": [],
    "4859": [],
    "3434": [],
    "4852": [],
    "244": [],
    "2026": [],
    "3932": [],
    "4254": [],
    "8327": [],
    "6433": [],
    "2702": [],
    "4770": [],
    "3607": [],
    "4839": [],
    "8280": [],
    "47": [],
    "33": [],
    "3477": [],
    "2167": [],
    "4801": [],
    "8622": [],
    "5704": [],
    "6467": [],
    "5116": [],
    "6361": [],
    "7843": [],
    "7193": [],
    "3238": [],
    "8906": [],
    "3270": [],
    "2980": [],
    "4732": [],
    "5984": [],
    "1174": [],
    "7933": [],
    "8825": [],
    "3526": [],
    "3811": [],
    "5332": [],
    "4321": [],
    "6120": [],
    "1553": [],
    "7419": [],
    "3177": [],
    "7102": [],
    "4226": [],
    "8944": [],
    "4108": [],
    "7281": [],
    "2529": [],
    "3926": [],
    "230": [],
    "1010": [],
    "3963": [],
    "1834": [],
    "7558": [],
    "5261": [],
    "30": [],
    "6144": [],
    "6997": [],
    "6036": [
        "@buchgr @normanmaurer /cc\n",
        "@Scottmitch I will take a crack on this....\n"
    ],
    "3251": [],
    "5": [],
    "5577": [],
    "3869": [],
    "2827": [],
    "3955": [],
    "3278": [],
    "7956": [],
    "7810": [],
    "7481": [],
    "5466": [],
    "6472": [],
    "6304": [],
    "3831": [],
    "3121": [],
    "4420": [],
    "7778": [],
    "1745": [],
    "8080": [],
    "7721": [],
    "39": [],
    "2110": [],
    "3742": [],
    "3648": [],
    "517": [],
    "4956": [],
    "1923": [],
    "8635": [],
    "6124": [],
    "3047": [],
    "6658": [],
    "7798": [],
    "7750": [],
    "9142": [],
    "8420": [],
    "6537": [],
    "5021": [],
    "5766": [],
    "7059": [],
    "3610": [],
    "5680": [],
    "8084": [],
    "6353": [],
    "5347": [],
    "6068": [],
    "1766": [],
    "2778": [],
    "3652": [],
    "17": [],
    "4479": [],
    "7129": [],
    "970": [],
    "2226": [],
    "8913": [],
    "5323": [],
    "8558": [],
    "2575": [],
    "6151": [],
    "7491": [],
    "6597": [],
    "7077": [],
    "5344": [],
    "2969": [],
    "2246": [],
    "330": [],
    "4109": [],
    "4574": [],
    "8392": [],
    "5877": [],
    "6495": [],
    "7946": [],
    "7301": [],
    "1452": [],
    "2029": [],
    "7870": [],
    "8422": [],
    "8788": [],
    "2989": [],
    "848": [],
    "6740": [],
    "6422": [],
    "4157": [],
    "1807": [],
    "5079": [],
    "7874": [],
    "6699": [],
    "804": [],
    "2645": [],
    "6183": [],
    "5016": [],
    "415": [],
    "4925": [],
    "4719": [],
    "6186": [],
    "3598": [],
    "2722": [],
    "7682": [],
    "8918": [],
    "8024": [],
    "8834": [],
    "5101": [],
    "6999": [],
    "5848": [],
    "9188": [],
    "6012": [],
    "9002": [],
    "5039": [],
    "8805": [],
    "6944": [],
    "5272": [],
    "4220": [],
    "121": [],
    "2116": [],
    "3164": [],
    "3696": [],
    "4581": [],
    "5572": [],
    "515": [],
    "8245": [],
    "294": [],
    "4861": [],
    "8768": [],
    "7691": [],
    "5290": [],
    "5912": [],
    "4088": [],
    "9119": [],
    "7017": [],
    "2081": [],
    "5879": [],
    "6320": [
        "I don't know if this helps, but this is how apache tcnative does the renegotiation (in an older version): https://github.com/apache/tomcat-native/blob/043f95087f712595598901b7c5f915ca5fbf86d5/native/src/sslnetwork.c#L650\r\nIn the trunk they removed the `SSL_set_state` call completely: https://github.com/apache/tomcat-native/blob/trunk/native/src/sslnetwork.c#L632",
        "I honestly don't know enough to determine whether renegotiation is necessary or alternative approaches.",
        "@Scottmitch I wonder if we should just remove the support for `renegotiation` as its risky business anyway. This would also allow us to just drop `set_state` usage and so support openssl 1.1.x.\r\n\r\nWDYT ?\r\n\r\n@carl-mastrangelo @ejona86 @nmittler WDYT as well?"
    ],
    "4499": [],
    "2799": [],
    "2863": [],
    "6874": [],
    "8735": [],
    "4421": [],
    "3885": [],
    "495": [],
    "5738": [],
    "5087": [],
    "7807": [],
    "5988": [],
    "1696": [],
    "8632": [],
    "6001": [],
    "5697": [],
    "8621": [],
    "2258": [],
    "6680": [],
    "5824": [],
    "8445": [],
    "934": [],
    "7298": [],
    "490": [],
    "7377": [],
    "1006": [],
    "3732": [],
    "6779": [],
    "2064": [],
    "4607": [],
    "3016": [],
    "6383": [],
    "2423": [],
    "4225": [],
    "3772": [],
    "6398": [],
    "7405": [],
    "1142": [],
    "6097": [],
    "3284": [],
    "6684": [],
    "5673": [],
    "6785": [],
    "4682": [],
    "7174": [],
    "5141": [],
    "7952": [],
    "7463": [],
    "3344": [],
    "5592": [],
    "5210": [],
    "7146": [],
    "7325": [],
    "9034": [],
    "1157": [],
    "5342": [],
    "6418": [
        "@yusufbulentavci ping"
    ],
    "8649": [],
    "8741": [],
    "5442": [],
    "4239": [],
    "4511": [],
    "9023": [],
    "7352": [],
    "957": [],
    "2960": [],
    "869": [],
    "1158": [],
    "8035": [],
    "2322": [],
    "8974": [],
    "6872": [],
    "2633": [],
    "8754": [],
    "6592": [],
    "2697": [],
    "8211": [],
    "8494": [],
    "987": [],
    "4978": [],
    "7626": [],
    "4032": [],
    "6633": [],
    "6229": [],
    "1343": [],
    "1969": [],
    "1892": [],
    "8786": [],
    "3232": [],
    "9111": [],
    "7269": [],
    "2374": [],
    "4416": [],
    "6350": [],
    "7610": [],
    "5240": [],
    "5686": [],
    "2554": [],
    "8941": [],
    "2747": [],
    "3034": [],
    "8665": [],
    "2669": [],
    "5784": [],
    "1675": [],
    "3683": [],
    "1822": [],
    "4107": [],
    "1096": [],
    "8057": [],
    "3777": [],
    "5511": [],
    "3236": [],
    "6857": [],
    "2480": [],
    "6276": [],
    "8664": [],
    "5158": [],
    "1965": [],
    "709": [],
    "2496": [],
    "6702": [],
    "3032": [],
    "6536": [
        "@yogeshvedpathak would be nice if you could provide more information, reproducer would be a huge help.",
        "Is there no stack for the NPE?",
        "Unfortunately there is no stack trace for NPE (i was surprised by that that.) From the other logs from our application i can tell that thi happens right after connection termination. So my best guess is that NPE is coming from pendingUnencryptedWrites being null. ",
        "Could you upgrade to latest netty version and see if it still happens?\n\n> Am 13.03.2017 um 08:46 schrieb yogeshvedpathak <notifications@github.com>:\n> \n> Unfortunately there is no stack trace for NPE (i was surprised by that that.) From the other logs from our application i can tell that thi happens right after connection termination. So my best guess is that NPE is coming from pendingUnencryptedWrites being null.\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
        "@yogeshvedpathak you might also consider adding ```-XX:-OmitStackTraceInFastThrow``` to your JVM args.",
        "As noted please upgrade to latest version and re-open if you still see the issue with more details",
        "@yogeshvedpathak https://github.com/netty/netty/pull/8684 PTAL"
    ],
    "4084": [],
    "4590": [],
    "9972": [],
    "2347": [],
    "5137": [],
    "2938": [],
    "3650": [],
    "3827": [],
    "5509": [],
    "5995": [],
    "8019": [],
    "5411": [],
    "4394": [],
    "4553": [],
    "6413": [],
    "3427": [],
    "3446": [],
    "785": [],
    "332": [],
    "8866": [],
    "4221": [],
    "6648": [],
    "4491": [],
    "2155": [],
    "8408": [],
    "3618": [],
    "1582": [],
    "9185": [],
    "6357": [],
    "467": [],
    "2876": [],
    "6519": [],
    "7823": [],
    "3199": [],
    "6596": [
        "I am also seeing this problem.  If I add a 2 second sleep to prevent the JVM from stopping after stopping Netty the issue goes away proving this is not at all related to jar dependencies, as follows:\r\n\r\nErrors:\r\n\r\n```java\r\n        // Shut down all event loops to terminate all threads.\r\n        bossGroup.shutdownGracefully();\r\n        workerGroup.shutdownGracefully();\r\n\r\n        // Wait until all threads are terminated.\r\n        bossGroup.terminationFuture().syncUninterruptibly();\r\n        workerGroup.terminationFuture().syncUninterruptibly();\r\n```\r\n\r\nNo error:\r\n\r\n```java\r\n        // Shut down all event loops to terminate all threads.\r\n        bossGroup.shutdownGracefully();\r\n        workerGroup.shutdownGracefully();\r\n\r\n        // Wait until all threads are terminated.\r\n        bossGroup.terminationFuture().syncUninterruptibly();\r\n        workerGroup.terminationFuture().syncUninterruptibly();\r\n\r\n        try {\r\n            // ensure that shutdown has actually completed and won't\r\n            // cause class loader error if JVM starts unloading classes\r\n            SECONDS.sleep(2);\r\n        } catch (InterruptedException ignore) {\r\n            // ignore\r\n        }\r\n```",
        "Perhaps the issue is that there are interactions to remove thread local variables after the thread has attempted to be stopped and as the JVM is existing, the issue seems to come from the finally block in the following code in FastThreadLocalRunnable:\r\n\r\n```java\r\n        try {\r\n            runnable.run();\r\n        } finally {\r\n            FastThreadLocal.removeAll();\r\n        }\r\n```\r\n\r\nas follows:\r\n\r\n```java\r\nException in thread \"nioEventLoopGroup-3-5\" Exception in thread \"nioEventLoopGroup-3-9\" Exception in thread \"nioEventLoopGroup-3-7\" java.lang.NoClassDefFoundError: io/netty/buffer/PoolArena$1\r\n\tat io.netty.buffer.PoolArena.freeChunk(PoolArena.java:293)\r\n\tat io.netty.buffer.PoolThreadCache$MemoryRegionCache.freeEntry(PoolThreadCache.java:460)\r\n\tat io.netty.buffer.PoolThreadCache$MemoryRegionCache.free(PoolThreadCache.java:430)\r\n\tat io.netty.buffer.PoolThreadCache$MemoryRegionCache.free(PoolThreadCache.java:422)\r\n\tat io.netty.buffer.PoolThreadCache.free(PoolThreadCache.java:279)\r\n\tat io.netty.buffer.PoolThreadCache.free(PoolThreadCache.java:270)\r\n\tat io.netty.buffer.PoolThreadCache.free(PoolThreadCache.java:241)\r\n\tat io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache.onRemoval(PooledByteBufAllocator.java:450)\r\n\tat io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache.onRemoval(PooledByteBufAllocator.java:426)\r\n\tat io.netty.util.concurrent.FastThreadLocal.remove(FastThreadLocal.java:271)\r\n\tat io.netty.util.concurrent.FastThreadLocal.removeAll(FastThreadLocal.java:67)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:32)\r\n\tat java.base/java.lang.Thread.run(Thread.java:844)\r\n```",
        "@normanmaurer I have no effective way to confirm id this fixes the issue unless this fix is available in a SNAPSHOT version.  Do you know if that is the case?",
        "I still get the following errors:\r\n\r\n```java\r\n[WARNING] Unexpected exception in the selector loop.\r\njava.lang.NoClassDefFoundError: io/netty/channel/AbstractChannel$AbstractUnsafe$8\r\n    at io.netty.channel.AbstractChannel$AbstractUnsafe.deregister (AbstractChannel.java:817)\r\n    at io.netty.channel.AbstractChannel$AbstractUnsafe.fireChannelInactiveAndDeregister (AbstractChannel.java:777)\r\n    at io.netty.channel.AbstractChannel$AbstractUnsafe.close (AbstractChannel.java:760)\r\n    at io.netty.channel.AbstractChannel$AbstractUnsafe.close (AbstractChannel.java:615)\r\n    at io.netty.channel.nio.NioEventLoop.closeAll (NioEventLoop.java:725)\r\n    at io.netty.channel.nio.NioEventLoop.run (NioEventLoop.java:504)\r\n    at io.netty.util.concurrent.SingleThreadEventExecutor$5.run (SingleThreadEventExecutor.java:909)\r\n    at io.netty.util.concurrent.FastThreadLocalRunnable.run (FastThreadLocalRunnable.java:30)\r\n    at java.lang.Thread.run (Thread.java:745)\r\nCaused by: java.lang.ClassNotFoundException: io.netty.channel.AbstractChannel$AbstractUnsafe$8\r\n    at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass (SelfFirstStrategy.java:50)\r\n    at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass (ClassRealm.java:271)\r\n    at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass (ClassRealm.java:247)\r\n    at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass (ClassRealm.java:239)\r\n    at io.netty.channel.AbstractChannel$AbstractUnsafe.deregister (AbstractChannel.java:817)\r\n    at io.netty.channel.AbstractChannel$AbstractUnsafe.fireChannelInactiveAndDeregister (AbstractChannel.java:777)\r\n    at io.netty.channel.AbstractChannel$AbstractUnsafe.close (AbstractChannel.java:760)\r\n    at io.netty.channel.AbstractChannel$AbstractUnsafe.close (AbstractChannel.java:615)\r\n    at io.netty.channel.nio.NioEventLoop.closeAll (NioEventLoop.java:725)\r\n    at io.netty.channel.nio.NioEventLoop.run (NioEventLoop.java:504)\r\n    at io.netty.util.concurrent.SingleThreadEventExecutor$5.run (SingleThreadEventExecutor.java:909)\r\n    at io.netty.util.concurrent.FastThreadLocalRunnable.run (FastThreadLocalRunnable.java:30)\r\n    at java.lang.Thread.run (Thread.java:745)\r\nException in thread \"nioEventLoopGroup-2-1\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nCaused by: java.lang.ClassNotFoundException: io.netty.util.concurrent.DefaultPromise$1\r\n\tat org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50)\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)\r\n\t... 5 more\r\nException in thread \"nioEventLoopGroup-2-5\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-2-6\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-2-7\" Exception in thread \"nioEventLoopGroup-2-4\" Exception in thread \"nioEventLoopGroup-2-9\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-2-8\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\njava.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-2-2\" Exception in thread \"nioEventLoopGroup-2-3\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\njava.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\njava.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-2-16\" Exception in thread \"nioEventLoopGroup-2-11\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-4\" Exception in thread \"nioEventLoopGroup-2-20\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-20\" Exception in thread \"nioEventLoopGroup-2-19\" Exception in thread \"nioEventLoopGroup-2-10\" Exception in thread \"nioEventLoopGroup-2-15\" Exception in thread \"nioEventLoopGroup-2-17\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\njava.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\njava.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\njava.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\njava.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\njava.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-2-12\" Exception in thread \"nioEventLoopGroup-2-13\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-17\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-15\" Exception in thread \"nioEventLoopGroup-2-14\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-2-18\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-7\" Exception in thread \"nioEventLoopGroup-3-18\" Exception in thread \"nioEventLoopGroup-3-5\" Exception in thread \"nioEventLoopGroup-3-19\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-16\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-14\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-13\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-11\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-8\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-9\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-12\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-10\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-3\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-6\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-1\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nException in thread \"nioEventLoopGroup-3-2\" java.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\njava.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\njava.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\njava.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\njava.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\njava.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\njava.lang.NoClassDefFoundError: io/netty/util/concurrent/DefaultPromise$1\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:432)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:956)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n```\r\n\r\nI am producing this by using the MockServer project maven plugin.  If the maven build stops when Netty is running (which has been started by the plugin) then this error is produced.  I have also seen similar errors in other scenarios, however those are much harder to reliable produce.\r\n\r\nIf you run the following command you can reproduce this error.   However using this command it is not as straight forward to test a fix because it requires creating a local SNAPSHOT version of MockServer with the patched (SNAPSHOT) version of netty in it.\r\n\r\n```bash\r\nmvn -Dmockserver.serverPort=1080 -Dmockserver.timeout=1 -Dmockserver.logLevel=INFO org.mock-server:mockserver-maven-plugin:5.5.0:run\r\n```",
        "I realised I could solve the issue in the reproducer above by removing the shutdown hook.  This may have been the cause of all the issues I've seen.  It may be that calling `shutdownGracefully()` during shutdown is causing the exception.  It is not clear to me why this is causing a `NoClassDefFoundError` but perhaps some static code execution is failing resulting in this error.",
        "@johnou My dependencies on pom.xml is as below:\r\n\r\n```\r\n<dependencies>\r\n        <dependency>\r\n            <groupId>log4j</groupId>\r\n            <artifactId>log4j</artifactId>\r\n            <version>1.2.17</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.netty</groupId>\r\n            <artifactId>netty-all</artifactId>\r\n            <version>4.1.9.Final</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>junit</groupId>\r\n            <artifactId>junit</artifactId>\r\n            <version>4.12</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.google.cloud</groupId>\r\n            <artifactId>google-cloud-datastore</artifactId>\r\n            <version>0.11.1-beta</version>\r\n        </dependency>\r\n</dependencies>\r\n```\r\nI looked for conflicts using the \"Maven Helper\" plugin in IntelliJ and did not find any in the netty jars.\r\n\r\nLet me know if anymore information is required.",
        "Hi,\r\nHere is some new information about when the above error message is generated.\r\nCurrently I am doing manual deployments. I build the jar on another machine and copy the jar from that machine to this. Once I have copied the new JAR, I kill the running server process using kill -2 and it produces the mentioned error in the issue.\r\n\r\nIf I kill the process before I copy the new JAR or if I kill the process when the new JAR is still getting copied (scp-ed) then the server shuts down without any error using kill -2 command\r\n\r\nLet me know if this is helpful\r\n\r\n\r\n",
        "@Underbalanced I am sending a shutdown signal to the process using kill -2 command which in turn executes the stop() method mentioned in beginning. This is where I am stopping the server and releasing resources back. Am I missing something there ? ",
        "@sshntt Side question. You killing the application rather then a clean exit, wouldn't this create memory leaks? Because of the direct memory allocated from the OS if you or the JVM defaults to using direct memory I thought we had to cleanly exit netty to release the resources back to the OS or java for that matter? ",
        "Try to use `mvn dependency:tree` to determine the troubles with dependencies. Perhaps, the Netty version from dependency `google-cloud-datastore` -> `grpc` -> `netty` is older then 4.1.9.",
        "@sshntt you could try something like this..\r\n\r\n```xml\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n\r\n        <maven.compiler.source>1.8</maven.compiler.source>\r\n        <maven.compiler.target>1.8</maven.compiler.target>\r\n\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n\r\n        <netty.version>4.1.9.Final</netty.version>\r\n    </properties>\r\n\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>io.netty</groupId>\r\n                <artifactId>netty-bom</artifactId>\r\n                <version>${netty.version}</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>log4j</groupId>\r\n            <artifactId>log4j</artifactId>\r\n            <version>1.2.17</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.netty</groupId>\r\n            <artifactId>netty-all</artifactId>\r\n            <version>${netty.version}</version> <!-- still need to define version here as netty-all is not part of netty-bom but I would recommend defining the modules you require (no need to specify the version as it will be inherited from netty-bom -->\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>junit</groupId>\r\n            <artifactId>junit</artifactId>\r\n            <version>4.12</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.google.cloud</groupId>\r\n            <artifactId>google-cloud-datastore</artifactId>\r\n            <version>0.11.1-beta</version>\r\n        </dependency>\r\n    </dependencies>\r\n```",
        "@fenik17 yep it's pulling in 4.1.6\r\n\r\n![nettypom](https://cloud.githubusercontent.com/assets/323497/24697137/547d5a76-19ec-11e7-90d1-a88fa08351fc.png)\r\n",
        "related to #4671",
        "@jamesdbloom let me have a look.",
        "@jamesdbloom could you verify if this fixes it: https://github.com/netty/netty/pull/8666 ?",
        "@jamesdbloom 4.1.33.Final-SNAPSHOT contains it"
    ],
    "7635": [],
    "7364": [],
    "4167": [],
    "184": [],
    "1430": [],
    "3310": [],
    "7245": [],
    "5517": [],
    "4223": [],
    "206": [],
    "8901": [],
    "1272": [],
    "3482": [],
    "150": [],
    "2085": [],
    "7177": [],
    "3677": [],
    "5847": [],
    "9148": [],
    "2672": [],
    "4811": [],
    "7223": [],
    "8746": [],
    "201": [],
    "5050": [],
    "5811": [],
    "5513": [],
    "2315": [],
    "6060": [],
    "5475": [],
    "98": [],
    "5449": [],
    "4846": [],
    "4451": [],
    "2563": [],
    "7202": [],
    "1176": [],
    "6664": [
        "ah, I can convert it to pure Netty, I used Vert.x for setting up the server faster, but the important part is in Netty. I'll update it of course Norman, I just focused on providing something quickly :-)",
        "updated with only netty code in the reproducer",
        "ah just look at the unit test `TheTest`, not the \"Main\" class, sorry for confusion.\r\n",
        "I had open ssl classloading issues when running the main in Intellij so I moved all to a unit test with tcnative as scope test and it worked",
        "@Scottmitch can you explain why it works with file Key/Cert and OpenSSL in 4.1.8 ?",
        "here is the validation with OpenSSL and Key/Cert:\r\n\r\n```\r\nCaused by: java.security.cert.CertificateException: No name matching localhost_ found\r\n\tat sun.security.util.HostnameChecker.matchDNS(HostnameChecker.java:221)\r\n\tat sun.security.util.HostnameChecker.match(HostnameChecker.java:95)\r\n\tat sun.security.ssl.X509TrustManagerImpl.checkIdentity(X509TrustManagerImpl.java:455)\r\n\tat sun.security.ssl.X509TrustManagerImpl.checkIdentity(X509TrustManagerImpl.java:436)\r\n\tat sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:252)\r\n\tat sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:136)\r\n\tat io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$ExtendedTrustManagerVerifyCallback.verify(ReferenceCountedOpenSslClientContext.java:223)\r\n```",
        "@vietj would have been nice if it would be a netty only unit test :)",
        "@vietj there is still vert.x code for the server. Can you change this as well ?",
        "@vietj ah ok... thx will check",
        "I will investigate soon... Just need to find some time",
        "@vietj I will close this for now as there was no more activity. Please re-open if you still think there is an issue and provide more infos.",
        "Ok I think I know what the problem is as I spotted it while doing some other work... Let me re-open",
        "Alright... I did some more checking but unfortunally it will be kind of impossible for us to do the same here easily as the wrapping is done in the `SSLContextImpl` (which is package-private) and there is no way for us to easily access the wrapper itself (and also the hostname checking that is used here). So with this in mind this is more an implementation detail then anything else. I will close this now. ",
        "Asked on the openjdk mailinglist if there is any plan to expose it in the future:\r\n\r\nhttp://mail.openjdk.java.net/pipermail/security-dev/2018-September/018160.html"
    ],
    "8662": [],
    "4648": [],
    "8668": [],
    "9204": [],
    "9014": [],
    "7925": [],
    "6410": [],
    "7136": [],
    "4734": [],
    "242": [],
    "5953": [],
    "6042": [],
    "7034": [],
    "8982": [],
    "9065": [],
    "3426": [],
    "5918": [],
    "2884": [],
    "8650": [],
    "8418": [],
    "8639": [],
    "3516": [],
    "3285": [],
    "92": [],
    "8180": [],
    "8908": [],
    "24": [],
    "5007": [],
    "3020": [],
    "8753": [],
    "5679": [],
    "4237": [],
    "6407": [],
    "8393": [],
    "4789": [],
    "9062": [],
    "3439": [],
    "5903": [],
    "4388": [],
    "2510": [],
    "6052": [],
    "6783": [],
    "9137": [],
    "7085": [],
    "7015": [],
    "4862": [],
    "3102": [],
    "323": [],
    "2627": [],
    "2992": [],
    "4143": [],
    "3381": [],
    "7985": [],
    "6022": [],
    "5491": [],
    "8323": [],
    "506": [],
    "6569": [],
    "5568": [],
    "7065": [],
    "4799": [],
    "2266": [],
    "1232": [],
    "4273": [],
    "5498": [],
    "2851": [],
    "7937": [],
    "5614": [],
    "4217": [],
    "96": [],
    "2044": [],
    "1674": [],
    "5404": [],
    "5548": [],
    "7802": [],
    "4454": [],
    "3074": [],
    "4323": [],
    "2789": [],
    "5670": [],
    "6605": [],
    "7681": [],
    "8108": [],
    "342": [],
    "3191": [],
    "5965": [],
    "6288": [],
    "5526": [],
    "1044": [],
    "8184": [],
    "6440": [],
    "2582": [],
    "7720": [],
    "1422": [],
    "556": [],
    "5959": [],
    "7929": [],
    "2942": [],
    "2756": [],
    "4660": [],
    "3339": [],
    "4280": [],
    "4089": [],
    "3977": [],
    "3453": [],
    "5545": [],
    "544": [],
    "6839": [],
    "301": [],
    "2948": [],
    "6844": [],
    "6318": [],
    "5721": [],
    "2711": [],
    "5485": [],
    "6055": [],
    "8637": [],
    "8497": [],
    "8340": [],
    "229": [],
    "26": [],
    "1059": [],
    "7426": [],
    "6690": [],
    "6004": [],
    "7705": [],
    "3456": [],
    "5807": [],
    "4": [],
    "6485": [],
    "5450": [],
    "8948": [],
    "4305": [],
    "3856": [],
    "2878": [],
    "953": [],
    "5715": [],
    "1620": [],
    "5115": [],
    "6914": [],
    "697": [],
    "7831": [],
    "693": [],
    "4622": [],
    "8105": [],
    "271": [],
    "5632": [],
    "5121": [],
    "645": [],
    "172": [],
    "3822": [],
    "3397": [],
    "4764": [],
    "4034": [],
    "9209": [],
    "7469": [],
    "8800": [],
    "1939": [],
    "3847": [],
    "4620": [],
    "5330": [],
    "5030": [],
    "1884": [],
    "8821": [],
    "4878": [],
    "3930": [],
    "2940": [],
    "9080": [],
    "7058": [],
    "5818": [],
    "4849": [],
    "4850": [],
    "6486": [],
    "7068": [],
    "4659": [],
    "3136": [],
    "2209": [],
    "8899": [],
    "1540": [],
    "2891": [],
    "1572": [],
    "928": [],
    "9072": [],
    "7504": [],
    "1869": [],
    "2543": [],
    "3631": [],
    "8701": [],
    "7687": [],
    "3513": [],
    "955": [],
    "7354": [],
    "2178": [],
    "8465": [],
    "8583": [],
    "5364": [],
    "4779": [],
    "7020": [
        "+1 on this ticket.\r\n\r\nWe have theorized about this attack vector and it'd be great to be able to offload the handshaking to a different thread pool that doesn't interfere with the normal worker threads.",
        "In my mind... Split SslHandler into two classes. Let there be a new SslHandshakeHandler and some class that does everything but the handshake portion. Wrap these two into a codec style class for the convenient path and give people to use the handlers separately.\r\n\r\nThen use `ChannelPipeline#add(EventExecutorGroup, SslHandshakeHandler)` if you want the handshakes to happen on a different thread than the default.\r\n\r\nThat is obviously an API breaking change. For compatibility this could be baked into SslHandler which could take an optional configuration parameter in the form of an executor.\r\n\r\nJust throwing it out there.",
        "@anshuman-osc I did not say its unexpected I just said I would be interested to see a profiler snapshot ;)  Can you share the snapshot ?",
        "Same but still on my to do list\n\n> Am 23.08.2017 um 17:28 schrieb Scott Mitchell <notifications@github.com>:\n> \n> sorry I have not had cycles to investigate this yet\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
        "I still have this issue on my to do list but just had not cycles yet :( In general we should just \u201ccorrectly\u201d support an Executor here as SSLEngine.getTask() already allow doing this.\n\n\n> On 6. Oct 2017, at 17:37, Roger <notifications@github.com> wrote:\n> \n> In my mind... Split SslHandler into two classes. Let there be a new SslHandshakeHandler and some class that does everything but the handshake portion. Wrap these two into a codec style class for the convenient path and give people to use the handlers separately.\n> \n> Then use ChannelPipeline#add(EventExecutorGroup, SslHandshakeHandler) if you want the handshakes to happen on a different thread than the default.\n> \n> That is obviously an API breaking change. For compatibility this could be baked into SslHandler which could take an optional configuration parameter in the form of an executor.\n> \n> Just throwing it out there.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub <https://github.com/netty/netty/issues/7020#issuecomment-334791085>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AAa0QqF25oxKOwYJddEZfNbI6P9HrE3Rks5spklHgaJpZM4OiTMP>.\n> \n\n",
        "@johnou yep thats the way to go... I just had no time yet and its not trivial to make it work with the state-machine. Feel free to try tho :)",
        "As of today we support offloading handshake stuff from the EventLoop by specify an `Executor` when creating the `SslHandler`. Closing this "
    ],
    "6321": [],
    "3853": [],
    "6847": [],
    "7042": [],
    "5090": [],
    "1665": [],
    "3359": [],
    "7324": [],
    "6256": [],
    "338": [],
    "4129": [],
    "9009": [],
    "2325": [],
    "6710": [],
    "8785": [],
    "3743": [],
    "3158": [],
    "2530": [],
    "8769": [],
    "6216": [],
    "8121": [],
    "5420": [],
    "5650": [],
    "2285": [],
    "296": [],
    "2775": [],
    "8162": [],
    "2612": [],
    "4951": [],
    "5212": [],
    "8187": [],
    "7209": [],
    "9102": [],
    "4743": [],
    "3286": [],
    "4415": [],
    "8728": [],
    "7943": [],
    "8789": [],
    "968": [],
    "6989": [],
    "6647": [],
    "5681": [],
    "7261": [],
    "8349": [],
    "3444": [],
    "6986": [],
    "2546": [],
    "8255": [],
    "4202": [],
    "7751": [],
    "7031": [],
    "2111": [],
    "2907": [],
    "4670": [],
    "7530": [],
    "5253": [],
    "3093": [],
    "2632": [],
    "5733": [],
    "6594": [],
    "5899": [],
    "4307": [],
    "6332": [],
    "4123": [],
    "2379": [],
    "3595": [],
    "6893": [],
    "6258": [],
    "5027": [],
    "5123": [],
    "6505": [],
    "7236": [],
    "4639": [],
    "7905": [],
    "8831": [],
    "5004": [],
    "1473": [],
    "3186": [],
    "6278": [],
    "8776": [],
    "5132": [],
    "2745": [],
    "8557": [],
    "7551": [],
    "2610": [],
    "2569": [],
    "1721": [],
    "1494": [],
    "2": [],
    "2617": [],
    "3176": [],
    "4750": [],
    "3752": [],
    "938": [],
    "8447": [],
    "3591": [],
    "6352": [],
    "4148": [],
    "2670": [],
    "8450": [],
    "4126": [],
    "5745": [],
    "8268": [],
    "8350": [],
    "3089": [],
    "7949": [],
    "6346": [],
    "3776": [],
    "7195": [],
    "2113": [],
    "6487": [],
    "9170": [],
    "3018": [],
    "7527": [],
    "4188": [],
    "19": [],
    "2941": [],
    "5497": [],
    "8505": [],
    "6136": [],
    "7013": [],
    "6026": [],
    "5618": [],
    "6465": [],
    "3614": [],
    "3146": [],
    "5388": [],
    "3961": [],
    "3990": [],
    "2503": [],
    "8075": [],
    "8441": [],
    "6471": [],
    "7254": [
        "I think we could add a system property that tells netty to not even try to access this stuff when running on java9. Let me reopen",
        "Yep... That said while a warning is logged netty works.",
        "I think we should just not try to use reflection when using java9 for now as this scares people and there is not much we can do anyway.",
        "@doom369 https://github.com/netty/netty/pull/7650 PTAL",
        "Fixed by https://github.com/netty/netty/pull/7650"
    ],
    "3454": [],
    "1927": [],
    "2427": [],
    "475": [],
    "5816": [],
    "9157": [],
    "7934": [],
    "4165": [],
    "1139": [],
    "5956": [],
    "1252": [],
    "7272": [
        "Sorry to add noise to this issue, but how did you manage to shade netty with tcnative at all? I run into the problem that netty cannot load the native library (for details: [stackoverflow](https://stackoverflow.com/questions/46650776/after-shading-io-netty-tcnative-stops-working))",
        "cc @ejona86 "
    ],
    "981": [],
    "5196": [],
    "9124": [],
    "8979": [],
    "6464": [],
    "8816": [],
    "7122": [],
    "8820": [],
    "5469": [],
    "5571": [],
    "4483": [],
    "715": [],
    "2281": [],
    "9402": [],
    "9152": [],
    "18": [],
    "5353": [],
    "6290": [],
    "6882": [],
    "3261": [],
    "9098": [],
    "3266": [],
    "8573": [],
    "2951": [],
    "6160": [],
    "7677": [],
    "126": [],
    "6833": [],
    "4303": [],
    "362": [],
    "91": [],
    "8281": [],
    "7329": [
        "@jianyuanzh hmm I think what you describe is actually what I would expect. Can you show me how exactly your build the `DnsNameResolver` ?"
    ],
    "3508": [],
    "7821": [],
    "6651": [],
    "2479": [],
    "7467": [],
    "7343": [],
    "4708": [],
    "7591": [],
    "7109": [],
    "6270": [],
    "4368": [],
    "9206": [],
    "4510": [],
    "7250": [],
    "7714": [],
    "7407": [],
    "7365": [],
    "2631": [],
    "6157": [],
    "8798": [],
    "4667": [],
    "6193": [],
    "7730": [],
    "9155": [],
    "3347": [],
    "4894": [],
    "2550": [],
    "3647": [],
    "6608": [],
    "5858": [],
    "2695": [],
    "3872": [],
    "8729": [],
    "8236": [],
    "2513": [],
    "6054": [],
    "4349": [],
    "1165": [],
    "4540": [],
    "8147": [],
    "6604": [],
    "4105": [],
    "7663": [],
    "9132": [],
    "5397": [],
    "3549": [],
    "5464": [],
    "7921": [],
    "6340": [],
    "6871": [],
    "6046": [],
    "7064": [],
    "3809": [],
    "8247": [],
    "4478": [],
    "2106": [],
    "6659": [],
    "5671": [],
    "5537": [],
    "6497": [],
    "5407": [],
    "3090": [],
    "5919": [],
    "4187": [],
    "3279": [],
    "3999": [],
    "8404": [],
    "4218": [],
    "5316": [],
    "7484": [],
    "7523": [],
    "6682": [],
    "8246": [],
    "4554": [],
    "6044": [],
    "7299": [],
    "7793": [],
    "9190": [],
    "5061": [],
    "2418": [],
    "8282": [],
    "7832": [],
    "2316": [],
    "3703": [],
    "6923": [],
    "5419": [],
    "14": [],
    "3431": [],
    "7501": [
        "Fixed by https://github.com/netty/netty/pull/7502 .. @doom369 thanks"
    ],
    "7511": [
        "@mosesn can you open a PR with a unit test ?",
        "@mosesn thanks buddy"
    ],
    "9364": [],
    "6104": [],
    "7408": [],
    "3436": [],
    "2068": [],
    "6556": [],
    "5085": [],
    "3499": [],
    "936": [],
    "5638": [],
    "513": [],
    "9050": [],
    "6878": [],
    "7546": [
        "Did you test the suggested change ?\n\n> Am 28.12.2017 um 12:14 schrieb litangyu <notifications@github.com>:\n> \n> Expected behavior\n> \n> I want to use the Netty in Android, and create a capture software.\n> \n> Can you change the code into a BKS KeyStore library that is compatible with Android.\n> \n> I find the way of buildKeyStore () in SslContext, which uses KeyStore.getInstance (\"JKS\"). I think if you use KeyStore.getInstance (KeyStore.getDefaultType ()), it will be better.\n> \n> My English is not very good. It may not express what I mean. But I'm looking forward to getting back to me, or giving me some advice.\n> \n> Actual behavior\n> \n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err: javax.net.ssl.SSLException: failed to initialize the server-side SSL context\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at io.netty.handler.ssl.JdkSslServerContext.newSSLContext(JdkSslServerContext.java:278)\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at io.netty.handler.ssl.JdkSslServerContext.<init>(JdkSslServerContext.java:237)\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at io.netty.handler.ssl.SslContext.newServerContextInternal(SslContext.java:415)\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at io.netty.handler.ssl.SslContextBuilder.build(SslContextBuilder.java:441)\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at me.lty.myapplication.proxy.handler.HttpProxyServerHandle.channelRead(HttpProxyServerHandle.java:140)\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1359)\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:935)\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:134)\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:645)\n> 12-28 19:01:36.910 23808-24612/me.lty.myapplication W/System.err:     at io.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:545)\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err:     at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:499)\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err:     at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:459)\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err:     at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err:     at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:138)\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err:     at java.lang.Thread.run(Thread.java:818)\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err: Caused by: java.security.KeyStoreException: java.security.NoSuchAlgorithmException: KeyStore JKS implementation not found\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err:     at java.security.KeyStore.getInstance(KeyStore.java:119)\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err:     at io.netty.handler.ssl.SslContext.buildKeyStore(SslContext.java:1001)\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err:     at io.netty.handler.ssl.SslContext.buildKeyManagerFactory(SslContext.java:1162)\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err:     at io.netty.handler.ssl.SslContext.buildKeyManagerFactory(SslContext.java:1153)\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err:     at io.netty.handler.ssl.JdkSslServerContext.newSSLContext(JdkSslServerContext.java:256)\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err: \t... 19 more\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err: Caused by: java.security.NoSuchAlgorithmException: KeyStore JKS implementation not found\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err:     at org.apache.harmony.security.fortress.Engine.notFound(Engine.java:190)\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err:     at org.apache.harmony.security.fortress.Engine.getInstance(Engine.java:139)\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err:     at java.security.KeyStore.getInstance(KeyStore.java:116)\n> 12-28 19:01:36.911 23808-24612/me.lty.myapplication W/System.err: \t... 23 more\n> \n> \n> ### Steps to reproduce\n> When create SslContext throw exception.\n> My code:\n> SslContext sslCtx = SslContextBuilder\n>                         .forServer(serverConfig.getServerPriKey(), CertPool.getCert(this.host, serverConfig))\n>                         .build();\n> ### Minimal yet complete reproducer code (or URL to code)\n> \n> ### Netty version\n> 4.1.15\n> ### JVM version (e.g. `java -version`)\n> 1.8.0_121\n> ### OS version (e.g. `uname -a`)\n> Android 5.0.2  Mac OSX 10.13.2\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
        "@litangyu can you verify the fix https://github.com/netty/netty/pull/7547 ?",
        "@litangyu just check out the 4.1 branch and run `mvn clean package -DskipTests=true`. This will provide you with the jars. Didn't this work ?",
        "Seems like you are on Mac, this should fix it:\r\n\r\n```\r\nbrew install autoconf automake libtool\r\n```",
        "@litangyu here is also a jar that includes the PR: https://drive.google.com/open?id=1wXWkm-IcWdIXp4z6-lQM_5eEQ_SoitKw",
        "@litangyu good catch... I missed the missing `JKS` reference. Fixed this now. Please download the jar and try again:\r\n\r\nhttps://drive.google.com/open?id=1M0dMog5gRgi3WLMoXNvt_V5RDe9P2PSa\r\n\r\nFor the compile error please run : `mvn clean install -DskipTests=true`.",
        "@litangyu yes this has nothing to do with netty but comes from android / conscrypt itself. If I would have to guess I would double check the SSL Protocol version that you are using is compatible with the one the client is using. ",
        "So you figured it out ?\n\n> Am 13.01.2018 um 05:22 schrieb litangyu <notifications@github.com>:\n> \n> Closed #7546.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
        "Let me close this for now then... please reopen if the issue still happens or if you have more details "
    ],
    "7891": [],
    "8322": [],
    "7561": [
        "Fixed by https://github.com/netty/netty/pull/7562"
    ],
    "6510": [],
    "7099": [],
    "7565": [
        "@sprsquish PTAL https://github.com/netty/netty/pull/7580 this should fix it. And thanks for the test code :)",
        "Fixed by https://github.com/netty/netty/pull/7580"
    ],
    "7566": [
        "It has been established in https://github.com/square/okhttp/issues/3759 that this is a bug and non-compliant behavior with [RFC 1952](https://tools.ietf.org/html/rfc1952)\r\n  ",
        "@normanmaurer @yschimke Please review my PR.",
        "@normanmaurer when will this fix be available on Maven Central?",
        "Merged... @asarkar thanks a lot!",
        "@asarkar once we release... most likely end of the week or early next week."
    ],
    "7723": [],
    "7636": [],
    "7524": [],
    "7390": [],
    "8056": [],
    "3015": [],
    "4966": [],
    "3571": [],
    "5408": [],
    "7578": [
        "Fixed by https://github.com/netty/netty/pull/7579"
    ],
    "873": [],
    "7417": [],
    "7583": [
        "Some notes..\r\n\r\nMight make more sense for io.netty.resolver.dns.DefaultDnsCache#get to return something like this to avoid concurrency issues with the list (in my experience exposing mutable data from a cache is a bad idea)..\r\n\r\n```java\r\n    @Override\r\n    public List<? extends DnsCacheEntry> get(String hostname, DnsRecord[] additionals) {\r\n        checkNotNull(hostname, \"hostname\");\r\n        if (!emptyAdditionals(additionals)) {\r\n            return null;\r\n        }\r\n        return Collections.unmodifiableList(new ArrayList<DnsCacheEntry>(resolveCache.get(hostname)));\r\n    }\r\n```\r\notherwise we probably need to add a double check in the sync block to  io.netty.resolver.dns.DnsNameResolver#doResolveAllCached and io.netty.resolver.dns.DnsNameResolver#doResolveCached..\r\n\r\n```java\r\n    private boolean doResolveCached(String hostname,\r\n                                    DnsRecord[] additionals,\r\n                                    Promise<InetAddress> promise,\r\n                                    DnsCache resolveCache) {\r\n        final List<? extends DnsCacheEntry> cachedEntries = resolveCache.get(hostname, additionals);\r\n        if (cachedEntries == null || cachedEntries.isEmpty()) {\r\n            return false;\r\n        }\r\n\r\n        InetAddress address = null;\r\n        Throwable cause = null;\r\n        synchronized (cachedEntries) {\r\n            final int numEntries = cachedEntries.size();\r\n            if (numEntries == 0) {\r\n                return false;\r\n            }\r\n...\r\n```",
        "cc @mrniko",
        "@normanmaurer yeah figured as much, that's why I also mentioned the double check on the size in the sync block.",
        "@normanmaurer thanks for the quick response!",
        "Fixed by https://github.com/netty/netty/pull/7584... return a new `ArrayList` will produce too much GC :(",
        "That said I think we may want to do something smarter in the long run. But I think the fix is ok for now.",
        "@johnou please check https://github.com/netty/netty/pull/7587 ... I think this is a more proper fix"
    ],
    "6588": [],
    "7585": [
        "Fixed by https://github.com/netty/netty/pull/7594 ... @asarkar PTAL",
        "Fixed by https://github.com/netty/netty/pull/7594"
    ],
    "2046": [],
    "2310": [],
    "7588": [
        "@ivankelly Does this mean this issue will be resolved once we add Harmony's NOTICE file somewhere in our repository? Do we also need to include that file in JAR files?",
        "@ivankelly I think I pulled it in from the official repository. It was a very long time ago, though. Looking into the NOTICE file at: http://svn.apache.org/viewvc/harmony/enhanced/java/trunk/NOTICE?view=markup\r\n\r\n> The parts you pulled into AsciiString seem to be only from java.lang.String, which is code which IBM contributed to harmony,\r\n\r\nYes, that's correct.\r\n\r\n> but they assigned copyright to ASF when they did so. I had to dig into this when getting our own NOTICE up to scratch, which is when I found this issue.\r\n\r\nI'm not really sure how our 'partial NOTICE file' has to look like, then. What about this:\r\n\r\n```\r\nApache Harmony\r\n\r\nCopyright 2006, 2010 The Apache Software Foundation.\r\n\r\nThis product includes software developed at\r\nThe Apache Software Foundation (http://www.apache.org/).\r\n\r\n(C) Copyright 1997,2004 International Business Machines Corporation.\r\nAll rights reserved.\r\n\r\n(C) Copyright IBM Corp. 2003. \r\n```\r\n\r\n.. or should I remove the IBM part since IBM assigned copyright to the ASF when they contribute? If IBM part can be removed, this leaves merely the first six lines which seem redundant to me. Do I still have to keep this file?\r\n",
        "> why do you say that the first 6 lines are redundant?\r\n\r\nBecause we mentioned that in our NOTICE.txt file although it's not verbatim. I can add it anyway, though. Will send a PR this week.",
        "@ivankelly https://github.com/netty/netty/blob/4.1/NOTICE.txt#L61 It's just an implicit mention, so let me just make it clear by adding the file.",
        "@ivankelly what do you mean by it doesn't cover the notice?",
        "tbh it looks like the code was rewritten (with flow changes and improvements, not just changing variable names, the produced bytecode varies greatly) the comments could easily be rewritten too if that's a problem.",
        "@trustin poke",
        "@ivankelly ups... this most be an oversight... you want to do a PR ?",
        "\ud83d\udc4d\n\n> Am 18.01.2018 um 19:35 schrieb Scott Mitchell <notifications@github.com>:\n> \n> we should make what ever attribution to Harmony (despite the rework) is required in the NOTICE file.\n> \n> @trustin - can you take care?\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
        "Can do, though it would probably be better for the person who originally pulled the harmony code to do so, so that you know what to bubble up. The original change was by @trustin (https://github.com/netty/netty/commit/681d46). From what I can tell it came from one of the last harmony releases, but I'm just guessing. ",
        "From ASLv2 4d\r\n\r\n> If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. \r\n\r\nApache harmony has a NOTICE file (as all ASF projects have), and as such this must be included as a readable copy in the derivative work (netty).",
        "@trustin I don't think you need, nor should, pull in the whole notice file. From ASLv2 4d, \"excluding those notices that do not pertain to any part of the Derivative Works\". The parts you pulled into AsciiString seem to be only from java.lang.String, which is code which IBM contributed to harmony, but they assigned copyright to ASF when they did so. I had to dig into this when getting our own NOTICE up to scratch, which is when I found this issue.",
        "@trustin but this also depends on where you pulled the harmony code from. Do you remember?",
        "@trustin AFAIK, regarding the code pulled in, the IBM lines are not needed. \r\n\r\nwhy do you say that the first 6 lines are redundant? It's informing the end user that the project contains code which is copyrighted to the ASF",
        "@Scottmitch possibly, though the latest asciistring code contains some methods which are strikingly similar to harmony, so i think the need for attribution still stands.",
        "Are you sure? I don't see it.",
        "@trustin ah, ya, i think that's a little too implicit :)",
        "@Scottmitch \r\none is \"int indexOf(CharSequence subString, int start)\"\r\n\r\nFrom apache-harmony-6.0-src-r991881 String.java:\r\n```\r\n   public int indexOf(String subString, int start) {\r\n        if (start < 0) {\r\n            start = 0;\r\n        }\r\n        int subCount = subString.count;\r\n        if (subCount > 0) {\r\n            if (subCount + start > count) {\r\n                return -1;\r\n            }\r\n            char[] target = subString.value;\r\n            int subOffset = subString.offset;\r\n            char firstChar = target[subOffset];\r\n            int end = subOffset + subCount;\r\n            while (true) {\r\n                int i = indexOf(firstChar, start);\r\n                if (i == -1 || subCount + i > count) {\r\n                    return -1; // handles subCount > count || start >= count                                                                                                                                                                                                              \r\n                }\r\n                int o1 = offset + i, o2 = subOffset;\r\n                while (++o2 < end && value[++o1] == target[o2]) {\r\n                    // Intentionally empty                                                                                                                                                                                                                                                \r\n                }\r\n                if (o2 == end) {\r\n                    return i;\r\n                }\r\n                start = i + 1;\r\n            }\r\n        }\r\n        return start < count ? start : count;\r\n    }\r\n```\r\n\r\nFrom AsciiString.java:\r\n```\r\n    public int indexOf(CharSequence subString, int start) {\r\n        if (start < 0) {\r\n            start = 0;\r\n        }\r\n\r\n        final byte[] value = this.value;\r\n        final int thisLen = value.length;\r\n\r\n        int subCount = subString.length();\r\n        if (subCount <= 0) {\r\n            return start < thisLen ? start : thisLen;\r\n        }\r\n        if (subCount > thisLen - start) {\r\n            return -1;\r\n        }\r\n\r\n        char firstChar = subString.charAt(0);\r\n        for (;;) {\r\n            int i = indexOf(firstChar, start);\r\n            if (i == -1 || subCount + i > thisLen) {\r\n                return -1; // handles subCount > count || start >= count                                                                                                                                                                                                                  \r\n            }\r\n            int o1 = i, o2 = 0;\r\n            while (++o2 < subCount && (value[++o1] & 0xFF) == subString.charAt(o2)) {\r\n                // Intentionally empty                                                                                                                                                                                                                                                    \r\n            }\r\n            if (o2 == subCount) {\r\n                return i;\r\n            }\r\n            start = i + 1;\r\n        }\r\n    }\r\n```\r\n\r\nThe comments are a giveaway",
        "@johnou It's still a derivative work."
    ],
    "1068": [],
    "2856": [],
    "2547": [],
    "4763": [],
    "3891": [],
    "8921": [],
    "9141": [],
    "3965": [],
    "3065": [],
    "5549": [],
    "3206": [],
    "1702": [],
    "7603": [
        "This seems like a duplicate of #4527.",
        "Will have a look....",
        "@cy6erGn0m I wonder if you have a good solution in mind in terms of API... Maybe we should add a method to `HttpStreamChannel` that allows to create a new `HttpStreamChannel` by sending a `PUSH_PROMISE` with is \"tied\" to the `HttpStreamChannel` itself. For the `HttpFrameCodec` it should be not too hard to do as we just need to expose a new Frame type and allow to write it.\r\n\r\nalso @ejona86 @trustin @Scottmitch @carl-mastrangelo .... ",
        "Another thing we could do is change `Http2StreamChannelBootstrap ` to detect if the `Channel` that is used to construct is of type `Http2StreamChannel` and if so write a `PUSH_PROMISE` when calling `open(...)`."
    ],
    "7864": [],
    "7607": [
        "It seems there's a general problem with Http2MultiplexCodec: it should either release or propagate unknown types. That's what #7612 does. So I'm good with that PR.\r\n\r\nHowever, I don't think we actually want to propagate PINGs, or at least in that way.\r\n\r\nI'd suggest two options:\r\n1. Don't propagate inbound PINGs. Instead, let an outbound PING have a Future that will be completed when the PING ACK arrives. The payload of PING wouldn't be exposed at all. (If we separated Http2MultiplexCodec from Http2FrameCodec we could propagate the PING within that small area, but that doesn't exist today. This is why PING existed during my earlier h2childchan PRs.)\r\n2. Use a userEvent. I don't like propagating the read because the logging isn't really acceptable. As a user you're forced to handle it. Yes, it will be \"handled\" without you doing anything, but the logging just tells you \"you're doing it wrong.\" That's the approach I was taking for the child chan itself; everything optional is a user event or has a trigger to enable.\r\n\r\nFor (2), if we're going to expose the payload, let's use a simple long or byte[] instead of ByteBuf. The size of the payload is fixed and really small. There's really no gain by using ByteBuf and the refcounting complicates things. This is the same approach I want to make for Http2GoAwayFrame. It is sort of \"neither here nor there\" for how we handle PING, though.",
        "> This is not consistent with Netty APIs which typically don't cater to request/response based APIs and instead rely upon the pipeline to propagate data.\r\n\r\nThere was another reason I was doing it: to manage allocating of PING ids. The payload is frequently an ID to keep easier track of what the ACKs mean. Coordinating the allocation is a bit of a problem since there are multiple handlers (including the HTTP/2 code itself) that may need to send them. Normally in Netty there's no need for coordination.\r\n\r\n> We can always override the pipeline behavior to avoid logging in scenarios that are \"safe\" to ignore.\r\n\r\nWait... it's a logger.debug... that's completely fine. And it's been that way... \"forever\". Now I wonder what in the world I was seeing...\r\n\r\nLuckily I don't think that changes my design of the child channels.\r\n\r\n> My main hesitation here is copying when it may otherwise not be necessary.\r\n\r\nCopying _8_ bytes? The ByteBuf pointer chasing and vtable indirection will be much more costly than that. And a pointer is 8 bytes, so we're _already_ copying the equivalent amount of data. And a pointer assignment is also more expensive in Java to coordinate with the GC. The ByteBuf will also need read and write indexes and a capacity and ref counting and...\r\n\r\nThe copying could be a bigger concern for GOAWAY, but the messages tend to be short. (I've not seen one larger than, say, 16 bytes?) But the GOAWAY case is also the one that benefits the most, in that [we're duplicating a DefaultHttp2GoAwayFrame and a ByteBuf for each child channel](https://github.com/netty/netty/blob/911b2ac/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java#L326). That's (8+4+4)+(8+4+4+4+4+4) = 44 bytes (assuming a DuplicatedByteBuf). If we used a byte[], we could actually share the same DefaultHttp2GoAwayFrame across all child channels, because there's no longer the readerIndex.\r\n\r\nTo me, the argument for keeping it as a ByteBuf is that it is convenient, because people are familiar with working with them.",
        "> Sharing should be possible either way, no?\r\n\r\nNo... :''( . If one child channel reads the ByteBuf, then the readerIndex will be changed for all the child channels. So only the first reader gets to see what's inside, unless all readers make sure to avoid updating the readerIndex."
    ],
    "1627": [],
    "3602": [],
    "2450": [],
    "7614": [],
    "7617": [
        "Hi, is this fix included in any 4.1.x release yet?",
        "Thanks. @fenik17 ",
        "@normanmaurer why isn't there a break in the loop if the thread is interrupted? wouldn't that indicate the application is shutting down?",
        "@normanmaurer then how about a daemon thread? Allowing the JVM process to terminate in a timely manner.",
        "@normanmaurer it can actually stop the jvm from terminating, I'll post more details shortly. ",
        "@normanmaurer I would expect something like this to exit gracefully without an explicit System.exit call.\r\n\r\n```java\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        ByteBuf byteBuf = PooledByteBufAllocator.DEFAULT.buffer();\r\n        byteBuf.release();\r\n        System.gc();\r\n        System.runFinalization();\r\n        // hangs because ObjectCleanerThread is not a daemon thread / LIVE_SET is not empty..\r\n    }\r\n}\r\n```"
    ],
    "2701": [],
    "4191": [],
    "7188": [],
    "6922": [],
    "7445": [],
    "7620": [
        "```\r\nprivate static String[] splitMultipartHeader(String sb) {\r\n        ...\r\n        valueStart = HttpPostBodyUtil.findNonWhitespace(sb, colonEnd);\r\n        valueEnd = HttpPostBodyUtil.findEndOfString(sb);\r\n        headers.add(sb.substring(nameStart, nameEnd));\r\n\r\n        String svalue = sb.substring(valueStart, valueEnd); // <--- StringIndexOutOfBoundsException\r\n        ...\r\n```\r\n\r\n```\r\nsplitMultipartHeader(\"Content-Type:\") -> valueStart=13 valueEnd=13 (OK returns [Content-Type, ])\r\nsplitMultipartHeader(\"Content-Type: \") -> valueStart=14 valueEnd=13\r\nsplitMultipartHeader(\"Content-Type: \\r\\n\") -> valueStart=16 valueEnd=13\r\n```",
        "https://gist.github.com/matteobertozzi/86e1b7d5f4205beee243897050a47069"
    ],
    "760": [],
    "3291": [],
    "8932": [],
    "7629": [
        "PING can use `long` as well. Since it is generally an ID and it is fixed-length, `long` isn't really strange to work with.\r\n\r\nTaken from https://github.com/netty/netty/issues/7607#issuecomment-360606631: \r\n> reader/writer indexes. we should be able to use duplicate()/slice().\r\n\r\n`duplicate()` works. That's [what we do today](https://github.com/netty/netty/blob/911b2ac/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java#L326). However, we need to do it once for each child channel.\r\n\r\nIgnoring object overhead (which will bloat this more) and assuming `duplicate()` uses `DuplicatedByteBuf`, each `Http2GoAwayFrame.duplicate()` has `(8+4+4)+(8+4+4+4+4+4) = 44 bytes` worth of fields anyway.\r\n\r\nSo we end up going through effort to use `ByteBuf`, but it's not clear it actually wins us much.",
        "To be clear: in this discussion I am trying to optimize the _experience_, not performance. Any talk about performance from me is mainly to point out that `ByteBuf` really doesn't provide us much in these cases.",
        "> given that it can be arbitrarily large\r\n\r\n> Since the data is not bounded\r\n\r\nIt's guaranteed to be less than 16k, or rather, less than the maximum frame size. But yes, that is a noticeable size.\r\n\r\n> it is consistent with how Netty represents data almost everywhere else\r\n\r\nSounds fine. Let's keep goaway as-is.\r\n\r\n----\r\n\r\nAside: it's a little bit of a shame that it isn't defined to be string data, since it generally _is_ character data and code is commonly assuming it is ascii/text and \"hoping for the best.\" If it was clearly a string we could store it as AsciiString/String. But alas.",
        "I don't have an opinion for the old API.",
        "> PING can use long\r\n\r\n+1 - way better than byte[8]\r\n\r\n> GO_AWAY\r\n\r\nI think it's better keeping `ByteBuf` in this case given that it can be arbitrarily large, especially in case where it contains some debugging info such as stack trace when using HTTP/2 internally.",
        "+1 for changing all.",
        "I am not sure ... but I kind of feel its good to be consistent even if it may be a bit more effort . At the moment its easy to just check if `ByteBufHolder` is implemented and if so be sure the frame holds some kind of content. This is not true anymore if we change it. Also while the memory overhead used by the ByteBuf may be \"huge\" compared to the actual data we could argue that this is not a problem as we would typically have a pool of these anyway. ",
        "@Scottmitch should I work on a PR ?",
        "@Scottmitch @ejona86 @carl-mastrangelo @bryce-anderson @trustin just to clarify, we want to change it to long (ping) all the way through the API ? So also for `FrameListener`, `Http2FrameWriter` etc... Correct ?",
        "ok will do.",
        "See https://github.com/netty/netty/pull/7690.",
        "Fixed by https://github.com/netty/netty/pull/7690"
    ],
    "7628": [
        "Will have a look \n\n> Am 25.01.2018 um 22:30 schrieb Moses Nakamura <notifications@github.com>:\n> \n> I think we can fix this by using a different type of promise rather than a void promise.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
        "@mosesn @vkostyukov thanks a lot... This should fix it https://github.com/netty/netty/pull/7631. Keep the reports coming ;)"
    ],
    "4473": [],
    "7639": [
        "> My first guess was to make the Http2ConnectionHandler not use CLOSE_ON_FAILURE, but instead add an executable to the event loop to close the channel.\r\n\r\nI brought up that other things related to this handling _may_ also be putting things on the event loop (or putting them there dependent of the reentrancy counter), such that the channel.close() still happens before they are processed. I didn't look into it at all.",
        "Based on grpc/grpc-java#4016, this _may_ be a regression introduced in netty 4.1.17. It is possible the regression is in gRPC instead of Netty, because I've not checked that just changing Netty introduces the problem, but given the Netty churn around that time and our research already it seems likely it was a Netty regression.",
        "I think @Scottmitch s patch makes perfect sense."
    ],
    "3275": [],
    "7641": [
        "Sounds good \ud83d\udc4c that said I think you should not re-order the promises but use an extra volatile boolean that is updated before any of the promises is notified. This way the notifications of the promises is also consistent with AbstractChannel and so other transports...\n\nSo please provide a PR with the suggestion I made \ud83d\udc4d\n\n> Am 26.01.2018 um 21:31 schrieb Bryce Anderson <notifications@github.com>:\n> \n> Btw, I'm happy to contribute a fix for this. We make heavy use of Netty and are building out on these new API's so I'd personally love to get more involved. That said, fft just fix it if you think its expedient.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
        "@bryce-anderson you are right... I should not write suggestions from my phone ;)",
        "Fixed..."
    ],
    "7676": [],
    "564": [],
    "8961": [],
    "7644": [
        "Can you provide a pr for a fix ?\n\n> Am 27.01.2018 um 10:08 schrieb kashike <notifications@github.com>:\n> \n> The netty-all artifact doesn't have a Automatic-Module-Name defined in the manifest like the rest of the projects do, resulting in requires netty.all.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n"
    ],
    "5446": [],
    "7387": [],
    "7917": [],
    "9030": [],
    "4876": [],
    "3014": [],
    "7654": [],
    "7655": [],
    "7660": [],
    "7662": [],
    "4844": [],
    "2987": [],
    "7665": [
        "I'm not working with Netty's source code, I'm looking at it in debugger from Vert.x MQTT. Could you do this please?",
        "@normanmaurer http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Figure_3.26_-"
    ],
    "8656": [],
    "7454": [],
    "7715": [],
    "7672": [
        "Question: this was applied to the Azure/V2 branch. Does it apply to the main as well? This issue (or something similar)  is being seen in apache spark various 2.X versions.  Reference:   Spark user mailing lists:\r\n\r\nhttp://apache-spark-user-list.1001560.n3.nabble.com/NoSuchMethodError-org-apache-spark-network-util-AbstractFileRegion-transferred-td35858.html\r\n\r\n and also SOF: https://stackoverflow.com/questions/57122179/channeloutputshutdownexception-on-spark-streaming-queries"
    ],
    "7673": [
        "cc @Scottmitch @rkapsi"
    ],
    "2921": [],
    "7444": [],
    "5555": [],
    "5974": [],
    "7686": [],
    "6982": [],
    "4887": [],
    "7689": [
        "@doom369 does the upload example need to be fixed?"
    ],
    "7225": [],
    "7834": [],
    "7695": [],
    "8992": [],
    "3052": [],
    "7314": [],
    "1271": [],
    "340": [],
    "7707": [],
    "7563": [],
    "4288": [],
    "5315": [],
    "680": [],
    "3748": [],
    "7572": [],
    "7710": [],
    "8403": [],
    "7713": [
        "@johnou PTAL",
        "I'm unable to reproduce it. Issue reported by company which uses Redisson.\r\n\r\nIt uses DNS resolver in this class:\r\nhttps://github.com/redisson/redisson/blob/09b2724c44567035c8806bfe4a79bdf355c816b8/redisson/src/main/java/org/redisson/connection/DNSMonitor.java\r\n\r\nHere is the point where `DnsAddressResolverGroup` is created:\r\nhttps://github.com/redisson/redisson/blob/387ed744b8bb49a49f9cd41adfd500c4592d2027/redisson/src/main/java/org/redisson/connection/MasterSlaveConnectionManager.java#L211\r\n\r\nHere is the point where `DNSMonitor` is created, supplied with `DnsAddressResolverGroup`:\r\nhttps://github.com/redisson/redisson/blob/387ed744b8bb49a49f9cd41adfd500c4592d2027/redisson/src/main/java/org/redisson/connection/MasterSlaveConnectionManager.java#L363\r\n",
        "Let's see. Thank you!",
        "@mrniko bit tapped out on GDPR work right now but thanks for the heads up!",
        "@normanmaurer no :)",
        "I think this was fixed by https://github.com/netty/netty/pull/7734"
    ],
    "5885": [],
    "2464": [],
    "2626": [],
    "3788": [],
    "7724": [
        "@jianglai thanks I will check.",
        "@jianglai should be fixed by https://github.com/netty/netty/pull/7727.",
        "@jianglai no problem... would be nice if you can verify the fix"
    ],
    "6788": [],
    "5310": [],
    "7729": [],
    "6378": [],
    "7991": [],
    "7742": [],
    "5005": [],
    "8716": [],
    "53": [],
    "7216": [],
    "8234": [],
    "6460": [],
    "7749": [],
    "7752": [],
    "7753": [
        "Hey, sorry dropped the ball on this. \r\n\r\nContext: we retry proxying requests if they fail for whatever reason\r\n\r\nWhat we found is with SSL requests, the bytebufs get forcefully cleared whereas plaintext requests we can retry with the same bytebufs. Our workaround was to manually cache and repopulate the body bytebufs for SSL retries: https://github.com/Netflix/zuul/blob/2.1/zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java#L510 \r\nFor additional context the `setBody()` method is here: https://github.com/Netflix/zuul/blob/2.1/zuul-core/src/main/java/com/netflix/zuul/message/ZuulMessageImpl.java#L136\r\n\r\nJust wanted to understand the reasoning for that behavior. ",
        "Yeah that's essentially what we're doing but it gets tricky with chunked bodies. So what we did is just buffer it and cache before we feed down into the Netty handler. \r\n\r\nThe behavior I observed was that the ByteBufs were still there but were all zeroed out. It seems like this only happens in the SSLHander though, not the regular HTTP handlers.",
        "Hmm yeah, that test seems to rule out the issue. Let me dig deeper here and see if I can find the cause."
    ],
    "7754": [],
    "7756": [],
    "9051": [],
    "7643": [],
    "7760": [
        "@normanmaurer I had a quick look. The logic looks sound. If I get more time, I'll look again. It's going to be something to do with something being added to turn it negative.",
        ":+1: "
    ],
    "5663": [],
    "4672": [],
    "7758": [
        "@MarkVilkel do you see this problem with a Android 5.0 client talking SSL with a Netty server eg. standalone java app, or using Netty inside an Android application on 5.0?"
    ],
    "54": [],
    "6267": [],
    "8931": [],
    "6759": [],
    "5113": [],
    "3950": [],
    "2873": [],
    "2255": [],
    "8726": [],
    "5960": [],
    "5136": [],
    "7781": [
        "Will have a look",
        "@trustin please check the PR."
    ],
    "226": [],
    "2146": [],
    "6790": [],
    "2657": [],
    "3525": [],
    "6615": [],
    "2831": [],
    "7795": [
        "and does it sound good? :-)",
        "I'll start to work on this if there's no objection."
    ],
    "2334": [],
    "3605": [],
    "6070": [],
    "7804": [
        "Doing a userspace fix for my immediate need right now. \r\nThe question for a netty internal implementation would be how big that buffer should be. right now its full size, so it can do that in one pass.\r\nThe typical buffer size is 8k. do we want this configurable (yet another method overload?)"
    ],
    "2290": [],
    "7941": [],
    "3992": [],
    "7627": [],
    "75": [],
    "2273": [],
    "7819": [
        "Yes this sounds good.... can you provide a PR?\n\n> Am 30.03.2018 um 14:24 schrieb Nicolae Mihalache <notifications@github.com>:\n> \n> Hello,\n> \n> I get an exception \"promise already done\" apparently caused by the ChunkedWriteHandler which is called twice for the same message, one from my flush and the other time from the channelWritabilityChanged.\n> \n> Not sure if the ChunkedWriteHandler.doFlush method is supposed to be called twice in the same write but it looks to work ok when it's called twice and the message is ChunkedInput.\n> \n> Maybe lines 304 and 305 should be reversed from:\n> \n>                 ctx.write(pendingMessage, currentWrite.promise);\n>                 this.currentWrite = null;\n> to:\n> \n>                 this.currentWrite = null;\n>                 ctx.write(pendingMessage, currentWrite.promise);\n> A stacktrace is attached.\n> stack-trace.txt\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n"
    ],
    "2833": [],
    "4156": [],
    "8561": [],
    "4496": [],
    "174": [],
    "4636": [],
    "7825": [
        "Looks like I can call `defaultHttp2HeadersEncoder.maxHeaderListSize(MAX_HEADER_LIST_SIZE)` to workaround this. If done immediately on creation, it looks like it won't collide with any received SETTINGS requesting a lower value."
    ],
    "5248": [],
    "3917": [],
    "4536": [],
    "7829": [],
    "7235": [],
    "9082": [],
    "402": [],
    "6010": [],
    "3420": [],
    "341": [],
    "7837": [
        "@amizurov its a bug :(\r\n \r\nFixed https://github.com/netty/netty/pull/7839"
    ],
    "8934": [],
    "1649": [],
    "4081": [],
    "7842": [
        "@davidmoten thanks for reporting"
    ],
    "3223": [],
    "9174": [],
    "5525": [],
    "7847": [],
    "1955": [],
    "1510": [],
    "6769": [],
    "3850": [],
    "5222": [],
    "7855": [],
    "6445": [],
    "7403": [],
    "7860": [],
    "4453": [],
    "4502": [],
    "7862": [
        "To chime in here in regards OCSP. Normally it's the client that does the validation. The server fetches it out-of-band from the CA's OCSP responder server and caches it for up to the TTL that is configured in CA's response (I believe 10 days is the max). That is something you wouldn't want to do inline during the handshake.\r\n\r\nAs for the client side. If you were to write a Netty based SSL client and wanted to do OCSP validation that involves needing to reach out to the CA then it's indeed a problem. The underlying OpenSSL API is synchronous.\r\n\r\nI believe a solution for dealing with this could be a dedicated SSL handhsake Thread pool so that the normal I/O event loop doesn't get blocked for other connections that are past the handshake (I think there is an open ticket for that).",
        "@sbernard31 try extending Netty's OCSP.\r\n\r\nhttps://github.com/netty/netty/blob/4.1/example/src/main/java/io/netty/example/ocsp/OcspServerExample.java"
    ],
    "7863": [],
    "5111": [],
    "3137": [],
    "5213": [],
    "7126": [],
    "1968": [],
    "6897": [],
    "6306": [],
    "7877": [],
    "3502": [],
    "6365": [],
    "7880": [],
    "1747": [],
    "7882": [
        "I used http://maradns.samiam.org/ to reproduce that. You can find its config attached to this message.\r\n[maradns-config.zip](https://github.com/netty/netty/files/1941275/maradns-config.zip)\r\n\r\n",
        "sorry, I can't help here",
        "@normanmaurer How do I define it? DnsAddressResolverGroup doesn't expose any method to do it.",
        "Thanks for your work! I tested it against default_dns_cache_fix. I don't see the issue anymore, but a new one - `java.net.UnknownHostException: failed to resolve 'dev.myredis.com' after 2 queries `. This problem is arise if DnsAddressResolverGroup object shared between multiple threads. Have a look at attached log [error.txt](https://github.com/netty/netty/files/1974469/error.txt)\r\n",
        "No, this won't happen if I comment out `resolver.close();` line in `Runnable` task. All invocations inside the task are synchronous.",
        "@normanmaurer the code is at `Minimal yet complete reproducer code (or URL to code)` section. Did you try to use DNS server deployed locally? I think there is a race condition due to fast response of local DNS.",
        "I able to reproduce that with web.de.\r\n\r\nYou missed the `resolver.close()` invocation at the end of the task",
        "Latch is not helping here, since problem is in `resolver.close()` and not in `group.close();`",
        "@normanmaurer OK. Thanks for the clarification!"
    ],
    "5510": [],
    "5695": [],
    "7502": [],
    "8266": [],
    "3825": [],
    "7887": [
        "I worked on the change last night :) but didn't send it out because I was investigating further changes. Sent it out now."
    ],
    "7534": [],
    "7888": [],
    "7892": [],
    "131": [],
    "4905": [],
    "7309": [],
    "613": [],
    "7898": [
        "The fix should be a one-liner null test. Happy to get a PR up."
    ],
    "3370": [],
    "5439": [],
    "1548": [],
    "7901": [],
    "4735": [],
    "4668": [],
    "8724": [],
    "4398": [],
    "3320": [],
    "6692": [],
    "1325": [],
    "7915": [
        "@slandelle @trustin @Scottmitch @carl-mastrangelo @ejona86 @mosesn Any thoughts on this ?",
        "Also related to this the JDK always seems to follow the CNAME here."
    ],
    "1005": [],
    "7803": [],
    "4155": [],
    "2291": [],
    "4213": [],
    "5023": [],
    "7118": [],
    "5683": [],
    "3749": [],
    "6289": [],
    "32": [],
    "8749": [],
    "7935": [
        "this is using netty-tcnative-boringssl-static version 2.0.8.Final",
        "same issue with netty-tcnative.\r\n\r\nnetty 4.1.16.Final + tcnative 2.0.6.Final do the right thing so we at least have a starting point for a bisect, I can give it a shot later this week if you don't find anything in the mean time.",
        "@normanmaurer \r\n\r\n```\r\nscala> engine.getEnabledProtocols\r\nres1: Array[String] = Array(SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2)\r\n\r\nscala> engine.setEnabledProtocols(enabled.toArray)\r\n\r\nscala> engine.getEnabledProtocols\r\nres3: Array[String] = Array(SSLv2Hello, TLSv1.2)\r\n```\r\n\r\ntested against the nightly snapshots, looks like  #7940 did the trick, thanks",
        "@dschobel do you use the native impl or the JDK impl ? Also if you use the native impl what flavour of it :) ?",
        "@dschobel interesting...  can you also verify with netty-tcnative (non static one) ? I ill need to dig into it a bit more I guess .",
        "@dschobel hmm are you really sure netty-tcnative does the same ? What openssl version you are using and compile it against ?",
        "@dschobel PTAL https://github.com/netty/netty/pull/7940 ... to make it short its a false-positive and if you use s_client it should not report SSLv2.",
        "Please verify current 4.1 branch which includes https://github.com/netty/netty/pull/7940. If the problem still persist please re-open",
        "@dschobel awesome... Thanks for verifying it :)"
    ],
    "9094": [],
    "4042": [],
    "5148": [],
    "7938": [
        "@jozefbalga thanks.... working on a fix.",
        "@jozefbalga PTAL https://github.com/netty/netty/pull/7939",
        "Fixed by https://github.com/netty/netty/pull/7939"
    ],
    "7162": [],
    "2494": [],
    "4961": [],
    "5287": [],
    "132": [],
    "8660": [],
    "7947": [
        "@bryce-anderson basically you are asking to get access to stream 1 (upgrade stream) ?",
        "@bryce-anderson I think you are right (but I am a bit busy atm so I may miss something). Did you check `Http2FrameCodec`? If its not possible atm are you interested in doing a PR ?",
        "\ud83d\udc4d sounds good to me\n\n> Am 17.05.2018 um 18:16 schrieb Eric Anderson <notifications@github.com>:\n> \n> @bryce-anderson, go for it. I couldn't work on it soon and the upgrade handler seems good enough to me.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n"
    ],
    "8481": [],
    "3708": [],
    "4557": [],
    "8882": [],
    "4848": [],
    "5220": [],
    "9073": [],
    "621": [],
    "538": [],
    "7449": [],
    "7787": [],
    "2002": [],
    "7964": [],
    "8188": [],
    "8399": [],
    "7380": [],
    "7969": [],
    "7970": [],
    "4902": [],
    "7906": [],
    "7973": [],
    "4654": [],
    "9107": [],
    "2338": [],
    "6526": [],
    "193": [],
    "4627": [],
    "7259": [],
    "5110": [],
    "2979": [],
    "4432": [],
    "6902": [],
    "7988": [],
    "7990": [],
    "3366": [],
    "2798": [],
    "6053": [],
    "5591": [],
    "9033": [],
    "4996": [],
    "8257": [],
    "8002": [],
    "5981": [],
    "8007": [],
    "7711": [],
    "6711": [],
    "8904": [],
    "4172": [],
    "8013": [
        "Are you also monitoring the JVM heap? Sounds like you might be seeing delays during full GC collection."
    ],
    "1219": [],
    "8745": [],
    "3056": [],
    "8017": [
        "Hello, we are using 4.0.56 and analyzing the threads with Eclipse Memory Analyzer Tool we have the scenario in the attached screenshot. Is it the same issue? \r\n![thread_from_mat](https://user-images.githubusercontent.com/41215/51985717-d5af9f00-249e-11e9-9250-727e940c9112.PNG)\r\n",
        "> @jesty no... this class only existed in 4.1.\r\n\r\nok, thanks."
    ],
    "8018": [
        "This sounds like a bug... interested in working on a PR?",
        "Yes just as for normal channels ",
        "@bryce-anderson I think at some point it did extend it but I changed it (my memory may be wrong here) because something was not needed and did not even work then extending the `AbstractChannel`. If I am not wrong this was related to the `ChannelOutboundBuffer`.",
        "@bryce-anderson thanks for the PR and yes I agree we should see if we can make `AbstractChannel` useable for it in the next major release.\r\n\r\n"
    ],
    "6356": [],
    "6883": [],
    "5595": [],
    "5573": [],
    "8023": [
        "@hc-codersatlas PRs welcome...",
        "looks like a bug to me... PR with fix and test welcome :)",
        "Fixed by https://github.com/netty/netty/pull/8048"
    ],
    "3480": [],
    "8025": [
        "@carl-mastrangelo @bryce-anderson @mosesn @ejona86 @Scottmitch thoughts ?",
        "@shorea yep... sounds good. We wanted to do a Netty release anyway :)"
    ],
    "321": [],
    "5781": [],
    "5604": [],
    "7506": [],
    "4669": [],
    "959": [],
    "7923": [],
    "2915": [],
    "5709": [],
    "8041": [],
    "2505": [],
    "5576": [],
    "8043": [],
    "4452": [],
    "8109": [],
    "3496": [],
    "31": [],
    "6877": [],
    "7541": [],
    "279": [],
    "4809": [],
    "5536": [],
    "349": [],
    "8073": [],
    "1420": [],
    "8865": [],
    "5247": [],
    "625": [],
    "8072": [],
    "6502": [],
    "8078": [],
    "6613": [],
    "8848": [],
    "6297": [],
    "9183": [],
    "5490": [],
    "5744": [],
    "1921": [],
    "5998": [],
    "6843": [],
    "7848": [],
    "3379": [],
    "3949": [],
    "1972": [],
    "4014": [],
    "3337": [],
    "4163": [],
    "8090": [
        "I'm wondering whether the `packagePrefix` should be used when calling [`env->GetMethodID(..)`](https://github.com/netty/netty/blob/4.1/transport-native-unix-common/src/main/c/netty_unix_socket.c#L1025)? As classes from netty-transport-native-unix-common are shaded along with kqueue or epoll? To look for something like `\"(Ljava/lang/String;IILfoo/io/netty/channel/unix/DatagramSocketAddress;)V\"` ?",
        "Thx @normanmaurer, I will try the reproducer with your branch.",
        "It seems OK with the reproducer, will confirm it with the original project. Thx.",
        "Thx @normanmaurer , I can confirm it's ok after your fix."
    ],
    "5655": [],
    "8048": [],
    "6146": [],
    "9037": [],
    "8107": [],
    "1162": [],
    "4036": [],
    "3345": [],
    "4596": [],
    "5676": [],
    "8112": [],
    "6047": [],
    "1758": [],
    "8122": [
        "b109, should we be checking build too?"
    ],
    "4655": [],
    "3165": [],
    "8887": [],
    "4282": [],
    "788": [],
    "8134": [],
    "7942": [],
    "8135": [],
    "4992": [],
    "5699": [],
    "7125": [],
    "8792": [],
    "4061": [],
    "8144": [],
    "2169": [],
    "7841": [],
    "850": [],
    "4559": [],
    "4463": [],
    "2629": [],
    "3665": [],
    "8226": [],
    "8152": [
        "It looks like the issue is still present in 4.0.\r\n\r\nI ran the tests from https://github.com/netty/netty/pull/8153/files#diff-21be031058403699535d72fa9ea7548fR242 against 4.0 (https://github.com/Gerrrr/netty/commit/69cefda98abf6afe7eaf35b7b0db0e95e28a7f19) and got are two failures:\r\n\r\n```\r\n$ mvn test -Dtest=ByteBufUtilTest\r\n....\r\n T E S T S\r\n-------------------------------------------------------\r\n[jetty-alpn-agent] Using: alpn-boot-8.1.11.v20170118.jar\r\nRunning io.netty.buffer.ByteBufUtilTest\r\n17:57:54.424 [main] DEBUG i.n.u.i.l.InternalLoggerFactory - Using SLF4J as the default logging framework\r\n17:57:54.426 [main] DEBUG io.netty.util.ResourceLeakDetector - -Dio.netty.leakDetection.level: simple\r\n17:57:54.426 [main] DEBUG io.netty.util.ResourceLeakDetector - -Dio.netty.leakDetection.targetRecords: 4\r\n17:57:54.442 [main] DEBUG i.n.util.internal.PlatformDependent - Platform: MacOS\r\n17:57:54.444 [main] DEBUG i.n.util.internal.PlatformDependent0 - -Dio.netty.noUnsafe: false\r\n17:57:54.444 [main] DEBUG i.n.util.internal.PlatformDependent0 - Java version: 8\r\n17:57:54.447 [main] DEBUG i.n.util.internal.PlatformDependent0 - sun.misc.Unsafe.theUnsafe: available\r\n17:57:54.448 [main] DEBUG i.n.util.internal.PlatformDependent0 - sun.misc.Unsafe.copyMemory: available\r\n17:57:54.449 [main] DEBUG i.n.util.internal.PlatformDependent0 - java.nio.Buffer.address: available\r\n17:57:54.449 [main] DEBUG i.n.util.internal.PlatformDependent0 - direct buffer constructor: available\r\n17:57:54.450 [main] DEBUG i.n.util.internal.PlatformDependent0 - java.nio.Bits.unaligned: available, true\r\n17:57:54.450 [main] DEBUG i.n.util.internal.PlatformDependent0 - jdk.internal.misc.Unsafe.allocateUninitializedArray(int): unavailable prior to Java9\r\n17:57:54.450 [main] DEBUG i.n.util.internal.PlatformDependent0 - java.nio.DirectByteBuffer.<init>(long, int): available\r\n17:57:54.450 [main] DEBUG i.n.util.internal.PlatformDependent - sun.misc.Unsafe: available\r\n17:57:54.451 [main] DEBUG i.n.util.internal.PlatformDependent - -Dio.netty.tmpdir: /var/folders/9b/pdm76rrd72l04r6dyf1j4lt80000gn/T (java.io.tmpdir)\r\n17:57:54.451 [main] DEBUG i.n.util.internal.PlatformDependent - -Dio.netty.bitMode: 64 (sun.arch.data.model)\r\n17:57:54.454 [main] DEBUG i.n.util.internal.PlatformDependent - -Dio.netty.noPreferDirect: false\r\n17:57:54.454 [main] DEBUG i.n.util.internal.PlatformDependent - -Dio.netty.maxDirectMemory: 3817865216 bytes\r\n17:57:54.454 [main] DEBUG i.n.util.internal.PlatformDependent - -Dio.netty.uninitializedArrayAllocationThreshold: -1\r\n17:57:54.455 [main] DEBUG io.netty.util.internal.CleanerJava6 - java.nio.ByteBuffer.cleaner(): available\r\n17:57:54.499 [main] DEBUG io.netty.buffer.AbstractByteBuf - -Dio.netty.buffer.bytebuf.checkAccessible: true\r\n17:57:54.503 [main] DEBUG i.n.util.ResourceLeakDetectorFactory - Loaded default ResourceLeakDetector: io.netty.util.ResourceLeakDetector@56aac163\r\n17:57:54.520 [main] DEBUG i.n.u.i.InternalThreadLocalMap - -Dio.netty.threadLocalMap.stringBuilder.initialSize: 1024\r\n17:57:54.520 [main] DEBUG i.n.u.i.InternalThreadLocalMap - -Dio.netty.threadLocalMap.stringBuilder.maxSize: 4096\r\n17:57:54.521 [main] DEBUG io.netty.buffer.ByteBufUtil - -Dio.netty.allocator.type: unpooled\r\n17:57:54.521 [main] DEBUG io.netty.buffer.ByteBufUtil - -Dio.netty.threadLocalDirectBufferSize: 65536\r\n17:57:54.521 [main] DEBUG io.netty.buffer.ByteBufUtil - -Dio.netty.maxThreadLocalCharBufferSize: 16384\r\nTests run: 29, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.754 sec <<< FAILURE! - in io.netty.buffer.ByteBufUtilTest\r\ntestWriteUtf8CompositeWrapped(io.netty.buffer.ByteBufUtilTest)  Time elapsed: 0.009 sec  <<< FAILURE!\r\njava.lang.AssertionError: expected:<UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf(ridx: 0, widx: 27, cap: 64)> but was:<CompositeByteBuf(ridx: 1, widx: 1, cap: 64, components=3)>\r\n\tat io.netty.buffer.ByteBufUtilTest.testWriteUtf8CompositeWrapped(ByteBufUtilTest.java:183)\r\n\r\ntestWriteUsAsciiCompositeWrapped(io.netty.buffer.ByteBufUtilTest)  Time elapsed: 0.001 sec  <<< FAILURE!\r\njava.lang.AssertionError: expected:<UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf(ridx: 0, widx: 10, cap: 16)> but was:<CompositeByteBuf(ridx: 1, widx: 1, cap: 64, components=3)>\r\n\tat io.netty.buffer.ByteBufUtilTest.testWriteUsAsciiCompositeWrapped(ByteBufUtilTest.java:138)\r\n\r\nHeap\r\n PSYoungGen      total 76288K, used 52573K [0x000000076ab00000, 0x0000000770000000, 0x00000007c0000000)\r\n  eden space 65536K, 80% used [0x000000076ab00000,0x000000076de577a0,0x000000076eb00000)\r\n  from space 10752K, 0% used [0x000000076f580000,0x000000076f580000,0x0000000770000000)\r\n  to   space 10752K, 0% used [0x000000076eb00000,0x000000076eb00000,0x000000076f580000)\r\n ParOldGen       total 175104K, used 0K [0x00000006c0000000, 0x00000006cab00000, 0x000000076ab00000)\r\n  object space 175104K, 0% used [0x00000006c0000000,0x00000006c0000000,0x00000006cab00000)\r\n Metaspace       used 10029K, capacity 10146K, committed 10240K, reserved 1058816K\r\n  class space    used 1254K, capacity 1267K, committed 1280K, reserved 1048576K\r\n\r\nResults :\r\n\r\nFailed tests:\r\n  ByteBufUtilTest.testWriteUsAsciiCompositeWrapped:138 expected:<UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf(ridx: 0, widx: 10, cap: 16)> but was:<CompositeByteBuf(ridx: 1, widx: 1, cap: 64, components=3)>\r\n  ByteBufUtilTest.testWriteUtf8CompositeWrapped:183 expected:<UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf(ridx: 0, widx: 27, cap: 64)> but was:<CompositeByteBuf(ridx: 1, widx: 1, cap: 64, components=3)>\r\n\r\nTests run: 29, Failures: 2, Errors: 0, Skipped: 0\r\n```",
        "@Gerrrr 4.0 is EOL, try updating to 4.1.",
        "@nitsanw doh! I will look into it"
    ],
    "42": [],
    "8148": [],
    "8158": [
        "would help to see a stacktrace ",
        "I looked at your stackoverflow and I feel like something is missing. Netty normally using a logging framework sl4j. I have not seen a printout as you have shown in the past when I have caused SSL Errors. Can you provide you code in a complete test case. Providing runnable code (doesn't have to be your private code) you can mock the private stuff; will allow us to run and actually re-produce the bug on our systems.\r\n\r\nError you posted on SO:\r\n`System.err: \r\n07-19 22:30:16.437 7609-7638/xx.xxxxxxx.sipclient W/System.err: java.nio.channels.ClosedChannelException \r\n07-19 22:30:16.437 7609-7638/xx.xxxxxxx.sipclient W/System.err: at io.netty.channel.AbstractChannel$AbstractUnsafe.ensureOpen(...)(Unknown Source)`",
        "I added a test for this to show it works as expected in the latest netty release: https://github.com/netty/netty/pull/8188\r\n\r\nClosing the issue"
    ],
    "10": [],
    "8833": [],
    "6756": [],
    "5074": [],
    "2484": [],
    "1291": [],
    "8165": [
        "@normanmaurer do you have time for a tcnative release this week?",
        "@rkapsi can you try to downgrade the openssl version used to build the static openssl artefact to 1.0.2 and try what happens ?\r\n\r\nBasically revert this one https://github.com/netty/netty-tcnative/commit/e9913cb73d6942964c8bbf00ede6478d8f4050d6.",
        "@rkapsi seems like openssl 1.1.x may have removed these ciphers or disabled these by default then ?",
        "@rkapsi very strange that it works with an earlier version of openssl but not with the latest... I will need to debug this but unfortunately I am very busy atm. So it may take some time.... Any help is welcome :)",
        "@rkapsi ok cool.. I will try to find some time... That said I am currently so busy that I had no time to even think about this issue :(",
        "@rkapsi awesome... let me try to fix it",
        "@rkapsi ok started to work on a fix",
        "@rkapsi this should be fixed by https://github.com/netty/netty-tcnative/pull/383. Can you verify ?",
        "@rkapsi yeah I think `BoringSSL` just not support it. ",
        "@rkapsi also thanks for the test PR \u2764\ufe0f ... Left a few comments",
        "@johnou @rkapsi I will release a new version of netty-tcnative end of the week.",
        "I will close this once we have a new netty-tcnative version"
    ],
    "7839": [],
    "8166": [
        "@koo-taejin PTAL https://github.com/netty/netty/pull/8168"
    ],
    "8249": [],
    "969": [],
    "8170": [
        "Will try to check later today. "
    ],
    "6635": [],
    "4713": [],
    "4987": [],
    "8970": [],
    "8720": [],
    "8438": [],
    "4045": [],
    "8150": [],
    "1087": [],
    "128": [],
    "228": [],
    "2463": [],
    "2487": [],
    "8793": [],
    "5060": [],
    "783": []
}